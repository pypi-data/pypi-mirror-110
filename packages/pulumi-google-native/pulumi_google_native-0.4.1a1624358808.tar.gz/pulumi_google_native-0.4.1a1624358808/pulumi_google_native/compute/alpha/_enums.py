# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AccessConfigNetworkTier',
    'AccessConfigType',
    'AddressAddressType',
    'AddressIpVersion',
    'AddressNetworkTier',
    'AddressPurpose',
    'AddressStatus',
    'AllocationShareSettingsShareType',
    'AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface',
    'AllocationSpecificSKUAllocationReservedInstancePropertiesMaintenanceInterval',
    'AttachedDiskInitializeParamsOnUpdateAction',
    'AttachedDiskInterface',
    'AttachedDiskMode',
    'AttachedDiskSavedState',
    'AttachedDiskType',
    'AuditLogConfigLogType',
    'AuthorizationLoggingOptionsPermissionType',
    'AutoscalerStatus',
    'AutoscalerStatusDetailsType',
    'AutoscalingPolicyCpuUtilizationPredictiveMethod',
    'AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType',
    'AutoscalingPolicyMode',
    'BackendBalancingMode',
    'BackendBucketCdnPolicyCacheMode',
    'BackendServiceCdnPolicyCacheMode',
    'BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackends',
    'BackendServiceConnectionTrackingPolicyTrackingMode',
    'BackendServiceLoadBalancingScheme',
    'BackendServiceLocalityLbPolicy',
    'BackendServiceProtocol',
    'BackendServiceSessionAffinity',
    'CallCredentialsCallCredentialType',
    'ChannelCredentialsChannelCredentialType',
    'ConditionIam',
    'ConditionOp',
    'ConditionSys',
    'DeprecationStatusState',
    'DiskInstantiationConfigInstantiateFrom',
    'DiskInterface',
    'DiskStatus',
    'DistributionPolicyTargetShape',
    'ExternalVpnGatewayRedundancyType',
    'FileContentBufferFileType',
    'FirewallDirection',
    'FirewallLogConfigMetadata',
    'FirewallPolicyRuleDirection',
    'FirewallPolicyRuleSecureTagState',
    'ForwardingRuleIPProtocol',
    'ForwardingRuleIpVersion',
    'ForwardingRuleLoadBalancingScheme',
    'ForwardingRuleNetworkTier',
    'ForwardingRulePscConnectionStatus',
    'GRPCHealthCheckPortSpecification',
    'GlobalAddressAddressType',
    'GlobalAddressIpVersion',
    'GlobalAddressNetworkTier',
    'GlobalAddressPurpose',
    'GlobalAddressStatus',
    'GlobalForwardingRuleIPProtocol',
    'GlobalForwardingRuleIpVersion',
    'GlobalForwardingRuleLoadBalancingScheme',
    'GlobalForwardingRuleNetworkTier',
    'GlobalForwardingRulePscConnectionStatus',
    'GlobalNetworkEndpointGroupNetworkEndpointType',
    'GlobalNetworkEndpointGroupType',
    'GlobalPublicDelegatedPrefixStatus',
    'GuestOsFeatureType',
    'HTTP2HealthCheckPortSpecification',
    'HTTP2HealthCheckProxyHeader',
    'HTTP2HealthCheckWeightReportMode',
    'HTTPHealthCheckPortSpecification',
    'HTTPHealthCheckProxyHeader',
    'HTTPHealthCheckWeightReportMode',
    'HTTPSHealthCheckPortSpecification',
    'HTTPSHealthCheckProxyHeader',
    'HTTPSHealthCheckWeightReportMode',
    'HealthCheckType',
    'HttpRedirectActionRedirectResponseCode',
    'ImageRawDiskContainerType',
    'ImageSourceType',
    'ImageStatus',
    'InstanceGroupManagerFailoverAction',
    'InstanceGroupManagerUpdatePolicyInstanceRedistributionType',
    'InstanceGroupManagerUpdatePolicyMinimalAction',
    'InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedAction',
    'InstanceGroupManagerUpdatePolicyReplacementMethod',
    'InstanceGroupManagerUpdatePolicyType',
    'InstancePostKeyRevocationActionType',
    'InstancePrivateIpv6GoogleAccess',
    'InstancePropertiesPostKeyRevocationActionType',
    'InstancePropertiesPrivateIpv6GoogleAccess',
    'InstanceStatus',
    'InterconnectAttachmentBandwidth',
    'InterconnectAttachmentEdgeAvailabilityDomain',
    'InterconnectAttachmentEncryption',
    'InterconnectAttachmentOperationalStatus',
    'InterconnectAttachmentState',
    'InterconnectAttachmentType',
    'InterconnectInterconnectType',
    'InterconnectLinkType',
    'InterconnectOperationalStatus',
    'InterconnectOutageNotificationIssueType',
    'InterconnectOutageNotificationSource',
    'InterconnectOutageNotificationState',
    'InterconnectState',
    'LogConfigCloudAuditOptionsLogName',
    'LogConfigDataAccessOptionsLogMode',
    'MachineImageStatus',
    'MetadataFilterFilterMatchCriteria',
    'NetworkEndpointGroupNetworkEndpointType',
    'NetworkEndpointGroupType',
    'NetworkInterfaceIpv6AccessType',
    'NetworkInterfaceNicType',
    'NetworkInterfaceStackType',
    'NetworkPeeringState',
    'NetworkPerformanceConfigExternalIpEgressBandwidthTier',
    'NetworkPerformanceConfigTotalEgressBandwidthTier',
    'NetworkRoutingConfigRoutingMode',
    'NodeGroupAutoscalingPolicyMode',
    'NodeGroupMaintenancePolicy',
    'NodeGroupStatus',
    'NodeTemplateCpuOvercommitType',
    'NodeTemplateStatus',
    'OrganizationSecurityPolicyType',
    'PacketMirroringEnable',
    'PacketMirroringFilterDirection',
    'PublicAdvertisedPrefixStatus',
    'PublicDelegatedPrefixPublicDelegatedSubPrefixStatus',
    'PublicDelegatedPrefixStatus',
    'RegionAutoscalerStatus',
    'RegionBackendServiceLoadBalancingScheme',
    'RegionBackendServiceLocalityLbPolicy',
    'RegionBackendServiceProtocol',
    'RegionBackendServiceSessionAffinity',
    'RegionCommitmentCategory',
    'RegionCommitmentPlan',
    'RegionCommitmentStatus',
    'RegionCommitmentType',
    'RegionDiskInterface',
    'RegionDiskStatus',
    'RegionHealthCheckServiceHealthStatusAggregationPolicy',
    'RegionHealthCheckType',
    'RegionInPlaceSnapshotStatus',
    'RegionInstanceGroupManagerFailoverAction',
    'RegionInstantSnapshotStatus',
    'RegionNetworkEndpointGroupNetworkEndpointType',
    'RegionNetworkEndpointGroupType',
    'RegionSslCertificateType',
    'RegionTargetHttpsProxyQuicOverride',
    'ReservationAffinityConsumeReservationType',
    'ReservationStatus',
    'ResourceCommitmentType',
    'ResourcePolicyGroupPlacementPolicyCollocation',
    'ResourcePolicyGroupPlacementPolicyLocality',
    'ResourcePolicyGroupPlacementPolicyScope',
    'ResourcePolicyGroupPlacementPolicyStyle',
    'ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnPolicySwitch',
    'ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete',
    'ResourcePolicyStatus',
    'ResourcePolicyWeeklyCycleDayOfWeekDay',
    'RouteWarningsItemCode',
    'RouterBgpAdvertiseMode',
    'RouterBgpAdvertisedGroupsItem',
    'RouterBgpPeerAdvertiseMode',
    'RouterBgpPeerAdvertisedGroupsItem',
    'RouterBgpPeerBfdMode',
    'RouterBgpPeerBfdPacketMode',
    'RouterBgpPeerBfdSessionInitializationMode',
    'RouterBgpPeerEnable',
    'RouterBgpPeerManagementType',
    'RouterInterfaceManagementType',
    'RouterNatLogConfigFilter',
    'RouterNatNatIpAllocateOption',
    'RouterNatSourceSubnetworkIpRangesToNat',
    'RouterNatSubnetworkToNatSourceIpRangesToNatItem',
    'RuleAction',
    'SSLHealthCheckPortSpecification',
    'SSLHealthCheckProxyHeader',
    'SavedAttachedDiskInterface',
    'SavedAttachedDiskMode',
    'SavedAttachedDiskStorageBytesStatus',
    'SavedAttachedDiskType',
    'SchedulingMaintenanceInterval',
    'SchedulingNodeAffinityOperator',
    'SchedulingOnHostMaintenance',
    'SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibility',
    'SecurityPolicyRuleDirection',
    'SecurityPolicyRuleMatcherVersionedExpr',
    'SecurityPolicyRuleRateLimitOptionsEnforceOnKey',
    'SecurityPolicyType',
    'ServerBindingType',
    'ServerTlsSettingsTlsMode',
    'ServiceAttachmentConnectedEndpointStatus',
    'ServiceAttachmentConnectionPreference',
    'ServiceAttachmentConsumerForwardingRuleStatus',
    'SnapshotStatus',
    'SnapshotStorageBytesStatus',
    'SourceInstancePropertiesPostKeyRevocationActionType',
    'SslCertificateManagedSslCertificateStatus',
    'SslCertificateType',
    'SslPolicyMinTlsVersion',
    'SslPolicyProfile',
    'SslPolicyWarningsItemCode',
    'SubnetworkAggregationInterval',
    'SubnetworkIpv6AccessType',
    'SubnetworkLogConfigAggregationInterval',
    'SubnetworkLogConfigMetadata',
    'SubnetworkMetadata',
    'SubnetworkPrivateIpv6GoogleAccess',
    'SubnetworkPurpose',
    'SubnetworkRole',
    'SubnetworkStackType',
    'SubnetworkState',
    'SubsettingPolicy',
    'TCPHealthCheckPortSpecification',
    'TCPHealthCheckProxyHeader',
    'TargetHttpsProxyQuicOverride',
    'TargetInstanceNatPolicy',
    'TargetPoolSessionAffinity',
    'TargetSslProxyProxyHeader',
    'TargetTcpProxyProxyHeader',
    'TargetVpnGatewayStatus',
    'TlsCertificateContextCertificateSource',
    'TlsValidationContextValidationSource',
    'UpcomingMaintenanceType',
    'VpnTunnelStatus',
    'ZoneInPlaceSnapshotStatus',
    'ZoneInstantSnapshotStatus',
]


class AccessConfigNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD.

    If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier.

    If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    PREMIUM = "PREMIUM"
    SELECT = "SELECT"
    STANDARD = "STANDARD"
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"


class AccessConfigType(str, Enum):
    """
    The type of configuration. The default and only option is ONE_TO_ONE_NAT.
    """
    DIRECT_IPV6 = "DIRECT_IPV6"
    ONE_TO_ONE_NAT = "ONE_TO_ONE_NAT"


class AddressAddressType(str, Enum):
    """
    The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
    """
    DNS_FORWARDING = "DNS_FORWARDING"
    EXTERNAL = "EXTERNAL"
    INTERNAL = "INTERNAL"
    UNSPECIFIED_TYPE = "UNSPECIFIED_TYPE"


class AddressIpVersion(str, Enum):
    """
    The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
    """
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    UNSPECIFIED_VERSION = "UNSPECIFIED_VERSION"


class AddressNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.

    If this field is not specified, it is assumed to be PREMIUM.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    PREMIUM = "PREMIUM"
    SELECT = "SELECT"
    STANDARD = "STANDARD"
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"


class AddressPurpose(str, Enum):
    """
    The purpose of this resource, which can be one of the following values:  
    - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources. 
    - `DNS_RESOLVER` for a DNS resolver address in a subnetwork 
    - `VPC_PEERING` for addresses that are reserved for VPC peer networks. 
    - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT. 
    - `IPSEC_INTERCONNECT` for addresses created from a private IP range that are reserved for a VLAN attachment in an IPsec-encrypted Cloud Interconnect configuration. These addresses are regional resources.
    """
    DNS_RESOLVER = "DNS_RESOLVER"
    GCE_ENDPOINT = "GCE_ENDPOINT"
    IPSEC_INTERCONNECT = "IPSEC_INTERCONNECT"
    NAT_AUTO = "NAT_AUTO"
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    PSC_PRODUCER_NAT_RANGE = "PSC_PRODUCER_NAT_RANGE"
    SHARED_LOADBALANCER_VIP = "SHARED_LOADBALANCER_VIP"
    VPC_PEERING = "VPC_PEERING"


class AddressStatus(str, Enum):
    """
    [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
    """
    IN_USE = "IN_USE"
    RESERVED = "RESERVED"
    RESERVING = "RESERVING"


class AllocationShareSettingsShareType(str, Enum):
    """
    Type of sharing for this shared-reservation
    """
    ORGANIZATION = "ORGANIZATION"
    SHARE_TYPE_UNSPECIFIED = "SHARE_TYPE_UNSPECIFIED"
    SPECIFIC_PROJECTS = "SPECIFIC_PROJECTS"


class AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface(str, Enum):
    """
    Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
    """
    NVDIMM = "NVDIMM"
    NVME = "NVME"
    SCSI = "SCSI"


class AllocationSpecificSKUAllocationReservedInstancePropertiesMaintenanceInterval(str, Enum):
    """
    Specifies whether this VM may be a stable fleet VM. Setting this to "Periodic" designates this VM as a Stable Fleet VM.

    See go/stable-fleet-ug for more details.
    """
    PERIODIC = "PERIODIC"


class AttachedDiskInitializeParamsOnUpdateAction(str, Enum):
    """
    Specifies which action to take on instance update with this disk. Default is to use the existing disk.
    """
    RECREATE_DISK = "RECREATE_DISK"
    RECREATE_DISK_IF_SOURCE_CHANGED = "RECREATE_DISK_IF_SOURCE_CHANGED"
    USE_EXISTING_DISK = "USE_EXISTING_DISK"


class AttachedDiskInterface(str, Enum):
    """
    Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
    """
    NVDIMM = "NVDIMM"
    NVME = "NVME"
    SCSI = "SCSI"


class AttachedDiskMode(str, Enum):
    """
    The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
    """
    READ_ONLY = "READ_ONLY"
    READ_WRITE = "READ_WRITE"


class AttachedDiskSavedState(str, Enum):
    """
    For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this field is set to PRESERVED if the LocalSSD data has been saved to a persistent location by customer request. (see the discard_local_ssd option on Stop/Suspend). Read-only in the api.
    """
    DISK_SAVED_STATE_UNSPECIFIED = "DISK_SAVED_STATE_UNSPECIFIED"
    PRESERVED = "PRESERVED"


class AttachedDiskType(str, Enum):
    """
    Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
    """
    PERSISTENT = "PERSISTENT"
    SCRATCH = "SCRATCH"


class AuditLogConfigLogType(str, Enum):
    """
    The log type that this config enables.
    """
    ADMIN_READ = "ADMIN_READ"
    DATA_READ = "DATA_READ"
    DATA_WRITE = "DATA_WRITE"
    LOG_TYPE_UNSPECIFIED = "LOG_TYPE_UNSPECIFIED"


class AuthorizationLoggingOptionsPermissionType(str, Enum):
    """
    The type of the permission that was checked.
    """
    ADMIN_READ = "ADMIN_READ"
    ADMIN_WRITE = "ADMIN_WRITE"
    DATA_READ = "DATA_READ"
    DATA_WRITE = "DATA_WRITE"
    PERMISSION_TYPE_UNSPECIFIED = "PERMISSION_TYPE_UNSPECIFIED"


class AutoscalerStatus(str, Enum):
    """
    [Output Only] The status of the autoscaler configuration. Current set of possible values:  
    - PENDING: Autoscaler backend hasn't read new/updated configuration. 
    - DELETING: Configuration is being deleted. 
    - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. 
    - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field.  New values might be added in the future.
    """
    ACTIVE = "ACTIVE"
    DELETING = "DELETING"
    ERROR = "ERROR"
    PENDING = "PENDING"


class AutoscalerStatusDetailsType(str, Enum):
    """
    The type of error, warning, or notice returned. Current set of possible values:  
    - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). 
    - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. 
    - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. 
    - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. 
    - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. 
    - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. 
    - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. 
    - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. 
    - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. 
    - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. 
    - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. 
    - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. 
    - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. 
    - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. 
    - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. 
    - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout.  New values might be added in the future. Some of the values might not be available in all API versions.
    """
    ALL_INSTANCES_UNHEALTHY = "ALL_INSTANCES_UNHEALTHY"
    BACKEND_SERVICE_DOES_NOT_EXIST = "BACKEND_SERVICE_DOES_NOT_EXIST"
    CAPPED_AT_MAX_NUM_REPLICAS = "CAPPED_AT_MAX_NUM_REPLICAS"
    CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE = "CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE"
    CUSTOM_METRIC_INVALID = "CUSTOM_METRIC_INVALID"
    MIN_EQUALS_MAX = "MIN_EQUALS_MAX"
    MISSING_CUSTOM_METRIC_DATA_POINTS = "MISSING_CUSTOM_METRIC_DATA_POINTS"
    MISSING_LOAD_BALANCING_DATA_POINTS = "MISSING_LOAD_BALANCING_DATA_POINTS"
    MODE_OFF = "MODE_OFF"
    MODE_ONLY_SCALE_OUT = "MODE_ONLY_SCALE_OUT"
    MODE_ONLY_UP = "MODE_ONLY_UP"
    MORE_THAN_ONE_BACKEND_SERVICE = "MORE_THAN_ONE_BACKEND_SERVICE"
    NOT_ENOUGH_QUOTA_AVAILABLE = "NOT_ENOUGH_QUOTA_AVAILABLE"
    REGION_RESOURCE_STOCKOUT = "REGION_RESOURCE_STOCKOUT"
    SCALING_TARGET_DOES_NOT_EXIST = "SCALING_TARGET_DOES_NOT_EXIST"
    SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX = "SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX"
    SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN = "SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN"
    UNKNOWN = "UNKNOWN"
    UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION = "UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION"
    ZONE_RESOURCE_STOCKOUT = "ZONE_RESOURCE_STOCKOUT"


class AutoscalingPolicyCpuUtilizationPredictiveMethod(str, Enum):
    """
    Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:

    * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
    """
    NONE = "NONE"
    OPTIMIZE_AVAILABILITY = "OPTIMIZE_AVAILABILITY"
    PREDICTIVE_METHOD_UNSPECIFIED = "PREDICTIVE_METHOD_UNSPECIFIED"
    STANDARD = "STANDARD"


class AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType(str, Enum):
    """
    Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
    """
    DELTA_PER_MINUTE = "DELTA_PER_MINUTE"
    DELTA_PER_SECOND = "DELTA_PER_SECOND"
    GAUGE = "GAUGE"


class AutoscalingPolicyMode(str, Enum):
    """
    Defines operating mode for this policy.
    """
    OFF = "OFF"
    ON = "ON"
    ONLY_SCALE_OUT = "ONLY_SCALE_OUT"
    ONLY_UP = "ONLY_UP"


class BackendBalancingMode(str, Enum):
    """
    Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see  Connection balancing mode.
    """
    CONNECTION = "CONNECTION"
    RATE = "RATE"
    UTILIZATION = "UTILIZATION"


class BackendBucketCdnPolicyCacheMode(str, Enum):
    """
    Specifies the cache setting for all responses from this backend. The possible values are:

    USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.

    FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.

    CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    """
    CACHE_ALL_STATIC = "CACHE_ALL_STATIC"
    FORCE_CACHE_ALL = "FORCE_CACHE_ALL"
    INVALID_CACHE_MODE = "INVALID_CACHE_MODE"
    USE_ORIGIN_HEADERS = "USE_ORIGIN_HEADERS"


class BackendServiceCdnPolicyCacheMode(str, Enum):
    """
    Specifies the cache setting for all responses from this backend. The possible values are:

    USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.

    FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.

    CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    """
    CACHE_ALL_STATIC = "CACHE_ALL_STATIC"
    FORCE_CACHE_ALL = "FORCE_CACHE_ALL"
    INVALID_CACHE_MODE = "INVALID_CACHE_MODE"
    USE_ORIGIN_HEADERS = "USE_ORIGIN_HEADERS"


class BackendServiceConnectionTrackingPolicyConnectionPersistenceOnUnhealthyBackends(str, Enum):
    """
    Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL.

    If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP.

    If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy).

    If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default.
    """
    ALWAYS_PERSIST = "ALWAYS_PERSIST"
    DEFAULT_FOR_PROTOCOL = "DEFAULT_FOR_PROTOCOL"
    NEVER_PERSIST = "NEVER_PERSIST"


class BackendServiceConnectionTrackingPolicyTrackingMode(str, Enum):
    """
    Specifies the key used for connection tracking. There are two options:

    PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol.

    PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity.
    """
    INVALID_TRACKING_MODE = "INVALID_TRACKING_MODE"
    PER_CONNECTION = "PER_CONNECTION"
    PER_SESSION = "PER_SESSION"


class BackendServiceLoadBalancingScheme(str, Enum):
    """
    Specifies the load balancer type. Choose EXTERNAL for external HTTP(S), SSL Proxy, TCP Proxy and Network Load Balancing. Choose  INTERNAL for Internal TCP/UDP Load Balancing. Choose  INTERNAL_MANAGED for Internal HTTP(S) Load Balancing.  INTERNAL_SELF_MANAGED for Traffic Director. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
    """
    EXTERNAL = "EXTERNAL"
    EXTERNAL_MANAGED = "EXTERNAL_MANAGED"
    INTERNAL = "INTERNAL"
    INTERNAL_MANAGED = "INTERNAL_MANAGED"
    INTERNAL_SELF_MANAGED = "INTERNAL_SELF_MANAGED"
    INVALID_LOAD_BALANCING_SCHEME = "INVALID_LOAD_BALANCING_SCHEME"


class BackendServiceLocalityLbPolicy(str, Enum):
    """
    The load balancing algorithm used within the scope of the locality. The possible values are:  
    - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. 
    - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. 
    - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. 
    - RANDOM: The load balancer selects a random healthy host. 
    - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. 
    - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 

    This field is applicable to either:  
    - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. 
    - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.  

    If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect.

    Only the default ROUND_ROBIN policy is supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    """
    INVALID_LB_POLICY = "INVALID_LB_POLICY"
    LEAST_REQUEST = "LEAST_REQUEST"
    MAGLEV = "MAGLEV"
    ORIGINAL_DESTINATION = "ORIGINAL_DESTINATION"
    RANDOM = "RANDOM"
    RING_HASH = "RING_HASH"
    ROUND_ROBIN = "ROUND_ROBIN"


class BackendServiceProtocol(str, Enum):
    """
    The protocol this BackendService uses to communicate with backends.

    Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancer or for Traffic Director for more information.

    Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
    """
    ALL = "ALL"
    GRPC = "GRPC"
    HTTP = "HTTP"
    HTTP2 = "HTTP2"
    HTTPS = "HTTPS"
    SSL = "SSL"
    TCP = "TCP"
    UDP = "UDP"


class BackendServiceSessionAffinity(str, Enum):
    """
    Type of session affinity to use. The default is NONE.

    When the loadBalancingScheme is EXTERNAL: * For Network Load Balancing, the possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or  CLIENT_IP_PORT_PROTO. * For all other load balancers that use loadBalancingScheme=EXTERNAL, the possible values are NONE, CLIENT_IP, or GENERATED_COOKIE. * You can use GENERATED_COOKIE if the protocol is HTTP, HTTP2, or HTTPS.

    When the loadBalancingScheme is INTERNAL, possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.

    When the loadBalancingScheme is INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, possible values are NONE, CLIENT_IP, GENERATED_COOKIE, HEADER_FIELD, or HTTP_COOKIE.

    Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    """
    CLIENT_IP = "CLIENT_IP"
    CLIENT_IP_NO_DESTINATION = "CLIENT_IP_NO_DESTINATION"
    CLIENT_IP_PORT_PROTO = "CLIENT_IP_PORT_PROTO"
    CLIENT_IP_PROTO = "CLIENT_IP_PROTO"
    GENERATED_COOKIE = "GENERATED_COOKIE"
    HEADER_FIELD = "HEADER_FIELD"
    HTTP_COOKIE = "HTTP_COOKIE"
    NONE = "NONE"


class CallCredentialsCallCredentialType(str, Enum):
    """
    The type of call credentials to use for GRPC requests to the SDS server. This field can be set to one of the following:  
    - GCE_VM: The local GCE VM service account credentials are used to access the SDS server.
    - FROM_PLUGIN: Custom authenticator credentials are used to access the SDS server.
    """
    FROM_PLUGIN = "FROM_PLUGIN"
    GCE_VM = "GCE_VM"
    INVALID = "INVALID"


class ChannelCredentialsChannelCredentialType(str, Enum):
    """
    The channel credentials to access the SDS server. This field can be set to one of the following: CERTIFICATES: Use TLS certificates to access the SDS server. GCE_VM: Use local GCE VM credentials to access the SDS server.
    """
    CERTIFICATES = "CERTIFICATES"
    GCE_VM = "GCE_VM"
    INVALID = "INVALID"


class ConditionIam(str, Enum):
    """
    Trusted attributes supplied by the IAM system.
    """
    APPROVER = "APPROVER"
    ATTRIBUTION = "ATTRIBUTION"
    AUTHORITY = "AUTHORITY"
    CREDENTIALS_TYPE = "CREDENTIALS_TYPE"
    CREDS_ASSERTION = "CREDS_ASSERTION"
    JUSTIFICATION_TYPE = "JUSTIFICATION_TYPE"
    NO_ATTR = "NO_ATTR"
    SECURITY_REALM = "SECURITY_REALM"


class ConditionOp(str, Enum):
    """
    An operator to apply the subject with.
    """
    DISCHARGED = "DISCHARGED"
    EQUALS = "EQUALS"
    IN_ = "IN"
    NOT_EQUALS = "NOT_EQUALS"
    NOT_IN = "NOT_IN"
    NO_OP = "NO_OP"


class ConditionSys(str, Enum):
    """
    Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
    """
    IP = "IP"
    NAME = "NAME"
    NO_ATTR = "NO_ATTR"
    REGION = "REGION"
    SERVICE = "SERVICE"


class DeprecationStatusState(str, Enum):
    """
    The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
    """
    ACTIVE = "ACTIVE"
    DELETED = "DELETED"
    DEPRECATED = "DEPRECATED"
    OBSOLETE = "OBSOLETE"


class DiskInstantiationConfigInstantiateFrom(str, Enum):
    """
    Specifies whether to include the disk and what image to use. Possible values are:  
    - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. 
    - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. 
    - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. 
    - attach-read-only: to attach a read-only disk. Applicable to read-only disks. 
    - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
    """
    ATTACH_READ_ONLY = "ATTACH_READ_ONLY"
    BLANK = "BLANK"
    CUSTOM_IMAGE = "CUSTOM_IMAGE"
    DEFAULT = "DEFAULT"
    DO_NOT_INCLUDE = "DO_NOT_INCLUDE"
    SOURCE_IMAGE = "SOURCE_IMAGE"
    SOURCE_IMAGE_FAMILY = "SOURCE_IMAGE_FAMILY"


class DiskInterface(str, Enum):
    """
    Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
    """
    NVME = "NVME"
    SCSI = "SCSI"
    UNSPECIFIED = "UNSPECIFIED"


class DiskStatus(str, Enum):
    """
    [Output Only] The status of disk creation.  
    - CREATING: Disk is provisioning. 
    - RESTORING: Source data is being copied into the disk. 
    - FAILED: Disk creation failed. 
    - READY: Disk is ready for use. 
    - DELETING: Disk is deleting.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    FAILED = "FAILED"
    READY = "READY"
    RESTORING = "RESTORING"


class DistributionPolicyTargetShape(str, Enum):
    """
    The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
    """
    ANY = "ANY"
    BALANCED = "BALANCED"
    EVEN = "EVEN"


class ExternalVpnGatewayRedundancyType(str, Enum):
    """
    Indicates the user-supplied redundancy type of this external VPN gateway.
    """
    FOUR_IPS_REDUNDANCY = "FOUR_IPS_REDUNDANCY"
    SINGLE_IP_INTERNALLY_REDUNDANT = "SINGLE_IP_INTERNALLY_REDUNDANT"
    TWO_IPS_REDUNDANCY = "TWO_IPS_REDUNDANCY"


class FileContentBufferFileType(str, Enum):
    """
    The file type of source file.
    """
    BIN = "BIN"
    UNDEFINED = "UNDEFINED"
    X509 = "X509"


class FirewallDirection(str, Enum):
    """
    Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `INGRESS` traffic, you cannot specify the destinationRanges field, and for `EGRESS` traffic, you cannot specify the sourceRanges or sourceTags fields.
    """
    EGRESS = "EGRESS"
    INGRESS = "INGRESS"


class FirewallLogConfigMetadata(str, Enum):
    """
    This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
    """
    EXCLUDE_ALL_METADATA = "EXCLUDE_ALL_METADATA"
    INCLUDE_ALL_METADATA = "INCLUDE_ALL_METADATA"


class FirewallPolicyRuleDirection(str, Enum):
    """
    The direction in which this rule applies.
    """
    EGRESS = "EGRESS"
    INGRESS = "INGRESS"


class FirewallPolicyRuleSecureTagState(str, Enum):
    """
    [Output Only] State of the secure tag, either `EFFECTIVE` or `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted or its network is deleted.
    """
    EFFECTIVE = "EFFECTIVE"
    INEFFECTIVE = "INEFFECTIVE"


class ForwardingRuleIPProtocol(str, Enum):
    """
    The IP protocol to which this rule applies.

    For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP and ICMP.

    The valid IP protocols are different for different load balancing products:  
    - Internal TCP/UDP Load Balancing: The load balancing scheme is INTERNAL, and one of TCP, UDP or ALL is valid. 
    - Traffic Director: The load balancing scheme is INTERNAL_SELF_MANAGED, and only TCP is valid.  
    - Internal HTTP(S) Load Balancing: The load balancing scheme is INTERNAL_MANAGED, and only TCP is valid. 
    - HTTP(S), SSL Proxy, and TCP Proxy Load Balancing: The load balancing scheme is EXTERNAL and only TCP is valid. 
    - Network Load Balancing: The load balancing scheme is EXTERNAL, and one of TCP or UDP is valid.
    """
    AH = "AH"
    ALL = "ALL"
    ESP = "ESP"
    ICMP = "ICMP"
    SCTP = "SCTP"
    TCP = "TCP"
    UDP = "UDP"


class ForwardingRuleIpVersion(str, Enum):
    """
    The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule.
    """
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    UNSPECIFIED_VERSION = "UNSPECIFIED_VERSION"


class ForwardingRuleLoadBalancingScheme(str, Enum):
    """
    Specifies the forwarding rule type.

     
    - EXTERNAL is used for:  
    - Classic Cloud VPN gateways 
    - Protocol forwarding to VMs from an external IP address 
    - HTTP(S), SSL Proxy, TCP Proxy, and Network Load Balancing    
    - INTERNAL is used for:  
    - Protocol forwarding to VMs from an internal IP address 
    - Internal TCP/UDP Load Balancing   
    - INTERNAL_MANAGED is used for:  
    - Internal HTTP(S) Load Balancing   
    - INTERNAL_SELF_MANAGED is used for:  
    - Traffic Director    

    For more information about forwarding rules, refer to Forwarding rule concepts.
    """
    EXTERNAL = "EXTERNAL"
    EXTERNAL_MANAGED = "EXTERNAL_MANAGED"
    INTERNAL = "INTERNAL"
    INTERNAL_MANAGED = "INTERNAL_MANAGED"
    INTERNAL_SELF_MANAGED = "INTERNAL_SELF_MANAGED"
    INVALID = "INVALID"


class ForwardingRuleNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD.

    For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.

    If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    PREMIUM = "PREMIUM"
    SELECT = "SELECT"
    STANDARD = "STANDARD"
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"


class ForwardingRulePscConnectionStatus(str, Enum):
    ACCEPTED = "ACCEPTED"
    CLOSED = "CLOSED"
    PENDING = "PENDING"
    REJECTED = "REJECTED"
    STATUS_UNSPECIFIED = "STATUS_UNSPECIFIED"


class GRPCHealthCheckPortSpecification(str, Enum):
    """
    Specifies how port is selected for health checking, can be one of following values:
    USE_FIXED_PORT: The port number in port is used for health checking.
    USE_NAMED_PORT: The portName is used for health checking.
    USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.


    If not specified, gRPC health check follows behavior specified in port and portName fields.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    USE_NAMED_PORT = "USE_NAMED_PORT"
    USE_SERVING_PORT = "USE_SERVING_PORT"


class GlobalAddressAddressType(str, Enum):
    """
    The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
    """
    DNS_FORWARDING = "DNS_FORWARDING"
    EXTERNAL = "EXTERNAL"
    INTERNAL = "INTERNAL"
    UNSPECIFIED_TYPE = "UNSPECIFIED_TYPE"


class GlobalAddressIpVersion(str, Enum):
    """
    The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
    """
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    UNSPECIFIED_VERSION = "UNSPECIFIED_VERSION"


class GlobalAddressNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.

    If this field is not specified, it is assumed to be PREMIUM.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    PREMIUM = "PREMIUM"
    SELECT = "SELECT"
    STANDARD = "STANDARD"
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"


class GlobalAddressPurpose(str, Enum):
    """
    The purpose of this resource, which can be one of the following values:  
    - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources. 
    - `DNS_RESOLVER` for a DNS resolver address in a subnetwork 
    - `VPC_PEERING` for addresses that are reserved for VPC peer networks. 
    - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT. 
    - `IPSEC_INTERCONNECT` for addresses created from a private IP range that are reserved for a VLAN attachment in an IPsec-encrypted Cloud Interconnect configuration. These addresses are regional resources.
    """
    DNS_RESOLVER = "DNS_RESOLVER"
    GCE_ENDPOINT = "GCE_ENDPOINT"
    IPSEC_INTERCONNECT = "IPSEC_INTERCONNECT"
    NAT_AUTO = "NAT_AUTO"
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    PSC_PRODUCER_NAT_RANGE = "PSC_PRODUCER_NAT_RANGE"
    SHARED_LOADBALANCER_VIP = "SHARED_LOADBALANCER_VIP"
    VPC_PEERING = "VPC_PEERING"


class GlobalAddressStatus(str, Enum):
    """
    [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
    """
    IN_USE = "IN_USE"
    RESERVED = "RESERVED"
    RESERVING = "RESERVING"


class GlobalForwardingRuleIPProtocol(str, Enum):
    """
    The IP protocol to which this rule applies.

    For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP and ICMP.

    The valid IP protocols are different for different load balancing products:  
    - Internal TCP/UDP Load Balancing: The load balancing scheme is INTERNAL, and one of TCP, UDP or ALL is valid. 
    - Traffic Director: The load balancing scheme is INTERNAL_SELF_MANAGED, and only TCP is valid.  
    - Internal HTTP(S) Load Balancing: The load balancing scheme is INTERNAL_MANAGED, and only TCP is valid. 
    - HTTP(S), SSL Proxy, and TCP Proxy Load Balancing: The load balancing scheme is EXTERNAL and only TCP is valid. 
    - Network Load Balancing: The load balancing scheme is EXTERNAL, and one of TCP or UDP is valid.
    """
    AH = "AH"
    ALL = "ALL"
    ESP = "ESP"
    ICMP = "ICMP"
    SCTP = "SCTP"
    TCP = "TCP"
    UDP = "UDP"


class GlobalForwardingRuleIpVersion(str, Enum):
    """
    The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule.
    """
    IPV4 = "IPV4"
    IPV6 = "IPV6"
    UNSPECIFIED_VERSION = "UNSPECIFIED_VERSION"


class GlobalForwardingRuleLoadBalancingScheme(str, Enum):
    """
    Specifies the forwarding rule type.

     
    - EXTERNAL is used for:  
    - Classic Cloud VPN gateways 
    - Protocol forwarding to VMs from an external IP address 
    - HTTP(S), SSL Proxy, TCP Proxy, and Network Load Balancing    
    - INTERNAL is used for:  
    - Protocol forwarding to VMs from an internal IP address 
    - Internal TCP/UDP Load Balancing   
    - INTERNAL_MANAGED is used for:  
    - Internal HTTP(S) Load Balancing   
    - INTERNAL_SELF_MANAGED is used for:  
    - Traffic Director    

    For more information about forwarding rules, refer to Forwarding rule concepts.
    """
    EXTERNAL = "EXTERNAL"
    EXTERNAL_MANAGED = "EXTERNAL_MANAGED"
    INTERNAL = "INTERNAL"
    INTERNAL_MANAGED = "INTERNAL_MANAGED"
    INTERNAL_SELF_MANAGED = "INTERNAL_SELF_MANAGED"
    INVALID = "INVALID"


class GlobalForwardingRuleNetworkTier(str, Enum):
    """
    This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD.

    For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.

    If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
    """
    FIXED_STANDARD = "FIXED_STANDARD"
    PREMIUM = "PREMIUM"
    SELECT = "SELECT"
    STANDARD = "STANDARD"
    STANDARD_OVERRIDES_FIXED_STANDARD = "STANDARD_OVERRIDES_FIXED_STANDARD"


class GlobalForwardingRulePscConnectionStatus(str, Enum):
    ACCEPTED = "ACCEPTED"
    CLOSED = "CLOSED"
    PENDING = "PENDING"
    REJECTED = "REJECTED"
    STATUS_UNSPECIFIED = "STATUS_UNSPECIFIED"


class GlobalNetworkEndpointGroupNetworkEndpointType(str, Enum):
    """
    Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, or SERVERLESS.
    """
    GCE_VM_IP = "GCE_VM_IP"
    GCE_VM_IP_PORT = "GCE_VM_IP_PORT"
    GCE_VM_PRIMARY_IP = "GCE_VM_PRIMARY_IP"
    INTERNET_FQDN_PORT = "INTERNET_FQDN_PORT"
    INTERNET_IP_PORT = "INTERNET_IP_PORT"
    NON_GCP_PRIVATE_IP_PORT = "NON_GCP_PRIVATE_IP_PORT"
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    SERVERLESS = "SERVERLESS"


class GlobalNetworkEndpointGroupType(str, Enum):
    """
    Specify the type of this network endpoint group. Only LOAD_BALANCING is valid for now.
    """
    LOAD_BALANCING = "LOAD_BALANCING"


class GlobalPublicDelegatedPrefixStatus(str, Enum):
    """
    [Output Only] The status of the public delegated prefix.
    """
    ANNOUNCED = "ANNOUNCED"
    DELETING = "DELETING"
    INITIALIZING = "INITIALIZING"


class GuestOsFeatureType(str, Enum):
    """
    The ID of a supported feature. Read  Enabling guest operating system features to see a list of available options.
    """
    BARE_METAL_LINUX_COMPATIBLE = "BARE_METAL_LINUX_COMPATIBLE"
    FEATURE_TYPE_UNSPECIFIED = "FEATURE_TYPE_UNSPECIFIED"
    GVNIC = "GVNIC"
    MULTI_IP_SUBNET = "MULTI_IP_SUBNET"
    SECURE_BOOT = "SECURE_BOOT"
    SEV_CAPABLE = "SEV_CAPABLE"
    UEFI_COMPATIBLE = "UEFI_COMPATIBLE"
    VIRTIO_SCSI_MULTIQUEUE = "VIRTIO_SCSI_MULTIQUEUE"
    WINDOWS = "WINDOWS"


class HTTP2HealthCheckPortSpecification(str, Enum):
    """
    Specifies how port is selected for health checking, can be one of following values:
    USE_FIXED_PORT: The port number in port is used for health checking.
    USE_NAMED_PORT: The portName is used for health checking.
    USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.


    If not specified, HTTP2 health check follows behavior specified in port and portName fields.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    USE_NAMED_PORT = "USE_NAMED_PORT"
    USE_SERVING_PORT = "USE_SERVING_PORT"


class HTTP2HealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class HTTP2HealthCheckWeightReportMode(str, Enum):
    """
    Weight report mode. used for weighted Load Balancing.
    """
    DISABLE = "DISABLE"
    DRY_RUN = "DRY_RUN"
    ENABLE = "ENABLE"


class HTTPHealthCheckPortSpecification(str, Enum):
    """
    Specifies how port is selected for health checking, can be one of following values:
    USE_FIXED_PORT: The port number in port is used for health checking.
    USE_NAMED_PORT: The portName is used for health checking.
    USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.


    If not specified, HTTP health check follows behavior specified in port and portName fields.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    USE_NAMED_PORT = "USE_NAMED_PORT"
    USE_SERVING_PORT = "USE_SERVING_PORT"


class HTTPHealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class HTTPHealthCheckWeightReportMode(str, Enum):
    """
    Weight report mode. used for weighted Load Balancing.
    """
    DISABLE = "DISABLE"
    DRY_RUN = "DRY_RUN"
    ENABLE = "ENABLE"


class HTTPSHealthCheckPortSpecification(str, Enum):
    """
    Specifies how port is selected for health checking, can be one of following values:
    USE_FIXED_PORT: The port number in port is used for health checking.
    USE_NAMED_PORT: The portName is used for health checking.
    USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.


    If not specified, HTTPS health check follows behavior specified in port and portName fields.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    USE_NAMED_PORT = "USE_NAMED_PORT"
    USE_SERVING_PORT = "USE_SERVING_PORT"


class HTTPSHealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class HTTPSHealthCheckWeightReportMode(str, Enum):
    """
    Weight report mode. used for weighted Load Balancing.
    """
    DISABLE = "DISABLE"
    DRY_RUN = "DRY_RUN"
    ENABLE = "ENABLE"


class HealthCheckType(str, Enum):
    """
    Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS or HTTP2. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field.
    """
    GRPC = "GRPC"
    HTTP = "HTTP"
    HTTP2 = "HTTP2"
    HTTPS = "HTTPS"
    INVALID = "INVALID"
    SSL = "SSL"
    TCP = "TCP"
    UDP = "UDP"


class HttpRedirectActionRedirectResponseCode(str, Enum):
    """
    The HTTP Status code to use for this RedirectAction.
    Supported values are:  
    - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. 
    - FOUND, which corresponds to 302. 
    - SEE_OTHER which corresponds to 303. 
    - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. 
    - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
    """
    FOUND = "FOUND"
    MOVED_PERMANENTLY_DEFAULT = "MOVED_PERMANENTLY_DEFAULT"
    PERMANENT_REDIRECT = "PERMANENT_REDIRECT"
    SEE_OTHER = "SEE_OTHER"
    TEMPORARY_REDIRECT = "TEMPORARY_REDIRECT"


class ImageRawDiskContainerType(str, Enum):
    """
    The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
    """
    TAR = "TAR"


class ImageSourceType(str, Enum):
    """
    The type of the image used to create this disk. The default and only value is RAW
    """
    RAW = "RAW"


class ImageStatus(str, Enum):
    """
    [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY.
    """
    DELETING = "DELETING"
    FAILED = "FAILED"
    PENDING = "PENDING"
    READY = "READY"


class InstanceGroupManagerFailoverAction(str, Enum):
    """
    The action to perform in case of zone failure. Only one value is supported, NO_FAILOVER. The default is NO_FAILOVER.
    """
    NO_FAILOVER = "NO_FAILOVER"
    UNKNOWN = "UNKNOWN"


class InstanceGroupManagerUpdatePolicyInstanceRedistributionType(str, Enum):
    """
    The  instance redistribution policy for regional managed instance groups. Valid values are:  
    - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. 
    - NONE: For non-autoscaled groups, proactive redistribution is disabled.
    """
    NONE = "NONE"
    PROACTIVE = "PROACTIVE"


class InstanceGroupManagerUpdatePolicyMinimalAction(str, Enum):
    """
    Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
    """
    NONE = "NONE"
    REFRESH = "REFRESH"
    REPLACE = "REPLACE"
    RESTART = "RESTART"


class InstanceGroupManagerUpdatePolicyMostDisruptiveAllowedAction(str, Enum):
    """
    Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.
    """
    NONE = "NONE"
    REFRESH = "REFRESH"
    REPLACE = "REPLACE"
    RESTART = "RESTART"


class InstanceGroupManagerUpdatePolicyReplacementMethod(str, Enum):
    """
    What action should be used to replace instances. See minimal_action.REPLACE
    """
    RECREATE = "RECREATE"
    SUBSTITUTE = "SUBSTITUTE"


class InstanceGroupManagerUpdatePolicyType(str, Enum):
    """
    The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
    """
    OPPORTUNISTIC = "OPPORTUNISTIC"
    PROACTIVE = "PROACTIVE"


class InstancePostKeyRevocationActionType(str, Enum):
    """
    PostKeyRevocationActionType of the instance.
    """
    NOOP = "NOOP"
    POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED = "POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
    SHUTDOWN = "SHUTDOWN"


class InstancePrivateIpv6GoogleAccess(str, Enum):
    """
    The private IPv6 google access type for the VM. If not specified, use  INHERIT_FROM_SUBNETWORK as default.
    """
    ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
    ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
    INHERIT_FROM_SUBNETWORK = "INHERIT_FROM_SUBNETWORK"


class InstancePropertiesPostKeyRevocationActionType(str, Enum):
    """
    PostKeyRevocationActionType of the instance.
    """
    NOOP = "NOOP"
    POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED = "POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
    SHUTDOWN = "SHUTDOWN"


class InstancePropertiesPrivateIpv6GoogleAccess(str, Enum):
    """
    The private IPv6 google access type for VMs. If not specified, use  INHERIT_FROM_SUBNETWORK as default.
    """
    ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
    ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
    INHERIT_FROM_SUBNETWORK = "INHERIT_FROM_SUBNETWORK"


class InstanceStatus(str, Enum):
    """
    [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see  Instance life cycle.
    """
    DEPROVISIONING = "DEPROVISIONING"
    PROVISIONING = "PROVISIONING"
    REPAIRING = "REPAIRING"
    RUNNING = "RUNNING"
    STAGING = "STAGING"
    STOPPED = "STOPPED"
    STOPPING = "STOPPING"
    SUSPENDED = "SUSPENDED"
    SUSPENDING = "SUSPENDING"
    TERMINATED = "TERMINATED"


class InterconnectAttachmentBandwidth(str, Enum):
    """
    Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: 
    - BPS_50M: 50 Mbit/s 
    - BPS_100M: 100 Mbit/s 
    - BPS_200M: 200 Mbit/s 
    - BPS_300M: 300 Mbit/s 
    - BPS_400M: 400 Mbit/s 
    - BPS_500M: 500 Mbit/s 
    - BPS_1G: 1 Gbit/s 
    - BPS_2G: 2 Gbit/s 
    - BPS_5G: 5 Gbit/s 
    - BPS_10G: 10 Gbit/s 
    - BPS_20G: 20 Gbit/s 
    - BPS_50G: 50 Gbit/s
    """
    BPS100M = "BPS_100M"
    BPS10G = "BPS_10G"
    BPS1G = "BPS_1G"
    BPS200M = "BPS_200M"
    BPS20G = "BPS_20G"
    BPS2G = "BPS_2G"
    BPS300M = "BPS_300M"
    BPS400M = "BPS_400M"
    BPS500M = "BPS_500M"
    BPS50G = "BPS_50G"
    BPS50M = "BPS_50M"
    BPS5G = "BPS_5G"


class InterconnectAttachmentEdgeAvailabilityDomain(str, Enum):
    """
    Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: 
    - AVAILABILITY_DOMAIN_ANY 
    - AVAILABILITY_DOMAIN_1 
    - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
    """
    AVAILABILITY_DOMAIN1 = "AVAILABILITY_DOMAIN_1"
    AVAILABILITY_DOMAIN2 = "AVAILABILITY_DOMAIN_2"
    AVAILABILITY_DOMAIN_ANY = "AVAILABILITY_DOMAIN_ANY"


class InterconnectAttachmentEncryption(str, Enum):
    """
    Indicates the user-supplied encryption option of this interconnect attachment: 
    - NONE is the default value, which means that the attachment carries unencrypted traffic. VMs can send traffic to, or receive traffic from, this type of attachment. 
    - IPSEC indicates that the attachment carries only traffic encrypted by an IPsec device such as an HA VPN gateway. VMs cannot directly send traffic to, or receive traffic from, such an attachment. To use IPsec-encrypted Cloud Interconnect, create the attachment using this option. 
    Not currently available in all Interconnect locations.
    """
    IPSEC = "IPSEC"
    NONE = "NONE"


class InterconnectAttachmentOperationalStatus(str, Enum):
    """
    [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: 
    - OS_ACTIVE: The attachment has been turned up and is ready to use. 
    - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
    """
    OS_ACTIVE = "OS_ACTIVE"
    OS_UNPROVISIONED = "OS_UNPROVISIONED"


class InterconnectAttachmentState(str, Enum):
    """
    [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: 
    - ACTIVE: The attachment has been turned up and is ready to use. 
    - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. 
    - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. 
    - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. 
    - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. 
    - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted.
    """
    ACTIVE = "ACTIVE"
    DEFUNCT = "DEFUNCT"
    PARTNER_REQUEST_RECEIVED = "PARTNER_REQUEST_RECEIVED"
    PENDING_CUSTOMER = "PENDING_CUSTOMER"
    PENDING_PARTNER = "PENDING_PARTNER"
    STATE_UNSPECIFIED = "STATE_UNSPECIFIED"
    UNPROVISIONED = "UNPROVISIONED"


class InterconnectAttachmentType(str, Enum):
    """
    The type of interconnect attachment this is, which can take one of the following values: 
    - DEDICATED: an attachment to a Dedicated Interconnect. 
    - PARTNER: an attachment to a Partner Interconnect, created by the customer. 
    - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner.
    """
    DEDICATED = "DEDICATED"
    PARTNER = "PARTNER"
    PARTNER_PROVIDER = "PARTNER_PROVIDER"


class InterconnectInterconnectType(str, Enum):
    """
    Type of interconnect, which can take one of the following values: 
    - PARTNER: A partner-managed interconnection shared between customers though a partner. 
    - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
    """
    DEDICATED = "DEDICATED"
    IT_PRIVATE = "IT_PRIVATE"
    PARTNER = "PARTNER"


class InterconnectLinkType(str, Enum):
    """
    Type of link requested, which can take one of the following values: 
    - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics 
    - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
    """
    LINK_TYPE_ETHERNET100G_LR = "LINK_TYPE_ETHERNET_100G_LR"
    LINK_TYPE_ETHERNET10G_LR = "LINK_TYPE_ETHERNET_10G_LR"


class InterconnectOperationalStatus(str, Enum):
    """
    [Output Only] The current status of this Interconnect's functionality, which can take one of the following values: 
    - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. 
    - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. 
    - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
    """
    OS_ACTIVE = "OS_ACTIVE"
    OS_UNPROVISIONED = "OS_UNPROVISIONED"


class InterconnectOutageNotificationIssueType(str, Enum):
    """
    Form this outage is expected to take, which can take one of the following values: 
    - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. 
    - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values.
    """
    IT_OUTAGE = "IT_OUTAGE"
    IT_PARTIAL_OUTAGE = "IT_PARTIAL_OUTAGE"
    OUTAGE = "OUTAGE"
    PARTIAL_OUTAGE = "PARTIAL_OUTAGE"


class InterconnectOutageNotificationSource(str, Enum):
    """
    The party that generated this notification, which can take the following value: 
    - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
    """
    GOOGLE = "GOOGLE"
    NSRC_GOOGLE = "NSRC_GOOGLE"


class InterconnectOutageNotificationState(str, Enum):
    """
    State of this notification, which can take one of the following values: 
    - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. 
    - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
    """
    ACTIVE = "ACTIVE"
    CANCELLED = "CANCELLED"
    COMPLETED = "COMPLETED"
    NS_ACTIVE = "NS_ACTIVE"
    NS_CANCELED = "NS_CANCELED"


class InterconnectState(str, Enum):
    """
    [Output Only] The current state of Interconnect functionality, which can take one of the following values: 
    - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. 
    - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. 
    - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
    """
    ACTIVE = "ACTIVE"
    UNPROVISIONED = "UNPROVISIONED"


class LogConfigCloudAuditOptionsLogName(str, Enum):
    """
    The log_name to populate in the Cloud Audit Record.
    """
    ADMIN_ACTIVITY = "ADMIN_ACTIVITY"
    DATA_ACCESS = "DATA_ACCESS"
    UNSPECIFIED_LOG_NAME = "UNSPECIFIED_LOG_NAME"


class LogConfigDataAccessOptionsLogMode(str, Enum):
    LOG_FAIL_CLOSED = "LOG_FAIL_CLOSED"
    LOG_MODE_UNSPECIFIED = "LOG_MODE_UNSPECIFIED"


class MachineImageStatus(str, Enum):
    """
    [Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    INVALID = "INVALID"
    READY = "READY"
    UPLOADING = "UPLOADING"


class MetadataFilterFilterMatchCriteria(str, Enum):
    """
    Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match.
    Supported values are:  
    - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. 
    - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
    """
    MATCH_ALL = "MATCH_ALL"
    MATCH_ANY = "MATCH_ANY"
    NOT_SET = "NOT_SET"


class NetworkEndpointGroupNetworkEndpointType(str, Enum):
    """
    Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, or SERVERLESS.
    """
    GCE_VM_IP = "GCE_VM_IP"
    GCE_VM_IP_PORT = "GCE_VM_IP_PORT"
    GCE_VM_PRIMARY_IP = "GCE_VM_PRIMARY_IP"
    INTERNET_FQDN_PORT = "INTERNET_FQDN_PORT"
    INTERNET_IP_PORT = "INTERNET_IP_PORT"
    NON_GCP_PRIVATE_IP_PORT = "NON_GCP_PRIVATE_IP_PORT"
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    SERVERLESS = "SERVERLESS"


class NetworkEndpointGroupType(str, Enum):
    """
    Specify the type of this network endpoint group. Only LOAD_BALANCING is valid for now.
    """
    LOAD_BALANCING = "LOAD_BALANCING"


class NetworkInterfaceIpv6AccessType(str, Enum):
    """
    [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.

    Valid only if stackType is IPV4_IPV6.
    """
    EXTERNAL = "EXTERNAL"
    INTERNAL = "INTERNAL"
    UNSPECIFIED_IPV6_ACCESS_TYPE = "UNSPECIFIED_IPV6_ACCESS_TYPE"


class NetworkInterfaceNicType(str, Enum):
    """
    The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
    """
    GVNIC = "GVNIC"
    UNSPECIFIED_NIC_TYPE = "UNSPECIFIED_NIC_TYPE"
    VIRTIO_NET = "VIRTIO_NET"


class NetworkInterfaceStackType(str, Enum):
    """
    The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.

    This field can be both set at instance creation and update network interface operations.
    """
    IPV4_IPV6 = "IPV4_IPV6"
    IPV4_ONLY = "IPV4_ONLY"
    UNSPECIFIED_STACK_TYPE = "UNSPECIFIED_STACK_TYPE"


class NetworkPeeringState(str, Enum):
    """
    [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
    """
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class NetworkPerformanceConfigExternalIpEgressBandwidthTier(str, Enum):
    DEFAULT = "DEFAULT"
    TIER1 = "TIER_1"


class NetworkPerformanceConfigTotalEgressBandwidthTier(str, Enum):
    DEFAULT = "DEFAULT"
    TIER1 = "TIER_1"


class NetworkRoutingConfigRoutingMode(str, Enum):
    """
    The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
    """
    GLOBAL_ = "GLOBAL"
    REGIONAL = "REGIONAL"


class NodeGroupAutoscalingPolicyMode(str, Enum):
    """
    The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see  Autoscaler modes.
    """
    MODE_UNSPECIFIED = "MODE_UNSPECIFIED"
    OFF = "OFF"
    ON = "ON"
    ONLY_SCALE_OUT = "ONLY_SCALE_OUT"


class NodeGroupMaintenancePolicy(str, Enum):
    """
    Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT. For more information, see  Maintenance policies.
    """
    DEFAULT = "DEFAULT"
    MAINTENANCE_POLICY_UNSPECIFIED = "MAINTENANCE_POLICY_UNSPECIFIED"
    MIGRATE_WITHIN_NODE_GROUP = "MIGRATE_WITHIN_NODE_GROUP"
    RESTART_IN_PLACE = "RESTART_IN_PLACE"


class NodeGroupStatus(str, Enum):
    CREATING = "CREATING"
    DELETING = "DELETING"
    INVALID = "INVALID"
    READY = "READY"


class NodeTemplateCpuOvercommitType(str, Enum):
    """
    CPU overcommit.
    """
    CPU_OVERCOMMIT_TYPE_UNSPECIFIED = "CPU_OVERCOMMIT_TYPE_UNSPECIFIED"
    ENABLED = "ENABLED"
    NONE = "NONE"


class NodeTemplateStatus(str, Enum):
    """
    [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    INVALID = "INVALID"
    READY = "READY"


class OrganizationSecurityPolicyType(str, Enum):
    """
    The type indicates the intended use of the security policy. CLOUD_ARMOR policies apply to backend services. FIREWALL policies apply to organizations.
    """
    CLOUD_ARMOR = "CLOUD_ARMOR"
    CLOUD_ARMOR_EDGE = "CLOUD_ARMOR_EDGE"
    FIREWALL = "FIREWALL"


class PacketMirroringEnable(str, Enum):
    """
    Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network.

    The default is TRUE.
    """
    FALSE = "FALSE"
    TRUE = "TRUE"


class PacketMirroringFilterDirection(str, Enum):
    """
    Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
    """
    BOTH = "BOTH"
    EGRESS = "EGRESS"
    INGRESS = "INGRESS"


class PublicAdvertisedPrefixStatus(str, Enum):
    """
    The status of the public advertised prefix.
    """
    INITIAL = "INITIAL"
    PREFIX_CONFIGURATION_COMPLETE = "PREFIX_CONFIGURATION_COMPLETE"
    PREFIX_CONFIGURATION_IN_PROGRESS = "PREFIX_CONFIGURATION_IN_PROGRESS"
    PREFIX_REMOVAL_IN_PROGRESS = "PREFIX_REMOVAL_IN_PROGRESS"
    PTR_CONFIGURED = "PTR_CONFIGURED"
    REVERSE_DNS_LOOKUP_FAILED = "REVERSE_DNS_LOOKUP_FAILED"
    VALIDATED = "VALIDATED"


class PublicDelegatedPrefixPublicDelegatedSubPrefixStatus(str, Enum):
    """
    [Output Only] The status of the sub public delegated prefix.
    """
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class PublicDelegatedPrefixStatus(str, Enum):
    """
    [Output Only] The status of the public delegated prefix.
    """
    ANNOUNCED = "ANNOUNCED"
    DELETING = "DELETING"
    INITIALIZING = "INITIALIZING"


class RegionAutoscalerStatus(str, Enum):
    """
    [Output Only] The status of the autoscaler configuration. Current set of possible values:  
    - PENDING: Autoscaler backend hasn't read new/updated configuration. 
    - DELETING: Configuration is being deleted. 
    - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. 
    - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field.  New values might be added in the future.
    """
    ACTIVE = "ACTIVE"
    DELETING = "DELETING"
    ERROR = "ERROR"
    PENDING = "PENDING"


class RegionBackendServiceLoadBalancingScheme(str, Enum):
    """
    Specifies the load balancer type. Choose EXTERNAL for external HTTP(S), SSL Proxy, TCP Proxy and Network Load Balancing. Choose  INTERNAL for Internal TCP/UDP Load Balancing. Choose  INTERNAL_MANAGED for Internal HTTP(S) Load Balancing.  INTERNAL_SELF_MANAGED for Traffic Director. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
    """
    EXTERNAL = "EXTERNAL"
    EXTERNAL_MANAGED = "EXTERNAL_MANAGED"
    INTERNAL = "INTERNAL"
    INTERNAL_MANAGED = "INTERNAL_MANAGED"
    INTERNAL_SELF_MANAGED = "INTERNAL_SELF_MANAGED"
    INVALID_LOAD_BALANCING_SCHEME = "INVALID_LOAD_BALANCING_SCHEME"


class RegionBackendServiceLocalityLbPolicy(str, Enum):
    """
    The load balancing algorithm used within the scope of the locality. The possible values are:  
    - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. 
    - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. 
    - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. 
    - RANDOM: The load balancer selects a random healthy host. 
    - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. 
    - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 

    This field is applicable to either:  
    - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. 
    - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.  

    If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect.

    Only the default ROUND_ROBIN policy is supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    """
    INVALID_LB_POLICY = "INVALID_LB_POLICY"
    LEAST_REQUEST = "LEAST_REQUEST"
    MAGLEV = "MAGLEV"
    ORIGINAL_DESTINATION = "ORIGINAL_DESTINATION"
    RANDOM = "RANDOM"
    RING_HASH = "RING_HASH"
    ROUND_ROBIN = "ROUND_ROBIN"


class RegionBackendServiceProtocol(str, Enum):
    """
    The protocol this BackendService uses to communicate with backends.

    Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancer or for Traffic Director for more information.

    Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
    """
    ALL = "ALL"
    GRPC = "GRPC"
    HTTP = "HTTP"
    HTTP2 = "HTTP2"
    HTTPS = "HTTPS"
    SSL = "SSL"
    TCP = "TCP"
    UDP = "UDP"


class RegionBackendServiceSessionAffinity(str, Enum):
    """
    Type of session affinity to use. The default is NONE.

    When the loadBalancingScheme is EXTERNAL: * For Network Load Balancing, the possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or  CLIENT_IP_PORT_PROTO. * For all other load balancers that use loadBalancingScheme=EXTERNAL, the possible values are NONE, CLIENT_IP, or GENERATED_COOKIE. * You can use GENERATED_COOKIE if the protocol is HTTP, HTTP2, or HTTPS.

    When the loadBalancingScheme is INTERNAL, possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.

    When the loadBalancingScheme is INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, possible values are NONE, CLIENT_IP, GENERATED_COOKIE, HEADER_FIELD, or HTTP_COOKIE.

    Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    """
    CLIENT_IP = "CLIENT_IP"
    CLIENT_IP_NO_DESTINATION = "CLIENT_IP_NO_DESTINATION"
    CLIENT_IP_PORT_PROTO = "CLIENT_IP_PORT_PROTO"
    CLIENT_IP_PROTO = "CLIENT_IP_PROTO"
    GENERATED_COOKIE = "GENERATED_COOKIE"
    HEADER_FIELD = "HEADER_FIELD"
    HTTP_COOKIE = "HTTP_COOKIE"
    NONE = "NONE"


class RegionCommitmentCategory(str, Enum):
    """
    The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
    """
    CATEGORY_UNSPECIFIED = "CATEGORY_UNSPECIFIED"
    LICENSE = "LICENSE"
    MACHINE = "MACHINE"


class RegionCommitmentPlan(str, Enum):
    """
    The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
    """
    INVALID = "INVALID"
    THIRTY_SIX_MONTH = "THIRTY_SIX_MONTH"
    TWELVE_MONTH = "TWELVE_MONTH"


class RegionCommitmentStatus(str, Enum):
    """
    [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED.
    """
    ACTIVE = "ACTIVE"
    CREATING = "CREATING"
    EXPIRED = "EXPIRED"
    NOT_YET_ACTIVE = "NOT_YET_ACTIVE"


class RegionCommitmentType(str, Enum):
    """
    The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
    """
    ACCELERATOR_OPTIMIZED = "ACCELERATOR_OPTIMIZED"
    COMPUTE_OPTIMIZED = "COMPUTE_OPTIMIZED"
    COMPUTE_OPTIMIZED_C2D = "COMPUTE_OPTIMIZED_C2D"
    GENERAL_PURPOSE = "GENERAL_PURPOSE"
    GENERAL_PURPOSE_E2 = "GENERAL_PURPOSE_E2"
    GENERAL_PURPOSE_N2 = "GENERAL_PURPOSE_N2"
    GENERAL_PURPOSE_N2D = "GENERAL_PURPOSE_N2D"
    MEMORY_OPTIMIZED = "MEMORY_OPTIMIZED"
    MEMORY_OPTIMIZED_REGIONAL_EXTENSION = "MEMORY_OPTIMIZED_REGIONAL_EXTENSION"
    TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED"


class RegionDiskInterface(str, Enum):
    """
    Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
    """
    NVME = "NVME"
    SCSI = "SCSI"
    UNSPECIFIED = "UNSPECIFIED"


class RegionDiskStatus(str, Enum):
    """
    [Output Only] The status of disk creation.  
    - CREATING: Disk is provisioning. 
    - RESTORING: Source data is being copied into the disk. 
    - FAILED: Disk creation failed. 
    - READY: Disk is ready for use. 
    - DELETING: Disk is deleting.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    FAILED = "FAILED"
    READY = "READY"
    RESTORING = "RESTORING"


class RegionHealthCheckServiceHealthStatusAggregationPolicy(str, Enum):
    """
    Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified.  
    - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. 
    - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
    """
    AND_ = "AND"
    NO_AGGREGATION = "NO_AGGREGATION"


class RegionHealthCheckType(str, Enum):
    """
    Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS or HTTP2. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field.
    """
    GRPC = "GRPC"
    HTTP = "HTTP"
    HTTP2 = "HTTP2"
    HTTPS = "HTTPS"
    INVALID = "INVALID"
    SSL = "SSL"
    TCP = "TCP"
    UDP = "UDP"


class RegionInPlaceSnapshotStatus(str, Enum):
    """
    [Output Only] The status of the inPlaceSnapshot. This can be CREATING, DELETING, FAILED, or READY.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    FAILED = "FAILED"
    READY = "READY"


class RegionInstanceGroupManagerFailoverAction(str, Enum):
    """
    The action to perform in case of zone failure. Only one value is supported, NO_FAILOVER. The default is NO_FAILOVER.
    """
    NO_FAILOVER = "NO_FAILOVER"
    UNKNOWN = "UNKNOWN"


class RegionInstantSnapshotStatus(str, Enum):
    """
    [Output Only] The status of the instantSnapshot. This can be CREATING, DELETING, FAILED, or READY.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    FAILED = "FAILED"
    READY = "READY"


class RegionNetworkEndpointGroupNetworkEndpointType(str, Enum):
    """
    Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, or SERVERLESS.
    """
    GCE_VM_IP = "GCE_VM_IP"
    GCE_VM_IP_PORT = "GCE_VM_IP_PORT"
    GCE_VM_PRIMARY_IP = "GCE_VM_PRIMARY_IP"
    INTERNET_FQDN_PORT = "INTERNET_FQDN_PORT"
    INTERNET_IP_PORT = "INTERNET_IP_PORT"
    NON_GCP_PRIVATE_IP_PORT = "NON_GCP_PRIVATE_IP_PORT"
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"
    SERVERLESS = "SERVERLESS"


class RegionNetworkEndpointGroupType(str, Enum):
    """
    Specify the type of this network endpoint group. Only LOAD_BALANCING is valid for now.
    """
    LOAD_BALANCING = "LOAD_BALANCING"


class RegionSslCertificateType(str, Enum):
    """
    (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
    """
    MANAGED = "MANAGED"
    SELF_MANAGED = "SELF_MANAGED"
    TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED"


class RegionTargetHttpsProxyQuicOverride(str, Enum):
    """
    Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE.  
    - When quic-override is set to NONE, Google manages whether QUIC is used. 
    - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. 
    - When quic-override is set to DISABLE, the load balancer doesn't use QUIC. 
    - If the quic-override flag is not specified, NONE is implied.
    """
    DISABLE = "DISABLE"
    ENABLE = "ENABLE"
    NONE = "NONE"


class ReservationAffinityConsumeReservationType(str, Enum):
    """
    Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See  Consuming reserved instances for examples.
    """
    ANY_RESERVATION = "ANY_RESERVATION"
    NO_RESERVATION = "NO_RESERVATION"
    SPECIFIC_RESERVATION = "SPECIFIC_RESERVATION"
    SPECIFIC_THEN_ANY_RESERVATION = "SPECIFIC_THEN_ANY_RESERVATION"
    UNSPECIFIED = "UNSPECIFIED"


class ReservationStatus(str, Enum):
    """
    [Output Only] The status of the reservation.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    INVALID = "INVALID"
    READY = "READY"
    UPDATING = "UPDATING"


class ResourceCommitmentType(str, Enum):
    """
    Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
    """
    ACCELERATOR = "ACCELERATOR"
    LOCAL_SSD = "LOCAL_SSD"
    MEMORY = "MEMORY"
    UNSPECIFIED = "UNSPECIFIED"
    VCPU = "VCPU"


class ResourcePolicyGroupPlacementPolicyCollocation(str, Enum):
    """
    Specifies network collocation
    """
    CLUSTERED = "CLUSTERED"
    COLLOCATED = "COLLOCATED"
    UNSPECIFIED_COLLOCATION = "UNSPECIFIED_COLLOCATION"


class ResourcePolicyGroupPlacementPolicyLocality(str, Enum):
    """
    Specifies network locality
    """
    BEST_EFFORT = "BEST_EFFORT"
    STRICT = "STRICT"
    UNSPECIFIED_LOCALITY = "UNSPECIFIED_LOCALITY"


class ResourcePolicyGroupPlacementPolicyScope(str, Enum):
    """
    Scope specifies the availability domain to which the VMs should be spread.
    """
    HOST = "HOST"
    UNSPECIFIED_SCOPE = "UNSPECIFIED_SCOPE"


class ResourcePolicyGroupPlacementPolicyStyle(str, Enum):
    """
    Specifies instances to hosts placement relationship
    """
    COMPACT = "COMPACT"
    FULLY_SPREAD = "FULLY_SPREAD"
    UNSPECIFIED_PLACEMENT_TYPE = "UNSPECIFIED_PLACEMENT_TYPE"


class ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnPolicySwitch(str, Enum):
    """
    TODO(b/165626794): Remove this field Specifies the behavior to apply to existing, scheduled snapshots snapshots if the policy is changed.
    """
    DO_NOT_RETROACTIVELY_APPLY = "DO_NOT_RETROACTIVELY_APPLY"
    RETROACTIVELY_APPLY = "RETROACTIVELY_APPLY"
    UNSPECIFIED_ON_POLICY_SWITCH = "UNSPECIFIED_ON_POLICY_SWITCH"


class ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete(str, Enum):
    """
    Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
    """
    APPLY_RETENTION_POLICY = "APPLY_RETENTION_POLICY"
    KEEP_AUTO_SNAPSHOTS = "KEEP_AUTO_SNAPSHOTS"
    UNSPECIFIED_ON_SOURCE_DISK_DELETE = "UNSPECIFIED_ON_SOURCE_DISK_DELETE"


class ResourcePolicyStatus(str, Enum):
    """
    [Output Only] The status of resource policy creation.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    EXPIRED = "EXPIRED"
    INVALID = "INVALID"
    READY = "READY"


class ResourcePolicyWeeklyCycleDayOfWeekDay(str, Enum):
    """
    Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    """
    FRIDAY = "FRIDAY"
    INVALID = "INVALID"
    MONDAY = "MONDAY"
    SATURDAY = "SATURDAY"
    SUNDAY = "SUNDAY"
    THURSDAY = "THURSDAY"
    TUESDAY = "TUESDAY"
    WEDNESDAY = "WEDNESDAY"


class RouteWarningsItemCode(str, Enum):
    """
    [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    """
    CLEANUP_FAILED = "CLEANUP_FAILED"
    DEPRECATED_RESOURCE_USED = "DEPRECATED_RESOURCE_USED"
    DEPRECATED_TYPE_USED = "DEPRECATED_TYPE_USED"
    DISK_SIZE_LARGER_THAN_IMAGE_SIZE = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    EXPERIMENTAL_TYPE_USED = "EXPERIMENTAL_TYPE_USED"
    EXTERNAL_API_WARNING = "EXTERNAL_API_WARNING"
    FIELD_VALUE_OVERRIDEN = "FIELD_VALUE_OVERRIDEN"
    INJECTED_KERNELS_DEPRECATED = "INJECTED_KERNELS_DEPRECATED"
    LARGE_DEPLOYMENT_WARNING = "LARGE_DEPLOYMENT_WARNING"
    MISSING_TYPE_DEPENDENCY = "MISSING_TYPE_DEPENDENCY"
    NEXT_HOP_ADDRESS_NOT_ASSIGNED = "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    NEXT_HOP_CANNOT_IP_FORWARD = "NEXT_HOP_CANNOT_IP_FORWARD"
    NEXT_HOP_INSTANCE_NOT_FOUND = "NEXT_HOP_INSTANCE_NOT_FOUND"
    NEXT_HOP_INSTANCE_NOT_ON_NETWORK = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    NEXT_HOP_NOT_RUNNING = "NEXT_HOP_NOT_RUNNING"
    NOT_CRITICAL_ERROR = "NOT_CRITICAL_ERROR"
    NO_RESULTS_ON_PAGE = "NO_RESULTS_ON_PAGE"
    PARTIAL_SUCCESS = "PARTIAL_SUCCESS"
    REQUIRED_TOS_AGREEMENT = "REQUIRED_TOS_AGREEMENT"
    RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    RESOURCE_NOT_DELETED = "RESOURCE_NOT_DELETED"
    SCHEMA_VALIDATION_IGNORED = "SCHEMA_VALIDATION_IGNORED"
    SINGLE_INSTANCE_PROPERTY_TEMPLATE = "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    UNDECLARED_PROPERTIES = "UNDECLARED_PROPERTIES"
    UNREACHABLE = "UNREACHABLE"


class RouterBgpAdvertiseMode(str, Enum):
    """
    User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
    """
    CUSTOM = "CUSTOM"
    DEFAULT = "DEFAULT"


class RouterBgpAdvertisedGroupsItem(str, Enum):
    ALL_PEER_VPC_SUBNETS = "ALL_PEER_VPC_SUBNETS"
    ALL_SUBNETS = "ALL_SUBNETS"
    ALL_VPC_SUBNETS = "ALL_VPC_SUBNETS"


class RouterBgpPeerAdvertiseMode(str, Enum):
    """
    User-specified flag to indicate which mode to use for advertisement.
    """
    CUSTOM = "CUSTOM"
    DEFAULT = "DEFAULT"


class RouterBgpPeerAdvertisedGroupsItem(str, Enum):
    ALL_PEER_VPC_SUBNETS = "ALL_PEER_VPC_SUBNETS"
    ALL_SUBNETS = "ALL_SUBNETS"
    ALL_VPC_SUBNETS = "ALL_VPC_SUBNETS"


class RouterBgpPeerBfdMode(str, Enum):
    """
    The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE.
    """
    ACTIVE = "ACTIVE"
    DISABLED = "DISABLED"
    PASSIVE = "PASSIVE"


class RouterBgpPeerBfdPacketMode(str, Enum):
    """
    The BFD packet mode for this BGP peer. If set to CONTROL_AND_ECHO, BFD echo mode is enabled for this BGP peer. In this mode, if the peer router also has BFD echo mode enabled, BFD echo packets will be sent to the other router. If the peer router does not have BFD echo mode enabled, only control packets will be sent. If set to CONTROL_ONLY, BFD echo mode is disabled for this BGP peer. If this router and the peer router have a multihop connection, this should be set to CONTROL_ONLY as BFD echo mode is only supported on singlehop connections. The default is CONTROL_AND_ECHO.
    """
    CONTROL_AND_ECHO = "CONTROL_AND_ECHO"
    CONTROL_ONLY = "CONTROL_ONLY"


class RouterBgpPeerBfdSessionInitializationMode(str, Enum):
    """
    The BFD session initialization mode for this BGP peer.
    Not currently available publicly.
    If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE.
    """
    ACTIVE = "ACTIVE"
    DISABLED = "DISABLED"
    PASSIVE = "PASSIVE"


class RouterBgpPeerEnable(str, Enum):
    """
    The status of the BGP peer connection.
    Not currently available publicly.
    If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
    """
    FALSE = "FALSE"
    TRUE = "TRUE"


class RouterBgpPeerManagementType(str, Enum):
    """
    [Output Only] The resource that configures and manages this BGP peer. 
    - MANAGED_BY_USER is the default value and can be managed by you or other users 
    - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.
    """
    MANAGED_BY_ATTACHMENT = "MANAGED_BY_ATTACHMENT"
    MANAGED_BY_USER = "MANAGED_BY_USER"


class RouterInterfaceManagementType(str, Enum):
    """
    [Output Only] The resource that configures and manages this interface. 
    - MANAGED_BY_USER is the default value and can be managed directly by users. 
    - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted.
    """
    MANAGED_BY_ATTACHMENT = "MANAGED_BY_ATTACHMENT"
    MANAGED_BY_USER = "MANAGED_BY_USER"


class RouterNatLogConfigFilter(str, Enum):
    """
    Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: 
    - ERRORS_ONLY: Export logs only for connection failures. 
    - TRANSLATIONS_ONLY: Export logs only for successful connections. 
    - ALL: Export logs for all connections, successful and unsuccessful.
    """
    ALL = "ALL"
    ERRORS_ONLY = "ERRORS_ONLY"
    TRANSLATIONS_ONLY = "TRANSLATIONS_ONLY"


class RouterNatNatIpAllocateOption(str, Enum):
    """
    Specify the NatIpAllocateOption, which can take one of the following values: 
    - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. 
    - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
    """
    AUTO_ONLY = "AUTO_ONLY"
    MANUAL_ONLY = "MANUAL_ONLY"


class RouterNatSourceSubnetworkIpRangesToNat(str, Enum):
    """
    Specify the Nat option, which can take one of the following values: 
    - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. 
    - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. 
    - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
    """
    ALL_SUBNETWORKS_ALL_IP_RANGES = "ALL_SUBNETWORKS_ALL_IP_RANGES"
    ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES = "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES"
    LIST_OF_SUBNETWORKS = "LIST_OF_SUBNETWORKS"


class RouterNatSubnetworkToNatSourceIpRangesToNatItem(str, Enum):
    ALL_IP_RANGES = "ALL_IP_RANGES"
    LIST_OF_SECONDARY_IP_RANGES = "LIST_OF_SECONDARY_IP_RANGES"
    PRIMARY_IP_RANGE = "PRIMARY_IP_RANGE"


class RuleAction(str, Enum):
    """
    Required
    """
    ALLOW = "ALLOW"
    ALLOW_WITH_LOG = "ALLOW_WITH_LOG"
    DENY = "DENY"
    DENY_WITH_LOG = "DENY_WITH_LOG"
    LOG = "LOG"
    NO_ACTION = "NO_ACTION"


class SSLHealthCheckPortSpecification(str, Enum):
    """
    Specifies how port is selected for health checking, can be one of following values:
    USE_FIXED_PORT: The port number in port is used for health checking.
    USE_NAMED_PORT: The portName is used for health checking.
    USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.


    If not specified, SSL health check follows behavior specified in port and portName fields.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    USE_NAMED_PORT = "USE_NAMED_PORT"
    USE_SERVING_PORT = "USE_SERVING_PORT"


class SSLHealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class SavedAttachedDiskInterface(str, Enum):
    """
    Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME.
    """
    NVDIMM = "NVDIMM"
    NVME = "NVME"
    SCSI = "SCSI"


class SavedAttachedDiskMode(str, Enum):
    """
    The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY.
    """
    READ_ONLY = "READ_ONLY"
    READ_WRITE = "READ_WRITE"


class SavedAttachedDiskStorageBytesStatus(str, Enum):
    """
    [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
    """
    UPDATING = "UPDATING"
    UP_TO_DATE = "UP_TO_DATE"


class SavedAttachedDiskType(str, Enum):
    """
    Specifies the type of the attached disk, either SCRATCH or PERSISTENT.
    """
    PERSISTENT = "PERSISTENT"
    SCRATCH = "SCRATCH"


class SchedulingMaintenanceInterval(str, Enum):
    """
    Specifies whether this VM may be a stable fleet VM. Setting this to "Periodic" designates this VM as a Stable Fleet VM.

    See go/stable-fleet-ug for more details.
    """
    PERIODIC = "PERIODIC"


class SchedulingNodeAffinityOperator(str, Enum):
    """
    Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
    """
    IN_ = "IN"
    NOT_IN = "NOT_IN"
    OPERATOR_UNSPECIFIED = "OPERATOR_UNSPECIFIED"


class SchedulingOnHostMaintenance(str, Enum):
    """
    Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
    """
    MIGRATE = "MIGRATE"
    TERMINATE = "TERMINATE"


class SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibility(str, Enum):
    """
    Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
    """
    PREMIUM = "PREMIUM"
    STANDARD = "STANDARD"


class SecurityPolicyRuleDirection(str, Enum):
    """
    The direction in which this rule applies. This field may only be specified when versioned_expr is set to FIREWALL.
    """
    EGRESS = "EGRESS"
    INGRESS = "INGRESS"


class SecurityPolicyRuleMatcherVersionedExpr(str, Enum):
    """
    Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
    """
    FIREWALL = "FIREWALL"
    SRC_IPS_V1 = "SRC_IPS_V1"


class SecurityPolicyRuleRateLimitOptionsEnforceOnKey(str, Enum):
    """
    Determines the key to enforce the threshold_rps limit on. If key is "IP", each IP has this limit enforced separately, whereas "ALL_IPs" means a single limit is applied to all requests matching this rule.
    """
    ALL_IPS = "ALL_IPS"
    IP = "IP"


class SecurityPolicyType(str, Enum):
    """
    The type indicates the intended use of the security policy. CLOUD_ARMOR policies apply to backend services. FIREWALL policies apply to organizations.
    """
    CLOUD_ARMOR = "CLOUD_ARMOR"
    CLOUD_ARMOR_EDGE = "CLOUD_ARMOR_EDGE"
    FIREWALL = "FIREWALL"


class ServerBindingType(str, Enum):
    RESTART_NODE_ON_ANY_SERVER = "RESTART_NODE_ON_ANY_SERVER"
    RESTART_NODE_ON_MINIMAL_SERVERS = "RESTART_NODE_ON_MINIMAL_SERVERS"
    SERVER_BINDING_TYPE_UNSPECIFIED = "SERVER_BINDING_TYPE_UNSPECIFIED"


class ServerTlsSettingsTlsMode(str, Enum):
    """
    Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following:  
    - SIMPLE Secure connections with standard TLS semantics.  
    - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
    """
    INVALID = "INVALID"
    MUTUAL = "MUTUAL"
    SIMPLE = "SIMPLE"


class ServiceAttachmentConnectedEndpointStatus(str, Enum):
    """
    The status of a connected endpoint to this service attachment.
    """
    ACCEPTED = "ACCEPTED"
    CLOSED = "CLOSED"
    PENDING = "PENDING"
    REJECTED = "REJECTED"
    STATUS_UNSPECIFIED = "STATUS_UNSPECIFIED"


class ServiceAttachmentConnectionPreference(str, Enum):
    """
    The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
    """
    ACCEPT_AUTOMATIC = "ACCEPT_AUTOMATIC"
    ACCEPT_MANUAL = "ACCEPT_MANUAL"
    CONNECTION_PREFERENCE_UNSPECIFIED = "CONNECTION_PREFERENCE_UNSPECIFIED"


class ServiceAttachmentConsumerForwardingRuleStatus(str, Enum):
    """
    The status of the forwarding rule.
    """
    ACCEPTED = "ACCEPTED"
    CLOSED = "CLOSED"
    PENDING = "PENDING"
    REJECTED = "REJECTED"
    STATUS_UNSPECIFIED = "STATUS_UNSPECIFIED"


class SnapshotStatus(str, Enum):
    """
    [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    FAILED = "FAILED"
    READY = "READY"
    UPLOADING = "UPLOADING"


class SnapshotStorageBytesStatus(str, Enum):
    """
    [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
    """
    UPDATING = "UPDATING"
    UP_TO_DATE = "UP_TO_DATE"


class SourceInstancePropertiesPostKeyRevocationActionType(str, Enum):
    """
    PostKeyRevocationActionType of the instance.
    """
    NOOP = "NOOP"
    POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED = "POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
    SHUTDOWN = "SHUTDOWN"


class SslCertificateManagedSslCertificateStatus(str, Enum):
    """
    [Output only] Status of the managed certificate resource.
    """
    ACTIVE = "ACTIVE"
    MANAGED_CERTIFICATE_STATUS_UNSPECIFIED = "MANAGED_CERTIFICATE_STATUS_UNSPECIFIED"
    PROVISIONING = "PROVISIONING"
    PROVISIONING_FAILED = "PROVISIONING_FAILED"
    PROVISIONING_FAILED_PERMANENTLY = "PROVISIONING_FAILED_PERMANENTLY"
    RENEWAL_FAILED = "RENEWAL_FAILED"


class SslCertificateType(str, Enum):
    """
    (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
    """
    MANAGED = "MANAGED"
    SELF_MANAGED = "SELF_MANAGED"
    TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED"


class SslPolicyMinTlsVersion(str, Enum):
    """
    The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.
    """
    TLS10 = "TLS_1_0"
    TLS11 = "TLS_1_1"
    TLS12 = "TLS_1_2"


class SslPolicyProfile(str, Enum):
    """
    Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
    """
    COMPATIBLE = "COMPATIBLE"
    CUSTOM = "CUSTOM"
    MODERN = "MODERN"
    RESTRICTED = "RESTRICTED"


class SslPolicyWarningsItemCode(str, Enum):
    """
    [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
    """
    CLEANUP_FAILED = "CLEANUP_FAILED"
    DEPRECATED_RESOURCE_USED = "DEPRECATED_RESOURCE_USED"
    DEPRECATED_TYPE_USED = "DEPRECATED_TYPE_USED"
    DISK_SIZE_LARGER_THAN_IMAGE_SIZE = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE"
    EXPERIMENTAL_TYPE_USED = "EXPERIMENTAL_TYPE_USED"
    EXTERNAL_API_WARNING = "EXTERNAL_API_WARNING"
    FIELD_VALUE_OVERRIDEN = "FIELD_VALUE_OVERRIDEN"
    INJECTED_KERNELS_DEPRECATED = "INJECTED_KERNELS_DEPRECATED"
    LARGE_DEPLOYMENT_WARNING = "LARGE_DEPLOYMENT_WARNING"
    MISSING_TYPE_DEPENDENCY = "MISSING_TYPE_DEPENDENCY"
    NEXT_HOP_ADDRESS_NOT_ASSIGNED = "NEXT_HOP_ADDRESS_NOT_ASSIGNED"
    NEXT_HOP_CANNOT_IP_FORWARD = "NEXT_HOP_CANNOT_IP_FORWARD"
    NEXT_HOP_INSTANCE_NOT_FOUND = "NEXT_HOP_INSTANCE_NOT_FOUND"
    NEXT_HOP_INSTANCE_NOT_ON_NETWORK = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK"
    NEXT_HOP_NOT_RUNNING = "NEXT_HOP_NOT_RUNNING"
    NOT_CRITICAL_ERROR = "NOT_CRITICAL_ERROR"
    NO_RESULTS_ON_PAGE = "NO_RESULTS_ON_PAGE"
    PARTIAL_SUCCESS = "PARTIAL_SUCCESS"
    REQUIRED_TOS_AGREEMENT = "REQUIRED_TOS_AGREEMENT"
    RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING"
    RESOURCE_NOT_DELETED = "RESOURCE_NOT_DELETED"
    SCHEMA_VALIDATION_IGNORED = "SCHEMA_VALIDATION_IGNORED"
    SINGLE_INSTANCE_PROPERTY_TEMPLATE = "SINGLE_INSTANCE_PROPERTY_TEMPLATE"
    UNDECLARED_PROPERTIES = "UNDECLARED_PROPERTIES"
    UNREACHABLE = "UNREACHABLE"


class SubnetworkAggregationInterval(str, Enum):
    """
    Can only be specified if VPC flow logging for this subnetwork is enabled. Sets the aggregation interval for collecting flow logs. Increasing the interval time reduces the amount of generated flow logs for long-lasting connections. Default is an interval of 5 seconds per connection. Valid values: INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN, INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN.
    """
    INTERVAL10_MIN = "INTERVAL_10_MIN"
    INTERVAL15_MIN = "INTERVAL_15_MIN"
    INTERVAL1_MIN = "INTERVAL_1_MIN"
    INTERVAL30_SEC = "INTERVAL_30_SEC"
    INTERVAL5_MIN = "INTERVAL_5_MIN"
    INTERVAL5_SEC = "INTERVAL_5_SEC"


class SubnetworkIpv6AccessType(str, Enum):
    """
    The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet cannot enable direct path.
    """
    EXTERNAL = "EXTERNAL"
    INTERNAL = "INTERNAL"
    UNSPECIFIED_IPV6_ACCESS_TYPE = "UNSPECIFIED_IPV6_ACCESS_TYPE"


class SubnetworkLogConfigAggregationInterval(str, Enum):
    """
    Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
    """
    INTERVAL10_MIN = "INTERVAL_10_MIN"
    INTERVAL15_MIN = "INTERVAL_15_MIN"
    INTERVAL1_MIN = "INTERVAL_1_MIN"
    INTERVAL30_SEC = "INTERVAL_30_SEC"
    INTERVAL5_MIN = "INTERVAL_5_MIN"
    INTERVAL5_SEC = "INTERVAL_5_SEC"


class SubnetworkLogConfigMetadata(str, Enum):
    """
    Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
    """
    CUSTOM_METADATA = "CUSTOM_METADATA"
    EXCLUDE_ALL_METADATA = "EXCLUDE_ALL_METADATA"
    INCLUDE_ALL_METADATA = "INCLUDE_ALL_METADATA"


class SubnetworkMetadata(str, Enum):
    """
    Can only be specified if VPC flow logging for this subnetwork is enabled. Configures whether metadata fields should be added to the reported VPC flow logs. Options are INCLUDE_ALL_METADATA, EXCLUDE_ALL_METADATA, and CUSTOM_METADATA. Default is EXCLUDE_ALL_METADATA.
    """
    EXCLUDE_ALL_METADATA = "EXCLUDE_ALL_METADATA"
    INCLUDE_ALL_METADATA = "INCLUDE_ALL_METADATA"


class SubnetworkPrivateIpv6GoogleAccess(str, Enum):
    """
    The private IPv6 google access type for the VMs in this subnet. This is an expanded field of enablePrivateV6Access. If both fields are set, privateIpv6GoogleAccess will take priority.

    This field can be both set at resource creation time and updated using patch.
    """
    DISABLE_GOOGLE_ACCESS = "DISABLE_GOOGLE_ACCESS"
    ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE = "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
    ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
    ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE_FOR_SERVICE_ACCOUNTS = "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE_FOR_SERVICE_ACCOUNTS"


class SubnetworkPurpose(str, Enum):
    """
    The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
    """
    AGGREGATE = "AGGREGATE"
    CLOUD_EXTENSION = "CLOUD_EXTENSION"
    INTERNAL_HTTPS_LOAD_BALANCER = "INTERNAL_HTTPS_LOAD_BALANCER"
    PRIVATE = "PRIVATE"
    PRIVATE_RFC1918 = "PRIVATE_RFC_1918"
    PRIVATE_SERVICE_CONNECT = "PRIVATE_SERVICE_CONNECT"


class SubnetworkRole(str, Enum):
    """
    The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
    """
    ACTIVE = "ACTIVE"
    BACKUP = "BACKUP"


class SubnetworkStackType(str, Enum):
    """
    The stack type for this subnet to identify whether the IPv6 feature is enabled or not. If not specified IPV4_ONLY will be used.

    This field can be both set at resource creation time and updated using patch.
    """
    IPV4_IPV6 = "IPV4_IPV6"
    IPV4_ONLY = "IPV4_ONLY"
    UNSPECIFIED_STACK_TYPE = "UNSPECIFIED_STACK_TYPE"


class SubnetworkState(str, Enum):
    """
    [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY CREATING: Subnetwork is provisioning DELETING: Subnetwork is being deleted UPDATING: Subnetwork is being updated
    """
    DRAINING = "DRAINING"
    READY = "READY"


class SubsettingPolicy(str, Enum):
    CONSISTENT_HASH_SUBSETTING = "CONSISTENT_HASH_SUBSETTING"
    NONE = "NONE"


class TCPHealthCheckPortSpecification(str, Enum):
    """
    Specifies how port is selected for health checking, can be one of following values:
    USE_FIXED_PORT: The port number in port is used for health checking.
    USE_NAMED_PORT: The portName is used for health checking.
    USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.


    If not specified, TCP health check follows behavior specified in port and portName fields.
    """
    USE_FIXED_PORT = "USE_FIXED_PORT"
    USE_NAMED_PORT = "USE_NAMED_PORT"
    USE_SERVING_PORT = "USE_SERVING_PORT"


class TCPHealthCheckProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class TargetHttpsProxyQuicOverride(str, Enum):
    """
    Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE.  
    - When quic-override is set to NONE, Google manages whether QUIC is used. 
    - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. 
    - When quic-override is set to DISABLE, the load balancer doesn't use QUIC. 
    - If the quic-override flag is not specified, NONE is implied.
    """
    DISABLE = "DISABLE"
    ENABLE = "ENABLE"
    NONE = "NONE"


class TargetInstanceNatPolicy(str, Enum):
    """
    NAT option controlling how IPs are NAT'ed to the instance. Currently only NO_NAT (default value) is supported.
    """
    NO_NAT = "NO_NAT"


class TargetPoolSessionAffinity(str, Enum):
    """
    Session affinity option, must be one of the following values:
    NONE: Connections from the same client IP may go to any instance in the pool.
    CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy.
    CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy.
    """
    CLIENT_IP = "CLIENT_IP"
    CLIENT_IP_NO_DESTINATION = "CLIENT_IP_NO_DESTINATION"
    CLIENT_IP_PORT_PROTO = "CLIENT_IP_PORT_PROTO"
    CLIENT_IP_PROTO = "CLIENT_IP_PROTO"
    GENERATED_COOKIE = "GENERATED_COOKIE"
    HEADER_FIELD = "HEADER_FIELD"
    HTTP_COOKIE = "HTTP_COOKIE"
    NONE = "NONE"


class TargetSslProxyProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class TargetTcpProxyProxyHeader(str, Enum):
    """
    Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    """
    NONE = "NONE"
    PROXY_V1 = "PROXY_V1"


class TargetVpnGatewayStatus(str, Enum):
    """
    [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    FAILED = "FAILED"
    READY = "READY"


class TlsCertificateContextCertificateSource(str, Enum):
    """
    Defines how TLS certificates are obtained.
    """
    INVALID = "INVALID"
    USE_PATH = "USE_PATH"
    USE_SDS = "USE_SDS"


class TlsValidationContextValidationSource(str, Enum):
    """
    Defines how TLS certificates are obtained.
    """
    INVALID = "INVALID"
    USE_PATH = "USE_PATH"
    USE_SDS = "USE_SDS"


class UpcomingMaintenanceType(str, Enum):
    """
    Defines the type of maintenance.
    """
    SCHEDULED = "SCHEDULED"
    UNKNOWN_TYPE = "UNKNOWN_TYPE"
    UNSCHEDULED = "UNSCHEDULED"


class VpnTunnelStatus(str, Enum):
    """
    [Output Only] The status of the VPN tunnel, which can be one of the following: 
    - PROVISIONING: Resource is being allocated for the VPN tunnel. 
    - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. 
    - FIRST_HANDSHAKE: Successful first handshake with the peer VPN. 
    - ESTABLISHED: Secure session is successfully established with the peer VPN. 
    - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS 
    - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). 
    - NEGOTIATION_FAILURE: Handshake failed. 
    - DEPROVISIONING: Resources are being deallocated for the VPN tunnel. 
    - FAILED: Tunnel creation has failed and the tunnel is not ready to be used. 
    - NO_INCOMING_PACKETS: No incoming packets from peer. 
    - REJECTED: Tunnel configuration was rejected, can be result of being denied access. 
    - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. 
    - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. 
    - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT. 
    - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel.
    """
    ALLOCATING_RESOURCES = "ALLOCATING_RESOURCES"
    AUTHORIZATION_ERROR = "AUTHORIZATION_ERROR"
    DEPROVISIONING = "DEPROVISIONING"
    ESTABLISHED = "ESTABLISHED"
    FAILED = "FAILED"
    FIRST_HANDSHAKE = "FIRST_HANDSHAKE"
    NEGOTIATION_FAILURE = "NEGOTIATION_FAILURE"
    NETWORK_ERROR = "NETWORK_ERROR"
    NO_INCOMING_PACKETS = "NO_INCOMING_PACKETS"
    PROVISIONING = "PROVISIONING"
    REJECTED = "REJECTED"
    STOPPED = "STOPPED"
    WAITING_FOR_FULL_CONFIG = "WAITING_FOR_FULL_CONFIG"


class ZoneInPlaceSnapshotStatus(str, Enum):
    """
    [Output Only] The status of the inPlaceSnapshot. This can be CREATING, DELETING, FAILED, or READY.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    FAILED = "FAILED"
    READY = "READY"


class ZoneInstantSnapshotStatus(str, Enum):
    """
    [Output Only] The status of the instantSnapshot. This can be CREATING, DELETING, FAILED, or READY.
    """
    CREATING = "CREATING"
    DELETING = "DELETING"
    FAILED = "FAILED"
    READY = "READY"
