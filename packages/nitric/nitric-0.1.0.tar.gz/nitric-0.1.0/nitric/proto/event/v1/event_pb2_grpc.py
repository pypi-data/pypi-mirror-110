#
# Copyright (c) 2021 Nitric Technologies Pty Ltd.
#
# This file is part of Nitric Python 3 SDK.
# See https://github.com/nitrictech/python-sdk for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from nitric.proto.event.v1 import event_pb2 as event_dot_v1_dot_event__pb2


class EventStub(object):
    """Service for publishing asynchronous event
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/nitric.event.v1.Event/Publish',
                request_serializer=event_dot_v1_dot_event__pb2.EventPublishRequest.SerializeToString,
                response_deserializer=event_dot_v1_dot_event__pb2.EventPublishResponse.FromString,
                )


class EventServicer(object):
    """Service for publishing asynchronous event
    """

    def Publish(self, request, context):
        """Publishes an message to a given topic
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=event_dot_v1_dot_event__pb2.EventPublishRequest.FromString,
                    response_serializer=event_dot_v1_dot_event__pb2.EventPublishResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nitric.event.v1.Event', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Event(object):
    """Service for publishing asynchronous event
    """

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nitric.event.v1.Event/Publish',
            event_dot_v1_dot_event__pb2.EventPublishRequest.SerializeToString,
            event_dot_v1_dot_event__pb2.EventPublishResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TopicStub(object):
    """Service for management of event topics
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/nitric.event.v1.Topic/List',
                request_serializer=event_dot_v1_dot_event__pb2.TopicListRequest.SerializeToString,
                response_deserializer=event_dot_v1_dot_event__pb2.TopicListResponse.FromString,
                )


class TopicServicer(object):
    """Service for management of event topics
    """

    def List(self, request, context):
        """Return a list of existing topics in the provider environment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TopicServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=event_dot_v1_dot_event__pb2.TopicListRequest.FromString,
                    response_serializer=event_dot_v1_dot_event__pb2.TopicListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nitric.event.v1.Topic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Topic(object):
    """Service for management of event topics
    """

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nitric.event.v1.Topic/List',
            event_dot_v1_dot_event__pb2.TopicListRequest.SerializeToString,
            event_dot_v1_dot_event__pb2.TopicListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
