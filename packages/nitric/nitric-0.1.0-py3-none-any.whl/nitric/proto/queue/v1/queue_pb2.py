# -*- coding: utf-8 -*-
#
# Copyright (c) 2021 Nitric Technologies Pty Ltd.
#
# This file is part of Nitric Python 3 SDK.
# See https://github.com/nitrictech/python-sdk for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: queue/v1/queue.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import struct_pb2 as google_dot_protobuf_dot_struct__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='queue/v1/queue.proto',
  package='nitric.queue.v1',
  syntax='proto3',
  serialized_options=b'\n\030io.nitric.proto.queue.v1B\006QueuesP\001Z\014nitric/v1;v1\252\002\025Nitric.Proto.Queue.v1\312\002\025Nitric\\Proto\\Queue\\V1',
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\x14queue/v1/queue.proto\x12\x0fnitric.queue.v1\x1a\x1cgoogle/protobuf/struct.proto\"L\n\x10QueueSendRequest\x12\r\n\x05queue\x18\x01 \x01(\t\x12)\n\x04task\x18\x02 \x01(\x0b\x32\x1b.nitric.queue.v1.NitricTask\"\x13\n\x11QueueSendResponse\"R\n\x15QueueSendBatchRequest\x12\r\n\x05queue\x18\x01 \x01(\t\x12*\n\x05tasks\x18\x02 \x03(\x0b\x32\x1b.nitric.queue.v1.NitricTask\"J\n\x16QueueSendBatchResponse\x12\x30\n\x0b\x66\x61iledTasks\x18\x01 \x03(\x0b\x32\x1b.nitric.queue.v1.FailedTask\"3\n\x13QueueReceiveRequest\x12\r\n\x05queue\x18\x01 \x01(\t\x12\r\n\x05\x64\x65pth\x18\x02 \x01(\x05\"B\n\x14QueueReceiveResponse\x12*\n\x05tasks\x18\x01 \x03(\x0b\x32\x1b.nitric.queue.v1.NitricTask\"7\n\x14QueueCompleteRequest\x12\r\n\x05queue\x18\x01 \x01(\t\x12\x10\n\x08lease_id\x18\x02 \x01(\t\"\x17\n\x15QueueCompleteResponse\"H\n\nFailedTask\x12)\n\x04task\x18\x01 \x01(\x0b\x32\x1b.nitric.queue.v1.NitricTask\x12\x0f\n\x07message\x18\x02 \x01(\t\"j\n\nNitricTask\x12\n\n\x02id\x18\x01 \x01(\t\x12\x10\n\x08lease_id\x18\x02 \x01(\t\x12\x14\n\x0cpayload_type\x18\x03 \x01(\t\x12(\n\x07payload\x18\x04 \x01(\x0b\x32\x17.google.protobuf.Struct2\xe7\x02\n\x05Queue\x12M\n\x04Send\x12!.nitric.queue.v1.QueueSendRequest\x1a\".nitric.queue.v1.QueueSendResponse\x12\\\n\tSendBatch\x12&.nitric.queue.v1.QueueSendBatchRequest\x1a\'.nitric.queue.v1.QueueSendBatchResponse\x12V\n\x07Receive\x12$.nitric.queue.v1.QueueReceiveRequest\x1a%.nitric.queue.v1.QueueReceiveResponse\x12Y\n\x08\x43omplete\x12%.nitric.queue.v1.QueueCompleteRequest\x1a&.nitric.queue.v1.QueueCompleteResponseBb\n\x18io.nitric.proto.queue.v1B\x06QueuesP\x01Z\x0cnitric/v1;v1\xaa\x02\x15Nitric.Proto.Queue.v1\xca\x02\x15Nitric\\Proto\\Queue\\V1b\x06proto3'
  ,
  dependencies=[google_dot_protobuf_dot_struct__pb2.DESCRIPTOR,])




_QUEUESENDREQUEST = _descriptor.Descriptor(
  name='QueueSendRequest',
  full_name='nitric.queue.v1.QueueSendRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='queue', full_name='nitric.queue.v1.QueueSendRequest.queue', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='task', full_name='nitric.queue.v1.QueueSendRequest.task', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=71,
  serialized_end=147,
)


_QUEUESENDRESPONSE = _descriptor.Descriptor(
  name='QueueSendResponse',
  full_name='nitric.queue.v1.QueueSendResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=149,
  serialized_end=168,
)


_QUEUESENDBATCHREQUEST = _descriptor.Descriptor(
  name='QueueSendBatchRequest',
  full_name='nitric.queue.v1.QueueSendBatchRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='queue', full_name='nitric.queue.v1.QueueSendBatchRequest.queue', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='tasks', full_name='nitric.queue.v1.QueueSendBatchRequest.tasks', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=170,
  serialized_end=252,
)


_QUEUESENDBATCHRESPONSE = _descriptor.Descriptor(
  name='QueueSendBatchResponse',
  full_name='nitric.queue.v1.QueueSendBatchResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='failedTasks', full_name='nitric.queue.v1.QueueSendBatchResponse.failedTasks', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=254,
  serialized_end=328,
)


_QUEUERECEIVEREQUEST = _descriptor.Descriptor(
  name='QueueReceiveRequest',
  full_name='nitric.queue.v1.QueueReceiveRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='queue', full_name='nitric.queue.v1.QueueReceiveRequest.queue', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='depth', full_name='nitric.queue.v1.QueueReceiveRequest.depth', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=330,
  serialized_end=381,
)


_QUEUERECEIVERESPONSE = _descriptor.Descriptor(
  name='QueueReceiveResponse',
  full_name='nitric.queue.v1.QueueReceiveResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='tasks', full_name='nitric.queue.v1.QueueReceiveResponse.tasks', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=383,
  serialized_end=449,
)


_QUEUECOMPLETEREQUEST = _descriptor.Descriptor(
  name='QueueCompleteRequest',
  full_name='nitric.queue.v1.QueueCompleteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='queue', full_name='nitric.queue.v1.QueueCompleteRequest.queue', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='lease_id', full_name='nitric.queue.v1.QueueCompleteRequest.lease_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=451,
  serialized_end=506,
)


_QUEUECOMPLETERESPONSE = _descriptor.Descriptor(
  name='QueueCompleteResponse',
  full_name='nitric.queue.v1.QueueCompleteResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=508,
  serialized_end=531,
)


_FAILEDTASK = _descriptor.Descriptor(
  name='FailedTask',
  full_name='nitric.queue.v1.FailedTask',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='task', full_name='nitric.queue.v1.FailedTask.task', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='message', full_name='nitric.queue.v1.FailedTask.message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=533,
  serialized_end=605,
)


_NITRICTASK = _descriptor.Descriptor(
  name='NitricTask',
  full_name='nitric.queue.v1.NitricTask',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='nitric.queue.v1.NitricTask.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='lease_id', full_name='nitric.queue.v1.NitricTask.lease_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='payload_type', full_name='nitric.queue.v1.NitricTask.payload_type', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='payload', full_name='nitric.queue.v1.NitricTask.payload', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=607,
  serialized_end=713,
)

_QUEUESENDREQUEST.fields_by_name['task'].message_type = _NITRICTASK
_QUEUESENDBATCHREQUEST.fields_by_name['tasks'].message_type = _NITRICTASK
_QUEUESENDBATCHRESPONSE.fields_by_name['failedTasks'].message_type = _FAILEDTASK
_QUEUERECEIVERESPONSE.fields_by_name['tasks'].message_type = _NITRICTASK
_FAILEDTASK.fields_by_name['task'].message_type = _NITRICTASK
_NITRICTASK.fields_by_name['payload'].message_type = google_dot_protobuf_dot_struct__pb2._STRUCT
DESCRIPTOR.message_types_by_name['QueueSendRequest'] = _QUEUESENDREQUEST
DESCRIPTOR.message_types_by_name['QueueSendResponse'] = _QUEUESENDRESPONSE
DESCRIPTOR.message_types_by_name['QueueSendBatchRequest'] = _QUEUESENDBATCHREQUEST
DESCRIPTOR.message_types_by_name['QueueSendBatchResponse'] = _QUEUESENDBATCHRESPONSE
DESCRIPTOR.message_types_by_name['QueueReceiveRequest'] = _QUEUERECEIVEREQUEST
DESCRIPTOR.message_types_by_name['QueueReceiveResponse'] = _QUEUERECEIVERESPONSE
DESCRIPTOR.message_types_by_name['QueueCompleteRequest'] = _QUEUECOMPLETEREQUEST
DESCRIPTOR.message_types_by_name['QueueCompleteResponse'] = _QUEUECOMPLETERESPONSE
DESCRIPTOR.message_types_by_name['FailedTask'] = _FAILEDTASK
DESCRIPTOR.message_types_by_name['NitricTask'] = _NITRICTASK
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

QueueSendRequest = _reflection.GeneratedProtocolMessageType('QueueSendRequest', (_message.Message,), {
  'DESCRIPTOR' : _QUEUESENDREQUEST,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.QueueSendRequest)
  })
_sym_db.RegisterMessage(QueueSendRequest)

QueueSendResponse = _reflection.GeneratedProtocolMessageType('QueueSendResponse', (_message.Message,), {
  'DESCRIPTOR' : _QUEUESENDRESPONSE,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.QueueSendResponse)
  })
_sym_db.RegisterMessage(QueueSendResponse)

QueueSendBatchRequest = _reflection.GeneratedProtocolMessageType('QueueSendBatchRequest', (_message.Message,), {
  'DESCRIPTOR' : _QUEUESENDBATCHREQUEST,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.QueueSendBatchRequest)
  })
_sym_db.RegisterMessage(QueueSendBatchRequest)

QueueSendBatchResponse = _reflection.GeneratedProtocolMessageType('QueueSendBatchResponse', (_message.Message,), {
  'DESCRIPTOR' : _QUEUESENDBATCHRESPONSE,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.QueueSendBatchResponse)
  })
_sym_db.RegisterMessage(QueueSendBatchResponse)

QueueReceiveRequest = _reflection.GeneratedProtocolMessageType('QueueReceiveRequest', (_message.Message,), {
  'DESCRIPTOR' : _QUEUERECEIVEREQUEST,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.QueueReceiveRequest)
  })
_sym_db.RegisterMessage(QueueReceiveRequest)

QueueReceiveResponse = _reflection.GeneratedProtocolMessageType('QueueReceiveResponse', (_message.Message,), {
  'DESCRIPTOR' : _QUEUERECEIVERESPONSE,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.QueueReceiveResponse)
  })
_sym_db.RegisterMessage(QueueReceiveResponse)

QueueCompleteRequest = _reflection.GeneratedProtocolMessageType('QueueCompleteRequest', (_message.Message,), {
  'DESCRIPTOR' : _QUEUECOMPLETEREQUEST,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.QueueCompleteRequest)
  })
_sym_db.RegisterMessage(QueueCompleteRequest)

QueueCompleteResponse = _reflection.GeneratedProtocolMessageType('QueueCompleteResponse', (_message.Message,), {
  'DESCRIPTOR' : _QUEUECOMPLETERESPONSE,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.QueueCompleteResponse)
  })
_sym_db.RegisterMessage(QueueCompleteResponse)

FailedTask = _reflection.GeneratedProtocolMessageType('FailedTask', (_message.Message,), {
  'DESCRIPTOR' : _FAILEDTASK,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.FailedTask)
  })
_sym_db.RegisterMessage(FailedTask)

NitricTask = _reflection.GeneratedProtocolMessageType('NitricTask', (_message.Message,), {
  'DESCRIPTOR' : _NITRICTASK,
  '__module__' : 'queue.v1.queue_pb2'
  # @@protoc_insertion_point(class_scope:nitric.queue.v1.NitricTask)
  })
_sym_db.RegisterMessage(NitricTask)


DESCRIPTOR._options = None

_QUEUE = _descriptor.ServiceDescriptor(
  name='Queue',
  full_name='nitric.queue.v1.Queue',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=716,
  serialized_end=1075,
  methods=[
  _descriptor.MethodDescriptor(
    name='Send',
    full_name='nitric.queue.v1.Queue.Send',
    index=0,
    containing_service=None,
    input_type=_QUEUESENDREQUEST,
    output_type=_QUEUESENDRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SendBatch',
    full_name='nitric.queue.v1.Queue.SendBatch',
    index=1,
    containing_service=None,
    input_type=_QUEUESENDBATCHREQUEST,
    output_type=_QUEUESENDBATCHRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='Receive',
    full_name='nitric.queue.v1.Queue.Receive',
    index=2,
    containing_service=None,
    input_type=_QUEUERECEIVEREQUEST,
    output_type=_QUEUERECEIVERESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='Complete',
    full_name='nitric.queue.v1.Queue.Complete',
    index=3,
    containing_service=None,
    input_type=_QUEUECOMPLETEREQUEST,
    output_type=_QUEUECOMPLETERESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_QUEUE)

DESCRIPTOR.services_by_name['Queue'] = _QUEUE

# @@protoc_insertion_point(module_scope)
