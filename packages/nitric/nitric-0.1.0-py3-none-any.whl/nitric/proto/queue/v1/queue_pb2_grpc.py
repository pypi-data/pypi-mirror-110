#
# Copyright (c) 2021 Nitric Technologies Pty Ltd.
#
# This file is part of Nitric Python 3 SDK.
# See https://github.com/nitrictech/python-sdk for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from nitric.proto.queue.v1 import queue_pb2 as queue_dot_v1_dot_queue__pb2


class QueueStub(object):
    """The Nitric Queue Service contract
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send = channel.unary_unary(
                '/nitric.queue.v1.Queue/Send',
                request_serializer=queue_dot_v1_dot_queue__pb2.QueueSendRequest.SerializeToString,
                response_deserializer=queue_dot_v1_dot_queue__pb2.QueueSendResponse.FromString,
                )
        self.SendBatch = channel.unary_unary(
                '/nitric.queue.v1.Queue/SendBatch',
                request_serializer=queue_dot_v1_dot_queue__pb2.QueueSendBatchRequest.SerializeToString,
                response_deserializer=queue_dot_v1_dot_queue__pb2.QueueSendBatchResponse.FromString,
                )
        self.Receive = channel.unary_unary(
                '/nitric.queue.v1.Queue/Receive',
                request_serializer=queue_dot_v1_dot_queue__pb2.QueueReceiveRequest.SerializeToString,
                response_deserializer=queue_dot_v1_dot_queue__pb2.QueueReceiveResponse.FromString,
                )
        self.Complete = channel.unary_unary(
                '/nitric.queue.v1.Queue/Complete',
                request_serializer=queue_dot_v1_dot_queue__pb2.QueueCompleteRequest.SerializeToString,
                response_deserializer=queue_dot_v1_dot_queue__pb2.QueueCompleteResponse.FromString,
                )


class QueueServicer(object):
    """The Nitric Queue Service contract
    """

    def Send(self, request, context):
        """Send a single event to a queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendBatch(self, request, context):
        """Send multiple events to a queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Receive(self, request, context):
        """Receive event(s) off a queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Complete(self, request, context):
        """Complete an event previously popped from a queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueueServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=queue_dot_v1_dot_queue__pb2.QueueSendRequest.FromString,
                    response_serializer=queue_dot_v1_dot_queue__pb2.QueueSendResponse.SerializeToString,
            ),
            'SendBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.SendBatch,
                    request_deserializer=queue_dot_v1_dot_queue__pb2.QueueSendBatchRequest.FromString,
                    response_serializer=queue_dot_v1_dot_queue__pb2.QueueSendBatchResponse.SerializeToString,
            ),
            'Receive': grpc.unary_unary_rpc_method_handler(
                    servicer.Receive,
                    request_deserializer=queue_dot_v1_dot_queue__pb2.QueueReceiveRequest.FromString,
                    response_serializer=queue_dot_v1_dot_queue__pb2.QueueReceiveResponse.SerializeToString,
            ),
            'Complete': grpc.unary_unary_rpc_method_handler(
                    servicer.Complete,
                    request_deserializer=queue_dot_v1_dot_queue__pb2.QueueCompleteRequest.FromString,
                    response_serializer=queue_dot_v1_dot_queue__pb2.QueueCompleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nitric.queue.v1.Queue', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Queue(object):
    """The Nitric Queue Service contract
    """

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nitric.queue.v1.Queue/Send',
            queue_dot_v1_dot_queue__pb2.QueueSendRequest.SerializeToString,
            queue_dot_v1_dot_queue__pb2.QueueSendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nitric.queue.v1.Queue/SendBatch',
            queue_dot_v1_dot_queue__pb2.QueueSendBatchRequest.SerializeToString,
            queue_dot_v1_dot_queue__pb2.QueueSendBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Receive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nitric.queue.v1.Queue/Receive',
            queue_dot_v1_dot_queue__pb2.QueueReceiveRequest.SerializeToString,
            queue_dot_v1_dot_queue__pb2.QueueReceiveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Complete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nitric.queue.v1.Queue/Complete',
            queue_dot_v1_dot_queue__pb2.QueueCompleteRequest.SerializeToString,
            queue_dot_v1_dot_queue__pb2.QueueCompleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
