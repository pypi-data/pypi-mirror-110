#
# Copyright (c) 2021 Nitric Technologies Pty Ltd.
#
# This file is part of Nitric Python 3 SDK.
# See https://github.com/nitrictech/python-sdk for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from nitric.proto.faas.v1 import faas_pb2 as faas_dot_v1_dot_faas__pb2


class FaasStub(object):
    """Service for streaming communication with gRPC FaaS implementations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TriggerStream = channel.stream_stream(
                '/nitric.faas.v1.Faas/TriggerStream',
                request_serializer=faas_dot_v1_dot_faas__pb2.ClientMessage.SerializeToString,
                response_deserializer=faas_dot_v1_dot_faas__pb2.ServerMessage.FromString,
                )


class FaasServicer(object):
    """Service for streaming communication with gRPC FaaS implementations
    """

    def TriggerStream(self, request_iterator, context):
        """Begin streaming triggers/response to/from the membrane
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaasServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TriggerStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TriggerStream,
                    request_deserializer=faas_dot_v1_dot_faas__pb2.ClientMessage.FromString,
                    response_serializer=faas_dot_v1_dot_faas__pb2.ServerMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nitric.faas.v1.Faas', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Faas(object):
    """Service for streaming communication with gRPC FaaS implementations
    """

    @staticmethod
    def TriggerStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/nitric.faas.v1.Faas/TriggerStream',
            faas_dot_v1_dot_faas__pb2.ClientMessage.SerializeToString,
            faas_dot_v1_dot_faas__pb2.ServerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
