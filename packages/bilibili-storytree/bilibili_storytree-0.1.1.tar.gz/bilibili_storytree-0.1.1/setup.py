# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['bilibili_storytree']

package_data = \
{'': ['*']}

install_requires = \
['PyExecJS>=1.5.1,<2.0.0']

setup_kwargs = {
    'name': 'bilibili-storytree',
    'version': '0.1.1',
    'description': 'API to create story graph for interactivate video in bilibili',
    'long_description': '# 安装\n```\npip3 install bilibili-storytree\n```\n\n# 实例\n查看`tests/test_story_graph.py` 其中有多个例子和注释\n\n# 背景知识 \n\n### B 站制作交互视频的步骤：\n\n* 1、上传分批视频\n* 2、提交剧情树\n\n### 故事树 StoryGraph\n\n提交的剧情树结构为\n\n```\ndata = {\n  "graph": {\n    "script": {\n      "nodes": {}, # dict, 节点，包括了 videoNode, gotoNode 这两类\n      "links": {}, # dict, node 之间连线，包括了 flowLink, refLink\n      "hasGoto": True, # bool, 是否包含了跳转模块(B 站故事树 concept) \n      "editorVersion": "1.4.6",\n      "createdTime": round(time.time()*1000), # int, 取现在时间，毫秒\n      "currentThemeId": 0, # int, 默认主题样式\n      "enableVariables": False, # bool, 使用到故事树的高级功能为 True\n      "variables": [] # list[dict], 初始化时有值，但是如果剧情树没有用到高级功能，就没啥用\n    }, # 描述如何绘制剧情树\n    "nodes": {}, # 最终节点\n    "aid": "", # int, 视频 aid\n    "skin_id": 0, # int, 没什么特别需求，就默认样式\n    "regional_vars": [], # list[dict], 使用剧情树高级功能的时候, 会有具体内容\n  }\n}\n```\n### 解释 `data["graph"]["script"]["nodes"]` \n* 参考 [B 站剧情树概念](https://www.bilibili.com/video/BV1n4411F7tm)\n\n* `data["graph"]["script"]["nodes"]` 类型为 `dict`, `key` 是 `n-[10 characters]`, `value` 是\n`dict`, 如下\n\n```\nscript_node_info = {\n  "id": id, # \'n-[10 characters]\'\n  "type": node_type, # videoNode：剧情分支模块, gotoNode：跳转分支模块\n  "data": data, # 节点的内容信息, 其他的参数可以被理解为节点的结构信息\n  "isRoot": isRoot, # 是否是起始节点\n  "input": flowInput or [], # 哪些 flowLink 进了这个节点\n  "output": flowOutput or [], # 哪些 flowLink 出这个节点\n  "refInput": refInput or [], # 哪些 refLink 进了这个节点\n  "refOutput": refOutput or [] # 哪些 refLink 出这个节点\n}\n```\n\n* `script_node_info["data"]` 是 `dict`, 如下\n\n```\ndata = {\n  "type": 0, # 0：没有分支的节点， 1：有分支的节点， 999：非分支节点，直接跳转下一个。 PS, 这个设计有点不美，毕竟节点间的分支关系，更应该是结构性信息，放在内容的地方处理不是很优雅\n  "aid": "",\n  "cid": video["cid"],\n  "name": name or video["title"], # 这个节点的名称\n  "index": video["index"],\n  "showTime": 0, # 目前没用到，不知道是什么\n  "innerOptions": [], # 目前没用到，不知道是什么\n  "dimension": {\'width\': 1920, \'height\': 1080},\n  "duration": video["duration"]*1000\n}\n```\n\n其中 `video` 是从 API 获得的\n\n* 非分支模块(`script_node_info["data"]["type"]=999`)：不能设置分支选项，直接跳转到下一个节点\n  * 剧情分支模块 (`script_node_info["type"] = "videoNode"`): 需要设置视频信息\n  * 跳转分支模块 (`script_node_info["type"] = "gotoNode"`): 需要设置跳转(已有的)节点信息\n* 分支模块(`script_node_info["data"]["type"]=0 or 1`)：可以设置分支选项, 有分支为 1, 无分支为 0\n  * 剧情分支模块 (`script_node_info["type"] = "videoNode"`): 需要设置视频信息\n  * 跳转分支模块 (`script_node_info["type"] = "gotoNode"`): 需要设置跳转(已有的)节点信息\n\n\n### 解释 `data["graph"]["script"]["links"]`\n* `data["graph"]["script"]["links"]` 类型为 `dict`, `key` 是 `l-[10 characters]`, `value` 是\n`dict`, 如下\n\n```\nscrip_link_info = {\n  "id": \'l-[10 characters]\', # str\n  "type": link_type, # flowLink 如果from node 是videoNode, refLink 如果 from node 是gotoNode\n  "data": data, # 连线的内容信息，其他的参数可以被理解为是连线的结构信息\n  "from": nfrom_id, # 连线的开始节点 id\n  "to": nto_id # 连线的结束节点 id\n}\n```\n\n* `script_link_info["data"]` 是 `dict`，如下\n\n```\ndata = {\n  "id": link_id, # str, "l-[10 characters]"\n  "point": {\'x\': 0, \'y\': 0, \'align\': 2} # Never used that, just set as default\n  "conditions": [], # 在高级功能的时候会用到，其他时候都是 []\n  "actions": [], # 在高级功能的时候会用到，其他时候都是 []\n  "text": "我要去下个节点",\n  "default": False # 从一个节点出来的连线，其中有一个是默认分支，设置为True, 其他的为 False \n}\n```\n\n### 解释 `data["graph"]["nodes"]`\n\n* `data["graph"]["nodes"]` 是 list[dict], 只会有类型为videoNode 的信息\n\n* 每个节点的信息如下：\n```\nself.info = {\n  "id": "n-[10 characters]", # str\n  "cid": script_node_info["data"]["cid"],\n  "name": script_node_info["data"]["name"],\n  "is_start": 1 if script_node_info["isRoot"] else 0, \n  "show_time": 0 if script_node_info["data"]["type"] == 999 else -1 # int, Strange semantic，no idea why\n  "otype": 1, # int, No idea \n  "edges": [], # list[dict], 从这个节点出去的连线\n}\n``` \n\n### 解释高级功能\n\n* 简而言之，就是会使用到隐藏数值来左右情节树走向的功能。用户的交互改变隐藏数值，隐藏数值改变呈现的故事情节。\n\n* 参考 [B 站情节树高级功能](https://www.bilibili.com/video/BV134411F7VD)\n\n重要的几个参数\n* `data["graph"]["script"]["enableVariables"]` 设置为 True 如果用到高级功能\n* `data["graph"]["script"]["variables"]` 默认为\n```\ngraph_script[\'variables\'] = [\n  {\'id\': \'v-LMw8OzBpw\', \'type\': 1, \'name\': \'数值1\', \'initValue\': 0, \'initValue2\': 0, \'displayable\': False},\n  {\'id\': \'v-2xvB5bPFCl\', \'type\': 1, \'name\': \'数值2\', \'initValue\': 0, \'initValue2\': 0, \'displayable\': False},\n  {\'id\': \'v-Lh0XaHD6ND\', \'type\': 1, \'name\': \'数值3\', \'initValue\': 0, \'initValue2\': 0, \'displayable\': False},\n  {\'id\': \'v-as5TbzlglR\', \'type\': 1, \'name\': \'数值4\', \'initValue\': 0, \'initValue2\': 0, \'displayable\': False},\n  {\'id\': \'v-Lwe1HHANpM\', \'type\': 2, \'name\': \'随机值\', \'initValue\': 1, \'initValue2\': 100, \'displayable\': False}]\n```\n显而易见，其中\n  * `id` 是 `v-[10 characters]`\n  * `type` int, 可设置固定初始值的为 1， 随机产生的为 2\n  * `name` str, 可以自己设置, 就是变量名\n  * `initValue`: int, 在 type 为1的时候，初始值；在 type 为2时，就是随机数的取值下限\n  * `initValue2`: int, 在 type 为1的时候，没用到；在 type 为2时，就是随机数的取值上限\n  * `displayable`: bool, 是否在播放视频时显示数值\n* `data["graph"]["regional_vars"]` 和 `data["graph"]["script"]["variables"]` 同步就可以, 饮用一小段代码，显而易见\n```\ndef _sync_vars(self):\n  for v in self.graph["script"]["variables"]:\n    _v = {\n      "name": v["name"],\n      "type": v["type"],\n      "init_min": v["initValue"],\n      "init_max": v["initValue2"],\n      "is_show": 1 if v["displayable"] else 0,\n      "id": v["id"] \n    }\n  \n    self.graph["regional_vars"].append(_v)\n```\n\n# 实现情节树的方式\n\n* 处理 `graph["script"]` 和画图描述一致，做两个节点(`ScriptNode`)，做个连线(`ScriptLink`), 设置变量(`ScriptVariable`)\n* 处理 `graph["nodes"]` 只需要同步 `graph["script"]` 就可以了, 同步接口会处理具体事情\n* 处理 `graph["regional_vars"]` 只需要同步 `graph["script"]` 就可以了，同步接口会处理具体事情\n\n\n',
    'author': 'Phoenix Grey',
    'author_email': 'phoenix.grey0108@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/phigrey/bilibili-storytree.git',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
