from . import math, math_custom, data, format, count, replace, filter, extract, datetime, string, groupby, array, \
    comparison, dictionary, literal, preprocessing, sort, window, pivot, statistics

TRANSFORMATION_MAP = {
    "data-convert": data.Convert,
    "data-convert-datetime": data.ConvertDatetime,
    "data-field-column": data.FieldToColumn,
    "duplicate-column": data.DuplicateColumn,
    "drop-column": data.DropColumn,
    "rename-column": data.RenameColumn,

    "sortby": sort.SortBy,

    "math-add": math.Add,
    "math-min": math.Min,
    "math-multiply": math.Multiply,
    "math-divide": math.Divide,
    "math-custom": math_custom.Custom,

    "string-substring-left": string.SubstringLeft,
    "string-substring-right": string.SubstringRight,
    "string-substring": string.Substring,

    "string-find-left": string.FindLeft,
    "string-find-right": string.FindRight,

    "string-length": string.Length,
    "string-merge": string.Merge,
    "string-repeat": string.Repeat,

    "string-test-contains": string.TestContains,
    "string-test-startswith": string.TestStartsWith,
    "string-test-endswith": string.TestEndsWith,
    "string-test-regex": string.TestRegex,
    "string-test-exact": string.TestExact,
    "string-test-greater": string.TestGreater,
    "string-test-greater-equal": string.TestGreaterEqual,
    "string-test-less": string.TestLess,
    "string-test-less-equal": string.TestLessEqual,

    "string-base64-encode": string.Base64Encode,
    "string-base64-decode": string.Base64Decode,

    "format-uppercase": format.UpperCase,
    "format-lowercase": format.LowerCase,
    "format-propercase": format.ProperCase,
    "format-trim-whitespace": format.TrimWhitespace,
    "format-trim-quotes": format.TrimQuotes,
    "format-remove-whitespace": format.RemoveWhitespace,
    "format-remove-symbols": format.RemoveSymbols,
    "format-remove-accents": format.RemoveAccents,
    "format-add-prefix": format.AddPrefix,
    "format-add-suffix": format.AddSuffix,
    "format-pad": format.Pad,

    "count-exact": count.CountExact,
    "count-pattern": count.CountRegex,
    "count-delimiters": count.CountDelimiters,
    "replace-text": replace.ReplaceText,
    "replace-regex": replace.ReplaceRegex,
    "replace-delimiters": replace.ReplaceDelimiters,
    "replace-positions": replace.ReplacePositions,
    "replace-mismatched": replace.ReplaceMismatched,
    "replace-missing": replace.ReplaceMissing,
    "extract-numbers": extract.ExtractNumbers,
    "extract-httpquerystrings": extract.ExtractHttpQueryString,
    "extract-regex": extract.ExtractRegex,
    "extract-delimiters": extract.ExtractDelimiters,
    "extract-positions": extract.ExtractPositions,

    "datetime-extract-year": datetime.ExtractYear,
    "datetime-extract-month": datetime.ExtractMonth,
    "datetime-extract-monthname": datetime.ExtractMonthName,
    "datetime-extract-endofmonth": datetime.ExtractEndOfMonth,
    "datetime-extract-day": datetime.ExtractDay,
    "datetime-extract-week": datetime.ExtractWeek,
    "datetime-extract-dayofweek": datetime.ExtractDayOfWeek,
    "datetime-extract-dayofweekname": datetime.ExtractDayOfWeekName,
    "datetime-extract-dayofyear": datetime.ExtractDayOfYear,
    "datetime-extract-hours": datetime.ExtractHours,
    "datetime-extract-minutes": datetime.ExtractMinutes,
    "datetime-extract-seconds": datetime.ExtractSeconds,
    "datetime-extract-timestamp": datetime.ExtractTimestamp,

    "filter-value-missing": filter.FilterMissing,
    "filter-value-mismatched": filter.FilterMismatched,
    "filter-value-is": filter.FilterIs,
    "filter-value-isnot": filter.FilterIsNot,
    "filter-value-isoneof": filter.FilterIsOneOf,
    "filter-value-isnotoneof": filter.FilterIsnotOneOf,
    "filter-value-between": filter.FilterBetween,
    "filter-value-notbetween": filter.FilterNotBetween,
    "filter-value-contains": filter.FilterContains,
    "filter-value-startswith": filter.FilterStartsWith,
    "filter-value-endswith": filter.FilterEndsWith,
    "filter-value-pattern": filter.FilterRegex,
    "filter-rows-interval": filter.FilterRowsInterval,
    "filter-rows-range": filter.FilterRowsRange,
    "filter-rows-top": filter.FilterRowsTop,
    "filter-rows-duplicate": filter.FilterRowsDuplicates,

    "groupby": groupby.GroupBy,
    "window": window.Window,
    "pivot": pivot.Pivot,
    "unpivot": pivot.Unpivot,
    "data-transpose": data.Transpose,
    "data-shift": data.Shift,
    "data-diff": data.Diff,
    "data-pctchange": data.PctChange,

    "array-index": array.Index,
    "array-at-index": array.AtIndex,
    "array-slice": array.Slice,
    "array-length": array.Length,
    "array-mean": array.Mean,
    "array-sum": array.Sum,
    "array-min": array.Min,
    "array-max": array.Max,
    "array-mode": array.Mode,
    "array-std": array.Std,
    "array-var": array.Var,
    "array-sort": array.Sort,
    "array-concat": array.Concat,
    "array-intersect": array.Intersect,
    "array-unique": array.Unique,
    "array-filter": array.Filter,
    "array-to-dict": array.ToDict,
    "array-merge": array.Merge,
    "array-flatten": array.Flatten,

    "dict-keys": dictionary.Keys,
    "dict-values": dictionary.Values,
    "dict-get": dictionary.Get,
    "dict-create": dictionary.Create,

    "comparison-compare-value": comparison.CompareValue,
    "comparison-compare-columns": comparison.CompareColumns,
    "comparison-parity": comparison.Parity,
    "comparison-mismatched": comparison.Mismatched,
    "comparison-missing": comparison.Missing,
    "comparison-is-null": comparison.IsNull,
    "comparison-negate": comparison.Negate,
    "comparison-logical": comparison.Logical,
    "comparison-if-else": comparison.IfElse,
    "comparison-min": comparison.Min,
    "comparison-max": comparison.Max,
    "comparison-mean": comparison.Mean,
    "comparison-mode": comparison.Mode,
    "comparison-coalesce": comparison.Coalesce,

    "datetime-date-add": datetime.DateAdd,
    "datetime-date-diff": datetime.DateDiff,
    "datetime-now": datetime.Now,
    "datetime-today": datetime.Today,

    "format-number": format.Number,

    "literal-string": literal.String,
    "literal-Integer": literal.Integer,
    "literal-float": literal.Float,
    "literal-null": literal.Null,
    "literal-rand-between": literal.RandBetween,
    "literal-rand-int": literal.RandInt,

    "preprocessing-scale": preprocessing.Scale,
    "preprocessing-categorical-encoding": preprocessing.CategoricalEncoding,
    "preprocessing-discretize-bin": preprocessing.DiscretizeBin,
    "preprocessing-binarize": preprocessing.Binarize,
    "preprocessing-normalize": preprocessing.Normalize,
    "preprocessing-impute": preprocessing.Impute,
    "preprocessing-polynomial": preprocessing.Polynomial,

    "stats-correlation": statistics.Correlation,
    "stats-covariance": statistics.Covariance,
    "stats-cumsum": statistics.CumSum,
    "stats-cummax": statistics.CumMax,
    "stats-cummin": statistics.CumMin,
    "stats-cumprod": statistics.CumProd,
    "stats-mad": statistics.Mad,
    "stats-skew": statistics.Skew,
    "stats-kurtosis": statistics.Kurtosis,
    "stats-median": statistics.Median,
    "stats-mode": statistics.Mode,
    "stats-max": statistics.Max,
    "stats-min": statistics.Min,
    "stats-sum": statistics.Sum,
    "stats-std": statistics.Std,
    "stats-var": statistics.Var,
    "stats-sem": statistics.Sem,
    "stats-nunique": statistics.NUnique,
    "stats-value-counts": statistics.ValueCounts,
}
