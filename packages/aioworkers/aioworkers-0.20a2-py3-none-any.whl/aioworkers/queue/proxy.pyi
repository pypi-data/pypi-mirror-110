from ..core.base import ExecutorEntity as ExecutorEntity
from ..core.formatter import FormattedEntity as FormattedEntity
from .base import AbstractQueue as AbstractQueue
from typing import Any

class ProxyQueue(ExecutorEntity, AbstractQueue):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def init(self) -> None: ...
    def set_queue(self, queue: Any) -> None: ...
    async def get(self): ...
    async def put(self, value: Any): ...

class PipeLineQueue(FormattedEntity, ExecutorEntity, AbstractQueue):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_reader(self, reader: Any) -> None: ...
    def set_writer(self, writer: Any) -> None: ...
    async def get(self): ...
    async def put(self, value: Any): ...
