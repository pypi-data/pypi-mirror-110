import abc
import asyncio
from ..core.base import AbstractReader as AbstractReader, AbstractWriter as AbstractWriter
from ..utils import import_name as import_name
from typing import Any, Optional

class AbstractQueue(AbstractReader, AbstractWriter, metaclass=abc.ABCMeta): ...

class Queue(asyncio.Queue, AbstractQueue):
    def __init__(self, config: Optional[Any] = ..., *, loop: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def set_config(self, config: Any) -> None: ...
    def __len__(self): ...

class PriorityQueue(asyncio.PriorityQueue, Queue):
    def __init__(self, config: Optional[Any] = ..., *, loop: Optional[Any] = ..., **kwargs: Any) -> None: ...

class ScoreQueueMixin:
    def __init__(self, *args: Any, **kwargs: Any): ...
    def set_config(self, config: Any) -> None: ...
    def put(self, value: Any, score: Optional[Any] = ...): ...
    async def get(self, score: bool = ...): ...

def score_queue(default_score: Optional[Any] = ...): ...

class ScoreQueue(PriorityQueue): ...
