import abc
import logging
from ..utils import import_name as import_name
from .config import ValueExtractor as ValueExtractor
from abc import ABC, abstractmethod
from typing import Any, Optional

class AbstractEntity(ABC):
    def __init__(self, config: Optional[Any] = ..., *, context: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @property
    def config(self): ...
    def set_config(self, config: Any) -> None: ...
    @property
    def context(self): ...
    def set_context(self, context: Any) -> None: ...
    async def init(self) -> None: ...
    @property
    def loop(self): ...

class AbstractNamedEntity(AbstractEntity):
    def set_config(self, config: Any) -> None: ...
    @property
    def name(self): ...

class AbstractNestedEntity(AbstractEntity):
    cache_factory: Any = ...
    item_factory: Any = ...
    def __init__(self, config: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def set_context(self, context: Any) -> None: ...
    def set_config(self, config: Any) -> None: ...
    async def init(self) -> None: ...
    def get_child_config(self, item: str, config: Optional[ValueExtractor]=...) -> Optional[ValueExtractor]: ...
    def factory(self, item: Any, config: Optional[Any] = ...): ...
    def __getattr__(self, item: Any): ...
    def __getitem__(self, item: Any): ...

class AbstractReader(AbstractEntity, metaclass=abc.ABCMeta):
    @abstractmethod
    async def get(self) -> Any: ...

class AbstractWriter(AbstractEntity, metaclass=abc.ABCMeta):
    @abstractmethod
    async def put(self, value: Any) -> Any: ...

class ExecutorEntity(AbstractEntity):
    PARAM_EXECUTOR: str = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def loop(self): ...
    def executor_factory(self, *args: Any, **kwargs: Any): ...
    def set_config(self, config: Any) -> None: ...
    def set_context(self, context: Any) -> None: ...
    def run_in_executor(self, f: Any, *args: Any, **kwargs: Any): ...
    @property
    def executor(self): ...

class MultiExecutorEntity(AbstractEntity):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def loop(self): ...
    def executor_factory(self, *args: Any, **kwargs: Any): ...
    async def init(self) -> None: ...
    def run_in_executor(self, name: str, f: Any, *args: Any, **kwargs: Any) -> Any: ...

class NameLogger(logging.LoggerAdapter):
    @classmethod
    def from_instance(cls, logger: Any, instance: Any): ...
    def process(self, msg: Any, kwargs: Any): ...

class LoggingEntity(AbstractNamedEntity):
    logging_adapter: Any = ...
    logger: Any = ...
    def set_config(self, config: Any) -> None: ...

class AbstractConnector(LoggingEntity, metaclass=abc.ABCMeta):
    async def init(self) -> None: ...
    async def robust_connect(self) -> None: ...
    @abstractmethod
    async def connect(self) -> Any: ...
    @abstractmethod
    async def disconnect(self) -> Any: ...
    async def cleanup(self) -> None: ...
