from ..utils import import_name as import_name
from .base import AbstractEntity as AbstractEntity, NameLogger as NameLogger
from .config import ValueExtractor as ValueExtractor
from typing import Any, Callable, FrozenSet, Iterable, List, MutableMapping, Optional, Sequence, Set, Tuple, Type, TypeVar, Union

T = TypeVar('T')
TSeq = Union[Sequence, Set, FrozenSet]
DOT: str

class Octopus(MutableMapping):
    def items(self): ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def find_iter(self, cls: Type[T], *, exclude: Optional[Set[int]]=...) -> Iterable[Tuple[str, T]]: ...

class Signal:
    LOG_RUN: str = ...
    LOG_END: str = ...
    def __init__(self, context: Context, name: str=...) -> None: ...
    def append(self, signal: Callable, groups: TSeq=...) -> Any: ...
    def send(self, group_resolver: Any, *, coroutine: bool = ...): ...

class GroupResolver:
    def __init__(self, include: Optional[Any] = ..., exclude: Optional[Any] = ..., all_groups: bool = ..., default: bool = ...) -> None: ...
    def match(self, groups: Any): ...

class ContextProcessor:
    context: Any = ...
    path: Any = ...
    value: Any = ...
    def __init__(self, context: Context, path: str, value: ValueExtractor) -> None: ...
    @classmethod
    def match(cls, context: Context, path: str, value: ValueExtractor) -> Any: ...
    async def process(self) -> None: ...

class LoggingContextProcessor(ContextProcessor):
    key: str = ...
    process: Any = ...
    @classmethod
    def match(cls, context: Any, path: Any, value: Any): ...
    def configure(self, value: Any) -> None: ...

class GroupsContextProcessor(ContextProcessor):
    key: str = ...
    process: Any = ...
    @classmethod
    def match(cls, context: Any, path: Any, value: Any): ...

class EntityContextProcessor(ContextProcessor):
    key: str = ...
    entity: Any = ...
    def __init__(self, context: Context, path: str, value: ValueExtractor) -> None: ...
    @classmethod
    def match(cls, context: Context, path: str, value: ValueExtractor) -> Optional[ContextProcessor]: ...
    async def process(self) -> None: ...

class InstanceEntityContextProcessor(EntityContextProcessor):
    key: str = ...
    entity: Any = ...
    def __init__(self, context: Context, path: str, value: ValueExtractor) -> None: ...
    @classmethod
    def match(cls, context: Context, path: str, value: ValueExtractor) -> Optional[ContextProcessor]: ...
    async def process(self) -> None: ...

class FuncContextProcessor(ContextProcessor):
    key: str = ...
    process: Any = ...
    def __init__(self, context: Context, path: str, value: ValueExtractor) -> None: ...
    @classmethod
    def match(cls, context: Context, path: str, value: ValueExtractor) -> Optional[ContextProcessor]: ...

class RootContextProcessor(ContextProcessor):
    processors: Any = ...
    on_ready: Any = ...
    def __init__(self, context: Any, path: Optional[Any] = ..., value: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def processing(self, config: Any, path: Optional[Any] = ...) -> None: ...
    value: Any = ...
    def build(self, config: Any) -> None: ...
    async def process(self, config: Optional[Any] = ...) -> None: ...

class Context(AbstractEntity, Octopus):
    logger: Any = ...
    processors: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_group_resolver(self, gr: Any) -> None: ...
    def set_config(self, config: Any) -> None: ...
    def set_loop(self, loop: Any) -> None: ...
    def processes(self) -> None: ...
    @property
    def on_connect(self): ...
    @property
    def on_start(self): ...
    @property
    def on_stop(self): ...
    @property
    def on_disconnect(self): ...
    @property
    def on_cleanup(self): ...
    async def init(self) -> None: ...
    async def wait_all(self, coros: Any, timeout: Optional[Any] = ...) -> None: ...
    async def connect(self) -> None: ...
    async def start(self) -> None: ...
    async def stop(self) -> None: ...
    async def disconnect(self) -> None: ...
    def run_forever(self) -> None: ...
    def __dir__(self) -> List[str]: ...
    def __getitem__(self, item: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __setattr__(self, key: Any, value: Any) -> None: ...
    def __getattr__(self, item: Any): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def get_object(self, path: Any): ...
