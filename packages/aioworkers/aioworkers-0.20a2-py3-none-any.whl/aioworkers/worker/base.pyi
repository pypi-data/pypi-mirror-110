import abc
from ..core.base import AbstractNamedEntity as AbstractNamedEntity, LoggingEntity as LoggingEntity
from ..utils import import_name as import_name
from abc import abstractmethod
from typing import Any, Optional

class AbstractWorker(LoggingEntity, AbstractNamedEntity, metaclass=abc.ABCMeta):
    @abstractmethod
    async def start(self) -> Any: ...
    @abstractmethod
    async def stop(self) -> Any: ...
    @abstractmethod
    async def status(self) -> Any: ...

class Worker(AbstractWorker):
    counter: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_config(self, config: Any) -> None: ...
    async def init(self) -> None: ...
    @property
    def input(self): ...
    @property
    def output(self): ...
    async def work(self) -> None: ...
    async def runner(self) -> None: ...
    async def run(self, value: Optional[Any] = ...) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    @property
    def started_at(self): ...
    @property
    def stopped_at(self): ...
    def running(self): ...
    async def start(self) -> None: ...
    async def stop(self, force: bool = ...) -> None: ...
    async def status(self): ...
