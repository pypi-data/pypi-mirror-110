import abc
from .. import humanize as humanize, utils as utils
from ..http import URL as URL
from ..utils import mapping_repr as mapping_repr
from abc import abstractmethod
from typing import Any, Callable, Iterator, Mapping, MutableMapping, Optional

logger: Any

class MergeDict(dict):
    def __init__(self, iterable: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def __getattr__(self, item: Any): ...
    def __setattr__(self, key: Any, value: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def update(self, d: Any, *args: Any, **kwargs: Any) -> None: ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def __getitem__(self, item: Any): ...
    def __contains__(self, key: Any): ...
    def __call__(self, *args: Any, **kwargs: Any) -> None: ...
    def __dir__(self): ...
    def copy(self): ...

def merge(source: Mapping, destination: MutableMapping) -> Any: ...

class ConfigFileLoader(metaclass=abc.ABCMeta):
    extensions: tuple = ...
    mime_types: tuple = ...
    @abstractmethod
    def load_str(self, s: Any) -> Any: ...
    def load_bytes(self, b: Any): ...
    def load_fd(self, fd: Any): ...
    def load_path(self, path: Any): ...
    def load_url(self, url: Any): ...

class YamlLoader(ConfigFileLoader):
    extensions: Any = ...
    def __init__(self, *args: Any, **kwargs: Any): ...
    def load_str(self, s: Any): ...

class JsonLoader(ConfigFileLoader):
    extensions: Any = ...
    mime_types: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def load_str(self, s: Any): ...

class ValueMatcher(metaclass=abc.ABCMeta):
    fn: Callable = ...
    def __init__(self, value: Any) -> None: ...
    @abstractmethod
    def match(cls, value: Any) -> Any: ...
    @abstractmethod
    def get_value(self) -> Any: ...

class IntValueMatcher(ValueMatcher):
    fn: Any = ...
    @classmethod
    def match(cls, value: Any): ...
    def get_value(self): ...

class BooleanValueMatcher(IntValueMatcher):
    true: Any = ...
    false: Any = ...
    @classmethod
    def fn(cls, value: Any): ...

class FloatValueMatcher(IntValueMatcher):
    fn: Any = ...

class MultilineValueMatcher(ValueMatcher):
    re: Any = ...
    @classmethod
    def match(cls, value: Any): ...
    def get_value(self): ...

class ListValueMatcher(ValueMatcher):
    @classmethod
    def match(cls, value: Any): ...
    def get_value(self): ...

class StringReplaceLoader(ConfigFileLoader, metaclass=abc.ABCMeta):
    matchers: Any = ...

class IniLoader(StringReplaceLoader):
    extensions: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def new_configparser(self, **kwargs: Any): ...
    def load_fd(self, fd: Any): ...
    def load_path(self, path: Any): ...
    def load_str(self, string: Any): ...

class Registry(dict):
    def __call__(self, cls: Any) -> None: ...
    def get(self, key: Any): ...

registry: Any
extractors: Any

class ValueExtractor(Mapping):
    def __init__(self, mapping: Any) -> None: ...
    def __setattr__(self, key: Any, value: Any) -> None: ...
    def new_child(self, *mappings: Any, **kwargs: Any) -> ValueExtractor: ...
    def new_parent(self, *mappings: Any, **kwargs: Any) -> ValueExtractor: ...
    def __getitem__(self, item: Any): ...
    def get(self, item: Any, default: Optional[Any] = ...): ...
    def __contains__(self, item: Any): ...
    def __getattr__(self, item: Any): ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator: ...

class Config(ValueExtractor):
    env: Any = ...
    logging: Any = ...
    search_dirs: Any = ...
    uris: Any = ...
    def __init__(self, search_dirs: Any = ..., **kwargs: Any) -> None: ...
    def load_conf(self, fd: Any, *, path: Optional[Any] = ..., mime_type: Optional[Any] = ..., response: Optional[Any] = ...): ...
    def load(self, *filenames: Any, base: Optional[Any] = ...): ...
    def update(self, *mappings: Any, **kwargs: Any) -> None: ...
    def load_plugins(self, *modules: Any, force: bool = ...): ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator: ...
    def __getitem__(self, item: Any): ...
    def __contains__(self, item: Any): ...
