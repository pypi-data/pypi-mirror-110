import asyncio
from .base import AbstractQueue as AbstractQueue, ScoreQueueMixin as ScoreQueueMixin
from typing import Any, Optional

class TimeoutItem:
    def __init__(self, value: Any, *, timeout: float=..., add: float=...) -> None: ...
    @property
    def value(self): ...
    @property
    def timeout(self): ...
    @timeout.setter
    def timeout(self, timeout: float) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __iter__(self) -> Any: ...

class TimestampQueue(ScoreQueueMixin, AbstractQueue):
    default_score: str = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_config(self, config: Any) -> None: ...
    def set_context(self, context: Any): ...
    def cleanup(self) -> None: ...
    def __len__(self): ...
    @property
    def loop(self) -> asyncio.AbstractEventLoop: ...
    def get(self, score: bool=...) -> Any: ...
    async def put(self, value: Any, score: Optional[Any] = ...) -> None: ...

class UniqueQueue(TimestampQueue):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
