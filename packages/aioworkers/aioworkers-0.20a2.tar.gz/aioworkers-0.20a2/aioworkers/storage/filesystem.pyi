import os
import pathlib
from . import base
from ..core.base import AbstractNestedEntity, ExecutorEntity
from ..core.formatter import FormattedEntity
from pathlib import PurePath
from typing import Any, Optional

class AsyncFile:
    fd: Any = ...
    storage: Any = ...
    def __init__(self, fd: Any, storage: Optional[Any] = ...) -> None: ...
    async def read(self, *args: Any, **kwargs: Any): ...
    async def write(self, *args: Any, **kwargs: Any): ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    async def close(self) -> None: ...
    def __aiter__(self): ...
    async def __anext__(self): ...

class AsyncFileContextManager:
    path: Any = ...
    af: Any = ...
    mode: Any = ...
    def __init__(self, path: Any, *args: Any, **kwargs: Any) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def __await__(self): ...

class AsyncGlob:
    storage: Any = ...
    def __init__(self, path: Any, pattern: Any) -> None: ...
    def __aiter__(self): ...
    async def __anext__(self): ...

class AsyncPath(PurePath):
    def __new__(cls, *args: Any, storage: Optional[Any] = ...): ...
    async def exists(self) -> bool: ...
    async def mkdir(self, *args: Any, **kwargs: Any): ...
    async def stat(self) -> os.stat_result: ...
    async def unlink(self): ...
    async def read_text(self, *args: Any, **kwargs: Any): ...
    async def write_text(self, *args: Any, **kwargs: Any): ...
    async def read_bytes(self, *args: Any, **kwargs: Any): ...
    async def write_bytes(self, *args: Any, **kwargs: Any): ...
    def open(self, *args: Any, **kwargs: Any): ...
    @property
    def parent(self): ...
    @property
    def normpath(self): ...
    def glob(self, pattern: Any): ...

class AsyncPosixPath(AsyncPath, pathlib.PurePosixPath): ...
class AsyncWindowsPath(AsyncPath, pathlib.PureWindowsPath): ...

class MockFileSystemStorage(ExecutorEntity):
    def set_config(self, config: Any) -> None: ...
    @property
    def loop(self): ...
    async def next_space_waiter(self) -> None: ...

class BaseFileSystemStorage(AbstractNestedEntity, ExecutorEntity, FormattedEntity, base.AbstractStorage):
    PARAM_LIMIT_FREE_SPACE: str = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_config(self, config: Any) -> None: ...
    def factory(self, item: Any, config: Optional[Any] = ...): ...
    def disk_usage(self): ...
    async def get_free_space(self): ...
    async def wait_free_space(self, size: Optional[Any] = ...) -> None: ...
    async def next_space_waiter(self) -> None: ...
    def path_transform(self, rel_path: str) -> Any: ...
    def raw_key(self, *key: Any): ...
    async def set(self, key: Any, value: Any) -> None: ...
    async def get(self, key: Any): ...
    def open(self, key: Any, *args: Any, **kwargs: Any): ...
    def copy(self, key_source: Any, storage_dest: Any, key_dest: Any): ...
    def move(self, key_source: Any, storage_dest: Any, key_dest: Any): ...

class FileSystemStorage(BaseFileSystemStorage, base.AbstractListedStorage):
    def list(self, glob: str = ...): ...
    async def length(self, glob: str = ...): ...

class NestedFileSystemStorage(BaseFileSystemStorage):
    def path_transform(self, rel_path: str) -> Any: ...

class HashFileSystemStorage(NestedFileSystemStorage):
    def path_transform(self, rel_path: str) -> Any: ...
