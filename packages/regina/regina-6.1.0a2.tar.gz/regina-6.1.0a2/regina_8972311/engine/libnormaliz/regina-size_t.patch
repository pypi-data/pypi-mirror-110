diff --git a/engine/libnormaliz/HilbertSeries.cpp b/engine/libnormaliz/HilbertSeries.cpp
index e85e21363..64edf816c 100644
--- a/engine/libnormaliz/HilbertSeries.cpp
+++ b/engine/libnormaliz/HilbertSeries.cpp
@@ -1120,7 +1120,7 @@ vector<Integer> compute_e_vector(vector<Integer> Q, int dim) {
         }
         E_Vector[i] /= permutations<Integer>(1, i);
         for (j = 1; j < Q.size() - i; j++) {
-            Q[j - 1] = j * Q[j];
+            Q[j - 1] = static_cast<unsigned long>(j) * Q[j];
         }
     }
     return E_Vector;
diff --git a/engine/libnormaliz/cone.cpp b/engine/libnormaliz/cone.cpp
index 90f9fd951..ec549bfc7 100644
--- a/engine/libnormaliz/cone.cpp
+++ b/engine/libnormaliz/cone.cpp
@@ -4620,7 +4620,7 @@ void Cone<Integer>::extract_data(Full_Cone<IntegerFC>& FC, ConeProperties& ToCom
             setComputed(ConeProperty::Multiplicity);
         }
         else if (FC.isComputed(ConeProperty::ModuleRank)) {
-            multiplicity = FC.getMultiplicity() * module_rank;
+            multiplicity = FC.getMultiplicity() * static_cast<unsigned long>(module_rank);
             setComputed(ConeProperty::Multiplicity);
         }
     }
@@ -5465,7 +5465,7 @@ void Cone<Integer>::try_symmetrization(ConeProperties& ToCompute) {
     mpz_class fact = 1;
     for (unsigned long multiplicitie : multiplicities) {
         for (size_t j = 1; j < multiplicitie; ++j)
-            fact *= j;
+            fact *= static_cast<unsigned long>(j);
     }
     polynomial += "/" + fact.get_str() + ";";
 
@@ -6020,7 +6020,7 @@ void Cone<Integer>::try_approximation_or_projection(ConeProperties& ToCompute) {
         }
 
         if (isComputed(ConeProperty::Grading)) {
-            multiplicity = module_rank;  // of the recession cone;
+            multiplicity = static_cast<unsigned long>(module_rank);  // of the recession cone;
             setComputed(ConeProperty::Multiplicity);
             if (ToCompute.test(ConeProperty::HilbertSeries) &&
                 ToCompute.test(ConeProperty::Approximate)) {  // already done with project_and_lift
@@ -7011,7 +7011,7 @@ void Cone<Integer>::try_Hilbert_Series_from_lattice_points(const ConeProperties&
         !(isComputed(ConeProperty::RecessionRank) && recession_rank == 0) || !isComputed(ConeProperty::Grading))
         return;
 
-    multiplicity = ModuleGenerators.nr_of_rows();
+    multiplicity = static_cast<unsigned long>(ModuleGenerators.nr_of_rows());
     setComputed(ConeProperty::Multiplicity);
 
     if (!ToCompute.test(ConeProperty::HilbertSeries))
diff --git a/engine/libnormaliz/full_cone.cpp b/engine/libnormaliz/full_cone.cpp
index a36460840..897ac9ccc 100644
--- a/engine/libnormaliz/full_cone.cpp
+++ b/engine/libnormaliz/full_cone.cpp
@@ -3075,7 +3075,7 @@ void Full_Cone<Integer>::find_bottom_facets() {
     INTERRUPT_COMPUTATION_BY_EXCEPTION
 
     Matrix<Integer> BottomFacets(0, dim);
-    vector<Integer> BottomDegs(0, dim);
+    vector<Integer> BottomDegs(0, static_cast<unsigned long>(dim));
     if (!isComputed(ConeProperty::SupportHyperplanes)) {
         Support_Hyperplanes = Matrix<Integer>(0, dim);
         nrSupport_Hyperplanes = 0;
@@ -6110,7 +6110,7 @@ void Full_Cone<Integer>::compute_class_group() {  // from the support hyperplane
     Matrix<Integer> Trans = Support_Hyperplanes;  // .transpose();
     size_t rk;
     Trans.SmithNormalForm(rk);
-    ClassGroup.push_back(Support_Hyperplanes.nr_of_rows() - rk);
+    ClassGroup.push_back(static_cast<unsigned long>(Support_Hyperplanes.nr_of_rows() - rk));
     for (size_t i = 0; i < rk; ++i)
         if (Trans[i][i] != 1)
             ClassGroup.push_back(Trans[i][i]);
diff --git a/engine/libnormaliz/simplex.cpp b/engine/libnormaliz/simplex.cpp
index d568823c8..ad08ade45 100644
--- a/engine/libnormaliz/simplex.cpp
+++ b/engine/libnormaliz/simplex.cpp
@@ -1075,7 +1075,7 @@ void SimplexEvaluator<Integer>::evaluate_block(long block_start, long block_end,
 
     if (one_back > 0) {  // define the last point processed before if it isn't 0
         for (size_t i = 1; i <= dim; ++i) {
-            point[dim - i] = one_back % GDiag[dim - i];
+            point[dim - i] = static_cast<unsigned long>(one_back) % GDiag[dim - i];
             one_back /= convertToLong(GDiag[dim - i]);
         }
 
