"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from algorithmia_api_client.api_client import ApiClient, Endpoint as _Endpoint
from algorithmia_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from algorithmia_api_client.model.algorithm_host_username import AlgorithmHostUsername
from algorithmia_api_client.model.algorithm_host_username_updates import AlgorithmHostUsernameUpdates
from algorithmia_api_client.model.algorithm_list_result import AlgorithmListResult
from algorithmia_api_client.model.api_key import ApiKey
from algorithmia_api_client.model.api_key_creation import ApiKeyCreation
from algorithmia_api_client.model.api_key_list import ApiKeyList
from algorithmia_api_client.model.create_organization_host_information import CreateOrganizationHostInformation
from algorithmia_api_client.model.inline_response500 import InlineResponse500
from algorithmia_api_client.model.organization import Organization
from algorithmia_api_client.model.organization_api_key_creation import OrganizationApiKeyCreation
from algorithmia_api_client.model.organization_host_information import OrganizationHostInformation
from algorithmia_api_client.model.organization_type import OrganizationType
from algorithmia_api_client.model.organization_type_list_result import OrganizationTypeListResult
from algorithmia_api_client.model.paged_result_list import PagedResultList


class OrganizationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_organization_api_key(
            self,
            org_name,
            username,
            api_key_creation,
            **kwargs
        ):
            """Create an organization API key for a user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_organization_api_key(org_name, username, api_key_creation, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name
                username (str): The username of the user or organization
                api_key_creation (ApiKeyCreation): Create API Key Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            kwargs['username'] = \
                username
            kwargs['api_key_creation'] = \
                api_key_creation
            return self.call_with_http_info(**kwargs)

        self.add_organization_api_key = _Endpoint(
            settings={
                'response_type': (ApiKey,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}/members/{username}/keys',
                'operation_id': 'add_organization_api_key',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                    'username',
                    'api_key_creation',
                ],
                'required': [
                    'org_name',
                    'username',
                    'api_key_creation',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                    'username':
                        (str,),
                    'api_key_creation':
                        (ApiKeyCreation,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                    'username': 'username',
                },
                'location_map': {
                    'org_name': 'path',
                    'username': 'path',
                    'api_key_creation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_organization_api_key
        )

        def __add_organization_member(
            self,
            org_name,
            username,
            **kwargs
        ):
            """Add a user as a member of a given organization  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_organization_member(org_name, username, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name
                username (str): The username of the user or organization

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            kwargs['username'] = \
                username
            return self.call_with_http_info(**kwargs)

        self.add_organization_member = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}/members/{username}',
                'operation_id': 'add_organization_member',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                    'username',
                ],
                'required': [
                    'org_name',
                    'username',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                    'username': 'username',
                },
                'location_map': {
                    'org_name': 'path',
                    'username': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__add_organization_member
        )

        def __create(
            self,
            organization_type,
            **kwargs
        ):
            """Create an OrganizationType  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create(organization_type, async_req=True)
            >>> result = thread.get()

            Args:
                organization_type (OrganizationType): Request with OrganizationType

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OrganizationType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_type'] = \
                organization_type
            return self.call_with_http_info(**kwargs)

        self.create = _Endpoint(
            settings={
                'response_type': (OrganizationType,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organization/types',
                'operation_id': 'create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_type',
                ],
                'required': [
                    'organization_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_type':
                        (OrganizationType,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'organization_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create
        )

        def __create_key_for_organization(
            self,
            org_name,
            organization_api_key_creation,
            **kwargs
        ):
            """Create an AlgorithmKey for an organization  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_key_for_organization(org_name, organization_api_key_creation, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name
                organization_api_key_creation (OrganizationApiKeyCreation): Create API Key for an Organization Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            kwargs['organization_api_key_creation'] = \
                organization_api_key_creation
            return self.call_with_http_info(**kwargs)

        self.create_key_for_organization = _Endpoint(
            settings={
                'response_type': (ApiKey,),
                'auth': [
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}/keys',
                'operation_id': 'create_key_for_organization',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                    'organization_api_key_creation',
                ],
                'required': [
                    'org_name',
                    'organization_api_key_creation',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                    'organization_api_key_creation':
                        (OrganizationApiKeyCreation,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                    'organization_api_key_creation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_key_for_organization
        )

        def __create_organization(
            self,
            organization,
            **kwargs
        ):
            """Creates an organization owned by the caller  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_organization(organization, async_req=True)
            >>> result = thread.get()

            Args:
                organization (Organization): Request with Organization

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Organization
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization'] = \
                organization
            return self.call_with_http_info(**kwargs)

        self.create_organization = _Endpoint(
            settings={
                'response_type': (Organization,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organizations',
                'operation_id': 'create_organization',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                ],
                'required': [
                    'organization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (Organization,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'organization': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_organization
        )

        def __create_organization_host_information(
            self,
            org_name,
            create_organization_host_information,
            **kwargs
        ):
            """Create new Organization Host Information  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_organization_host_information(org_name, create_organization_host_information, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name
                create_organization_host_information (CreateOrganizationHostInformation): Request to create new Organization Host Information mapping

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            kwargs['create_organization_host_information'] = \
                create_organization_host_information
            return self.call_with_http_info(**kwargs)

        self.create_organization_host_information = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/admin/organization_host_information/{orgName}',
                'operation_id': 'create_organization_host_information',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                    'create_organization_host_information',
                ],
                'required': [
                    'org_name',
                    'create_organization_host_information',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                    'create_organization_host_information':
                        (CreateOrganizationHostInformation,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                    'create_organization_host_information': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_organization_host_information
        )

        def __delete(
            self,
            org_name,
            **kwargs
        ):
            """Deletes the Organization Host Information for org named  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.delete = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/admin/organization_host_information/{orgName}',
                'operation_id': 'delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete
        )

        def __delete_by_name(
            self,
            org_type_name,
            **kwargs
        ):
            """Remove an organization type by name  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_by_name(org_type_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_type_name (str): Organization Type name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_type_name'] = \
                org_type_name
            return self.call_with_http_info(**kwargs)

        self.delete_by_name = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/organization/types/{orgTypeName}',
                'operation_id': 'delete_by_name',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_type_name',
                ],
                'required': [
                    'org_type_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_type_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_type_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_type_name':
                        (str,),
                },
                'attribute_map': {
                    'org_type_name': 'orgTypeName',
                },
                'location_map': {
                    'org_type_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_by_name
        )

        def __delete_host_usernames(
            self,
            org_name,
            algorithm_id,
            **kwargs
        ):
            """Deletes functional-ids associated with a given algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_host_usernames(org_name, algorithm_id, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name
                algorithm_id (str): Algorithm UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            kwargs['algorithm_id'] = \
                algorithm_id
            return self.call_with_http_info(**kwargs)

        self.delete_host_usernames = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}/algorithms-host-usernames/{algorithmId}',
                'operation_id': 'delete_host_usernames',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                    'algorithm_id',
                ],
                'required': [
                    'org_name',
                    'algorithm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                    'algorithm_id':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'org_name': 'path',
                    'algorithm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_host_usernames
        )

        def __delete_organization(
            self,
            org_name,
            **kwargs
        ):
            """Delete an organization  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_organization(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.delete_organization = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}',
                'operation_id': 'delete_organization',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_organization
        )

        def __edit(
            self,
            org_name,
            organization,
            **kwargs
        ):
            """Update an organization  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.edit(org_name, organization, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name
                organization (Organization): Request with Organization

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            kwargs['organization'] = \
                organization
            return self.call_with_http_info(**kwargs)

        self.edit = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/organizations/{orgName}',
                'operation_id': 'edit',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                    'organization',
                ],
                'required': [
                    'org_name',
                    'organization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                    'organization':
                        (Organization,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                    'organization': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__edit
        )

        def __get_all_organization_types(
            self,
            **kwargs
        ):
            """Get all organization types  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_all_organization_types(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OrganizationTypeListResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_all_organization_types = _Endpoint(
            settings={
                'response_type': (OrganizationTypeListResult,),
                'auth': [],
                'endpoint_path': '/v1/organization/types',
                'operation_id': 'get_all_organization_types',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_all_organization_types
        )

        def __get_by_org_name(
            self,
            org_name,
            **kwargs
        ):
            """Get Organization Host Information  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_by_org_name(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OrganizationHostInformation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.get_by_org_name = _Endpoint(
            settings={
                'response_type': (OrganizationHostInformation,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/admin/organization_host_information/{orgName}',
                'operation_id': 'get_by_org_name',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_by_org_name
        )

        def __get_host_usernames(
            self,
            org_name,
            **kwargs
        ):
            """List of all the AlgorithmHostUsername \"algorithm-id / functional-id\" pairs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_host_usernames(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AlgorithmHostUsername]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.get_host_usernames = _Endpoint(
            settings={
                'response_type': ([AlgorithmHostUsername],),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}/algorithms-host-usernames',
                'operation_id': 'get_host_usernames',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_host_usernames
        )

        def __get_organization(
            self,
            org_name,
            **kwargs
        ):
            """Get an organization represented by the provided orgName  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_organization(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Organization
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.get_organization = _Endpoint(
            settings={
                'response_type': (Organization,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}',
                'operation_id': 'get_organization',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_organization
        )

        def __get_organizations(
            self,
            **kwargs
        ):
            """Lists all organizations  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_organizations(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): The number of results to return in a single page. [optional]
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedResultList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_organizations = _Endpoint(
            settings={
                'response_type': (PagedResultList,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organizations',
                'operation_id': 'get_organizations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'marker',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'marker': 'marker',
                },
                'location_map': {
                    'limit': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_organizations
        )

        def __get_utility_algorithms(
            self,
            org_name,
            **kwargs
        ):
            """List of utility algorithms  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_utility_algorithms(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmListResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.get_utility_algorithms = _Endpoint(
            settings={
                'response_type': (AlgorithmListResult,),
                'auth': [],
                'endpoint_path': '/v1/organizations/{orgName}/utility-algorithms',
                'operation_id': 'get_utility_algorithms',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_utility_algorithms
        )

        def __list_keys(
            self,
            org_name,
            **kwargs
        ):
            """List all the keys in an organization  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_keys(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiKeyList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.list_keys = _Endpoint(
            settings={
                'response_type': (ApiKeyList,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}/keys',
                'operation_id': 'list_keys',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_keys
        )

        def __list_members(
            self,
            org_name,
            **kwargs
        ):
            """List of members with their roles in a given organization  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_members(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedResultList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.list_members = _Endpoint(
            settings={
                'response_type': (PagedResultList,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}/members',
                'operation_id': 'list_members',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_members
        )

        def __remove_organization_member(
            self,
            org_name,
            username,
            **kwargs
        ):
            """Remove a user from an organization  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_organization_member(org_name, username, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name
                username (str): The username of the user or organization

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            kwargs['username'] = \
                username
            return self.call_with_http_info(**kwargs)

        self.remove_organization_member = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}/members/{username}',
                'operation_id': 'remove_organization_member',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                    'username',
                ],
                'required': [
                    'org_name',
                    'username',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                    'username': 'username',
                },
                'location_map': {
                    'org_name': 'path',
                    'username': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_organization_member
        )

        def __set_host_usernames(
            self,
            org_name,
            algorithm_host_username_updates,
            **kwargs
        ):
            """Adds a list of algorithm-id / functional-id pairs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_host_usernames(org_name, algorithm_host_username_updates, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name
                algorithm_host_username_updates (AlgorithmHostUsernameUpdates): AlgorithmHostUsername Update Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            kwargs['algorithm_host_username_updates'] = \
                algorithm_host_username_updates
            return self.call_with_http_info(**kwargs)

        self.set_host_usernames = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/organizations/{orgName}/algorithms-host-usernames',
                'operation_id': 'set_host_usernames',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                    'algorithm_host_username_updates',
                ],
                'required': [
                    'org_name',
                    'algorithm_host_username_updates',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                    'algorithm_host_username_updates':
                        (AlgorithmHostUsernameUpdates,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                    'algorithm_host_username_updates': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__set_host_usernames
        )

        def __update(
            self,
            organization_host_information,
            **kwargs
        ):
            """Update existing Organization Host Information  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update(organization_host_information, async_req=True)
            >>> result = thread.get()

            Args:
                organization_host_information (OrganizationHostInformation): Request with Organization Host Information

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_host_information'] = \
                organization_host_information
            return self.call_with_http_info(**kwargs)

        self.update = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/admin/organization_host_information',
                'operation_id': 'update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_host_information',
                ],
                'required': [
                    'organization_host_information',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_host_information':
                        (OrganizationHostInformation,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'organization_host_information': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update
        )
