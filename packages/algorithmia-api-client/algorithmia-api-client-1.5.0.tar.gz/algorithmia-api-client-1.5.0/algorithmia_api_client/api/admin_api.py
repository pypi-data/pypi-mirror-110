"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from algorithmia_api_client.api_client import ApiClient, Endpoint as _Endpoint
from algorithmia_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from algorithmia_api_client.model.algorithm_usage_result import AlgorithmUsageResult
from algorithmia_api_client.model.api_key import ApiKey
from algorithmia_api_client.model.create_organization_host_information import CreateOrganizationHostInformation
from algorithmia_api_client.model.feature_flag_list import FeatureFlagList
from algorithmia_api_client.model.feature_flag_toggle import FeatureFlagToggle
from algorithmia_api_client.model.full_usage_result import FullUsageResult
from algorithmia_api_client.model.inline_response500 import InlineResponse500
from algorithmia_api_client.model.organization_host_information import OrganizationHostInformation
from algorithmia_api_client.model.provider_info import ProviderInfo
from algorithmia_api_client.model.reservation import Reservation
from algorithmia_api_client.model.reservation_create import ReservationCreate
from algorithmia_api_client.model.scm_configuration_request_dto import ScmConfigurationRequestDto
from algorithmia_api_client.model.scm_configuration_response_dto import ScmConfigurationResponseDto
from algorithmia_api_client.model.scm_update_request import ScmUpdateRequest
from algorithmia_api_client.model.secret_provider_request import SecretProviderRequest
from algorithmia_api_client.model.user_usage_result import UserUsageResult


class AdminApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __admin_list_secret_providers(
            self,
            **kwargs
        ):
            """List secret providers as an admin user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_list_secret_providers(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProviderInfo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_list_secret_providers = _Endpoint(
            settings={
                'response_type': ([ProviderInfo],),
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider',
                'operation_id': 'admin_list_secret_providers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_list_secret_providers
        )

        def __check_secret_provider_for_jar(
            self,
            provider_id,
            **kwargs
        ):
            """Check if a .jar file has been uploaded for a secret provider  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.check_secret_provider_for_jar(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.check_secret_provider_for_jar = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/admin/plugins/secret-provider/{providerId}',
                'operation_id': 'check_secret_provider_for_jar',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__check_secret_provider_for_jar
        )

        def __create_organization_host_information(
            self,
            org_name,
            create_organization_host_information,
            **kwargs
        ):
            """Create new Organization Host Information  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_organization_host_information(org_name, create_organization_host_information, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name
                create_organization_host_information (CreateOrganizationHostInformation): Request to create new Organization Host Information mapping

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            kwargs['create_organization_host_information'] = \
                create_organization_host_information
            return self.call_with_http_info(**kwargs)

        self.create_organization_host_information = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/admin/organization_host_information/{orgName}',
                'operation_id': 'create_organization_host_information',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                    'create_organization_host_information',
                ],
                'required': [
                    'org_name',
                    'create_organization_host_information',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                    'create_organization_host_information':
                        (CreateOrganizationHostInformation,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                    'create_organization_host_information': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_organization_host_information
        )

        def __create_reservation(
            self,
            reservation_create,
            **kwargs
        ):
            """Create a new reservation  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_reservation(reservation_create, async_req=True)
            >>> result = thread.get()

            Args:
                reservation_create (ReservationCreate): Create a reservation for an algorithm

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['reservation_create'] = \
                reservation_create
            return self.call_with_http_info(**kwargs)

        self.create_reservation = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/reservations',
                'operation_id': 'create_reservation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reservation_create',
                ],
                'required': [
                    'reservation_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reservation_create':
                        (ReservationCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'reservation_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_reservation
        )

        def __create_scm(
            self,
            scm_configuration_request_dto,
            **kwargs
        ):
            """Create an SCM  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_scm(scm_configuration_request_dto, async_req=True)
            >>> result = thread.get()

            Args:
                scm_configuration_request_dto (ScmConfigurationRequestDto): Attempting to create an SCM of the type `internal` will return an `ScmDisallowedOperationError`, as this is a special class of SCM leveraged by Algorithmia directly.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmConfigurationResponseDto
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_configuration_request_dto'] = \
                scm_configuration_request_dto
            return self.call_with_http_info(**kwargs)

        self.create_scm = _Endpoint(
            settings={
                'response_type': (ScmConfigurationResponseDto,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/scms',
                'operation_id': 'create_scm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_configuration_request_dto',
                ],
                'required': [
                    'scm_configuration_request_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_configuration_request_dto':
                        (ScmConfigurationRequestDto,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'scm_configuration_request_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_scm
        )

        def __create_secret_provider(
            self,
            **kwargs
        ):
            """Create a new secret provider  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_secret_provider(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                secret_provider_request (SecretProviderRequest): Request for creating and updating secret providers. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_secret_provider = _Endpoint(
            settings={
                'response_type': (ProviderInfo,),
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider',
                'operation_id': 'create_secret_provider',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_provider_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_provider_request':
                        (SecretProviderRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'secret_provider_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_secret_provider
        )

        def __delete(
            self,
            org_name,
            **kwargs
        ):
            """Deletes the Organization Host Information for org named  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.delete = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/admin/organization_host_information/{orgName}',
                'operation_id': 'delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete
        )

        def __delete_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Delete a secret provider by its ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.delete_provider = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider/{providerId}',
                'operation_id': 'delete_provider',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_provider
        )

        def __delete_reservation(
            self,
            reservation_id,
            **kwargs
        ):
            """Delete a reservation by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_reservation(reservation_id, async_req=True)
            >>> result = thread.get()

            Args:
                reservation_id (str): The reservation to delete

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['reservation_id'] = \
                reservation_id
            return self.call_with_http_info(**kwargs)

        self.delete_reservation = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/reservations/{reservation_id}',
                'operation_id': 'delete_reservation',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'reservation_id',
                ],
                'required': [
                    'reservation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reservation_id':
                        (str,),
                },
                'attribute_map': {
                    'reservation_id': 'reservation_id',
                },
                'location_map': {
                    'reservation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_reservation
        )

        def __delete_scm(
            self,
            scm_id,
            **kwargs
        ):
            """Delete an SCM  # noqa: E501

            Note that at least one SCM must be enabled at any given time. If the SCM is currently enabled, is being used by an algorithm, or is an \"internal\" SCM, this call will fail and an appropriate error code will be returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_scm(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.delete_scm = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/scms/{scmId}',
                'operation_id': 'delete_scm',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_scm
        )

        def __feature_flag_list(
            self,
            **kwargs
        ):
            """Lists all available feature flags returned for authorized users  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.feature_flag_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                username (str): The username of the user or organization. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureFlagList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.feature_flag_list = _Endpoint(
            settings={
                'response_type': (FeatureFlagList,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/features',
                'operation_id': 'feature_flag_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                },
                'location_map': {
                    'username': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__feature_flag_list
        )

        def __get_algorithm_usage_result(
            self,
            start_date,
            end_date,
            page_size,
            **kwargs
        ):
            """Get algorithm usage information  # noqa: E501

            Returns usage information for a given date range. Paginated.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_usage_result(start_date, end_date, page_size, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): start date of query range in UTC format (2021-03-22T00:00:00.000Z)
                end_date (datetime): end date of query range in UTC format (2021-03-22T00:00:00.000Z)
                page_size (int): maximum number of results to return in one query

            Keyword Args:
                user ([str]): user or organization names. [optional]
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmUsageResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['page_size'] = \
                page_size
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_usage_result = _Endpoint(
            settings={
                'response_type': (AlgorithmUsageResult,),
                'auth': [],
                'endpoint_path': '/v1/admin/usage/algorithms',
                'operation_id': 'get_algorithm_usage_result',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'page_size',
                    'user',
                    'marker',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'page_size',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'page_size':
                        (int,),
                    'user':
                        ([str],),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'start_date',
                    'end_date': 'end_date',
                    'page_size': 'page_size',
                    'user': 'user',
                    'marker': 'marker',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'page_size': 'query',
                    'user': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                    'user': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_usage_result
        )

        def __get_by_org_name(
            self,
            org_name,
            **kwargs
        ):
            """Get Organization Host Information  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_by_org_name(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OrganizationHostInformation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.get_by_org_name = _Endpoint(
            settings={
                'response_type': (OrganizationHostInformation,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/admin/organization_host_information/{orgName}',
                'operation_id': 'get_by_org_name',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_by_org_name
        )

        def __get_full_usage(
            self,
            start_date,
            end_date,
            page_size,
            **kwargs
        ):
            """Get usage information  # noqa: E501

            Returns usage information for a given date range. Paginated.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_full_usage(start_date, end_date, page_size, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): start date of query range in UTC format (2021-03-22T00:00:00.000Z)
                end_date (datetime): end date of query range in UTC format (2021-03-22T00:00:00.000Z)
                page_size (int): maximum number of results to return in one query

            Keyword Args:
                user ([str]): user or organization names. [optional]
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FullUsageResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['page_size'] = \
                page_size
            return self.call_with_http_info(**kwargs)

        self.get_full_usage = _Endpoint(
            settings={
                'response_type': (FullUsageResult,),
                'auth': [],
                'endpoint_path': '/v1/admin/usage',
                'operation_id': 'get_full_usage',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'page_size',
                    'user',
                    'marker',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'page_size',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'page_size':
                        (int,),
                    'user':
                        ([str],),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'start_date',
                    'end_date': 'end_date',
                    'page_size': 'page_size',
                    'user': 'user',
                    'marker': 'marker',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'page_size': 'query',
                    'user': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                    'user': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_full_usage
        )

        def __get_reservations(
            self,
            **kwargs
        ):
            """Get current reservations  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_reservations(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Reservation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_reservations = _Endpoint(
            settings={
                'response_type': ([Reservation],),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/reservations',
                'operation_id': 'get_reservations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_reservations
        )

        def __get_secret_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Get a secret provider by its ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_secret_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.get_secret_provider = _Endpoint(
            settings={
                'response_type': (ProviderInfo,),
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider/{providerId}',
                'operation_id': 'get_secret_provider',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_secret_provider
        )

        def __get_user_usage_result(
            self,
            start_date,
            end_date,
            page_size,
            **kwargs
        ):
            """Get usage information grouped by user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_user_usage_result(start_date, end_date, page_size, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): start date of query range in UTC format (2021-03-22T00:00:00.000Z)
                end_date (datetime): end date of query range in UTC format (2021-03-22T00:00:00.000Z)
                page_size (int): maximum number of results to return in one query

            Keyword Args:
                user ([str]): user or organization names. [optional]
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserUsageResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['page_size'] = \
                page_size
            return self.call_with_http_info(**kwargs)

        self.get_user_usage_result = _Endpoint(
            settings={
                'response_type': (UserUsageResult,),
                'auth': [],
                'endpoint_path': '/v1/admin/usage/users',
                'operation_id': 'get_user_usage_result',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'page_size',
                    'user',
                    'marker',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'page_size',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'page_size':
                        (int,),
                    'user':
                        ([str],),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'start_date',
                    'end_date': 'end_date',
                    'page_size': 'page_size',
                    'user': 'user',
                    'marker': 'marker',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'page_size': 'query',
                    'user': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                    'user': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_user_usage_result
        )

        def __import_api_key(
            self,
            username,
            **kwargs
        ):
            """Add a specific API key for a user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.import_api_key(username, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiKey
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            return self.call_with_http_info(**kwargs)

        self.import_api_key = _Endpoint(
            settings={
                'response_type': (ApiKey,),
                'auth': [],
                'endpoint_path': '/v1/admin/users/{username}/keys',
                'operation_id': 'import_api_key',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                ],
                'required': [
                    'username',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                },
                'location_map': {
                    'username': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__import_api_key
        )

        def __set_default_scm(
            self,
            scm_id,
            **kwargs
        ):
            """Set Default SCM  # noqa: E501

            Specifies that the SCM should be the default for the cluster. Removes the designation from the previous default SCM. If the SCM in question is currently disabled, this call will fail.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_default_scm(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.set_default_scm = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/scms/{scmId}/default',
                'operation_id': 'set_default_scm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__set_default_scm
        )

        def __set_default_secret_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Make a secret provider the default secret provider  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_default_secret_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.set_default_secret_provider = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/admin/plugins/secret-provider/{providerId}/default',
                'operation_id': 'set_default_secret_provider',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__set_default_secret_provider
        )

        def __toggle_feature_flag(
            self,
            feature_name,
            feature_flag_toggle,
            **kwargs
        ):
            """Enabled/disabled a feature flag globally  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.toggle_feature_flag(feature_name, feature_flag_toggle, async_req=True)
            >>> result = thread.get()

            Args:
                feature_name (str): The name of the feature flag
                feature_flag_toggle (FeatureFlagToggle): Feature flag toggle

            Keyword Args:
                username (str): The username of the user or organization. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['feature_name'] = \
                feature_name
            kwargs['feature_flag_toggle'] = \
                feature_flag_toggle
            return self.call_with_http_info(**kwargs)

        self.toggle_feature_flag = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/features/{featureName}',
                'operation_id': 'toggle_feature_flag',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'feature_name',
                    'feature_flag_toggle',
                    'username',
                ],
                'required': [
                    'feature_name',
                    'feature_flag_toggle',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'feature_name':
                        (str,),
                    'feature_flag_toggle':
                        (FeatureFlagToggle,),
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'feature_name': 'featureName',
                    'username': 'username',
                },
                'location_map': {
                    'feature_name': 'path',
                    'feature_flag_toggle': 'body',
                    'username': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__toggle_feature_flag
        )

        def __update(
            self,
            organization_host_information,
            **kwargs
        ):
            """Update existing Organization Host Information  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update(organization_host_information, async_req=True)
            >>> result = thread.get()

            Args:
                organization_host_information (OrganizationHostInformation): Request with Organization Host Information

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['organization_host_information'] = \
                organization_host_information
            return self.call_with_http_info(**kwargs)

        self.update = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'AdminApiKeyAuth'
                ],
                'endpoint_path': '/v1/admin/organization_host_information',
                'operation_id': 'update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization_host_information',
                ],
                'required': [
                    'organization_host_information',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization_host_information':
                        (OrganizationHostInformation,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'organization_host_information': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update
        )

        def __update_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Update a secret provider by its ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                secret_provider_request (SecretProviderRequest): Request for creating and updating secret providers. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.update_provider = _Endpoint(
            settings={
                'response_type': (ProviderInfo,),
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider/{providerId}',
                'operation_id': 'update_provider',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                    'secret_provider_request',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                    'secret_provider_request':
                        (SecretProviderRequest,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                    'secret_provider_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_provider
        )

        def __update_scm(
            self,
            scm_id,
            scm_update_request,
            **kwargs
        ):
            """Update an SCM  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_scm(scm_id, scm_update_request, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID
                scm_update_request (ScmUpdateRequest): The enabled property or the scmUrls may be updated. If you attempt to disable an SCM that is currently the default, this call will fail, and you will be returned an appropriate error code. You must pass all 3 valid scmUrls or none

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmConfigurationResponseDto
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            kwargs['scm_update_request'] = \
                scm_update_request
            return self.call_with_http_info(**kwargs)

        self.update_scm = _Endpoint(
            settings={
                'response_type': (ScmConfigurationResponseDto,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/scms/{scmId}',
                'operation_id': 'update_scm',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                    'scm_update_request',
                ],
                'required': [
                    'scm_id',
                    'scm_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                    'scm_update_request':
                        (ScmUpdateRequest,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                    'scm_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_scm
        )

        def __upload_jar_for_secret_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Upload a .jar file for the target secret provider  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.upload_jar_for_secret_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.upload_jar_for_secret_provider = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/admin/plugins/secret-provider/{providerId}',
                'operation_id': 'upload_jar_for_secret_provider',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__upload_jar_for_secret_provider
        )
