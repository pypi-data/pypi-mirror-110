"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from algorithmia_api_client.api_client import ApiClient, Endpoint as _Endpoint
from algorithmia_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from algorithmia_api_client.model.inline_response2002 import InlineResponse2002
from algorithmia_api_client.model.inline_response202 import InlineResponse202
from algorithmia_api_client.model.inline_response500 import InlineResponse500
from algorithmia_api_client.model.scm_configuration_request_dto import ScmConfigurationRequestDto
from algorithmia_api_client.model.scm_configuration_response_dto import ScmConfigurationResponseDto
from algorithmia_api_client.model.scm_connection_status import ScmConnectionStatus
from algorithmia_api_client.model.scm_update_request import ScmUpdateRequest
from algorithmia_api_client.model.scm_user_o_auth_status import ScmUserOAuthStatus


class ScmApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_scm_connection(
            self,
            scm_id,
            **kwargs
        ):
            """Create SCM authorized connection  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_scm_connection(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.add_scm_connection = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/scms/{scmId}/token/connect',
                'operation_id': 'add_scm_connection',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__add_scm_connection
        )

        def __complete_scm_authorization(
            self,
            code,
            scm_id,
            **kwargs
        ):
            """Complete SCM authorization  # noqa: E501

            Applies only to SCMs which leverage an OAuth authorization flow. Once a user has successfully authorized with the SCM's authorization server, said server will call this endpoint and supply the authorization code as a query parameter.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.complete_scm_authorization(code, scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                code (str): OAuth authorization code which we will be exchanged for an access token.
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['code'] = \
                code
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.complete_scm_authorization = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/scms/{scmId}/oauth/finish',
                'operation_id': 'complete_scm_authorization',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'code',
                    'scm_id',
                ],
                'required': [
                    'code',
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'code':
                        (str,),
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'code': 'code',
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'code': 'query',
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__complete_scm_authorization
        )

        def __create_scm(
            self,
            scm_configuration_request_dto,
            **kwargs
        ):
            """Create an SCM  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_scm(scm_configuration_request_dto, async_req=True)
            >>> result = thread.get()

            Args:
                scm_configuration_request_dto (ScmConfigurationRequestDto): Attempting to create an SCM of the type `internal` will return an `ScmDisallowedOperationError`, as this is a special class of SCM leveraged by Algorithmia directly.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmConfigurationResponseDto
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_configuration_request_dto'] = \
                scm_configuration_request_dto
            return self.call_with_http_info(**kwargs)

        self.create_scm = _Endpoint(
            settings={
                'response_type': (ScmConfigurationResponseDto,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/scms',
                'operation_id': 'create_scm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_configuration_request_dto',
                ],
                'required': [
                    'scm_configuration_request_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_configuration_request_dto':
                        (ScmConfigurationRequestDto,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'scm_configuration_request_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_scm
        )

        def __delete_scm(
            self,
            scm_id,
            **kwargs
        ):
            """Delete an SCM  # noqa: E501

            Note that at least one SCM must be enabled at any given time. If the SCM is currently enabled, is being used by an algorithm, or is an \"internal\" SCM, this call will fail and an appropriate error code will be returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_scm(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.delete_scm = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/scms/{scmId}',
                'operation_id': 'delete_scm',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_scm
        )

        def __get_algorithm_scm_connection_status(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Get algorithm SCM connection status  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_scm_connection_status(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmConnectionStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_scm_connection_status = _Endpoint(
            settings={
                'response_type': (ScmConnectionStatus,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/scm/status',
                'operation_id': 'get_algorithm_scm_connection_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_scm_connection_status
        )

        def __get_scm(
            self,
            scm_id,
            **kwargs
        ):
            """Get SCM information  # noqa: E501

            Retrieve information about a single SCM (source control management system) by its ID  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_scm(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmConfigurationResponseDto
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.get_scm = _Endpoint(
            settings={
                'response_type': (ScmConfigurationResponseDto,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/scms/{scmId}',
                'operation_id': 'get_scm',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_scm
        )

        def __get_scm_status(
            self,
            scm_id,
            **kwargs
        ):
            """Get SCM authorization status  # noqa: E501

            Applies only to SCMs which leverage an OAuth authorization flow. If the calling user has completed the authorization flow for the SCM (source control management system) in question, this endpoint describes the SCM username that represents the user, as well as any organizations they have access to. If the calling user has not completed the authorization flow, we return an `authorization_status` of `unauthorized`.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_scm_status(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmUserOAuthStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.get_scm_status = _Endpoint(
            settings={
                'response_type': (ScmUserOAuthStatus,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/scms/{scmId}/oauth/status',
                'operation_id': 'get_scm_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_scm_status
        )

        def __initiate_scm_authorization(
            self,
            scm_id,
            **kwargs
        ):
            """Initiate SCM authorization  # noqa: E501

            Applies only to SCMs which leverage an OAuth authorization flow. Allows a user to begin the OAuth authorization flow for a given SCM (source control management system), thereby allowing Algorithmia to access any necessary SCM resources on their behalf, such as repositories, deploy keys, and webhooks.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.initiate_scm_authorization(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.initiate_scm_authorization = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/scms/{scmId}/oauth/start',
                'operation_id': 'initiate_scm_authorization',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__initiate_scm_authorization
        )

        def __list_scms(
            self,
            **kwargs
        ):
            """List SCMs  # noqa: E501

            List SCMs (source control management systems) configured for the Algorithmia instance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_scms(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2002
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_scms = _Endpoint(
            settings={
                'response_type': (InlineResponse2002,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/scms',
                'operation_id': 'list_scms',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_scms
        )

        def __receive_algorithm_by_id_scm_repository_event(
            self,
            algorithm_id,
            body,
            **kwargs
        ):
            """Receiver of all SCM repository events  # noqa: E501

            This endpoint is called exclusively by SCM provider who wish to inform us of changes to repositories backing algorithms.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.receive_algorithm_by_id_scm_repository_event(algorithm_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Contains information for the event that triggered this webhook

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse202
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.receive_algorithm_by_id_scm_repository_event = _Endpoint(
            settings={
                'response_type': (InlineResponse202,),
                'auth': [
                    'GithubAuth',
                    'GithubEventIdentification',
                    'XBitbucketKey',
                    'XGitlabEvent'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/scm/webhook',
                'operation_id': 'receive_algorithm_by_id_scm_repository_event',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'body',
                ],
                'required': [
                    'algorithm_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__receive_algorithm_by_id_scm_repository_event
        )

        def __receive_scm_repository_event(
            self,
            username,
            algoname,
            body,
            **kwargs
        ):
            """Receiver of all SCM repository events  # noqa: E501

            This endpoint is called exclusively by SCM provider who wish to inform us of changes to repositories backing algorithms.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.receive_scm_repository_event(username, algoname, body, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Contains information for the event that triggered this webhook

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse202
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.receive_scm_repository_event = _Endpoint(
            settings={
                'response_type': (InlineResponse202,),
                'auth': [
                    'GithubAuth',
                    'GithubEventIdentification',
                    'XBitbucketKey',
                    'XGitlabEvent'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/scm/webhook',
                'operation_id': 'receive_scm_repository_event',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'body',
                ],
                'required': [
                    'username',
                    'algoname',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__receive_scm_repository_event
        )

        def __revoke_scm_authorization(
            self,
            scm_id,
            **kwargs
        ):
            """Revoke SCM Authorization  # noqa: E501

            Applies only to SCMs which leverage an OAuth authorization flow. If the calling user has completed the authorization flow for the SCM (source control management system) in question, this endpoint prompts us to invalidate and discard said access token. After this has occurred, all algorithms created by the user will continue to function, but they will no longer be able to create algorithms backed by the SCM.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.revoke_scm_authorization(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.revoke_scm_authorization = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/scms/{scmId}/oauth/revoke',
                'operation_id': 'revoke_scm_authorization',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__revoke_scm_authorization
        )

        def __scm_token_status(
            self,
            scm_id,
            **kwargs
        ):
            """Get SCM authorization status  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.scm_token_status(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmUserOAuthStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.scm_token_status = _Endpoint(
            settings={
                'response_type': (ScmUserOAuthStatus,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/scms/{scmId}/token/status',
                'operation_id': 'scm_token_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__scm_token_status
        )

        def __set_default_scm(
            self,
            scm_id,
            **kwargs
        ):
            """Set Default SCM  # noqa: E501

            Specifies that the SCM should be the default for the cluster. Removes the designation from the previous default SCM. If the SCM in question is currently disabled, this call will fail.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_default_scm(scm_id, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            return self.call_with_http_info(**kwargs)

        self.set_default_scm = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/scms/{scmId}/default',
                'operation_id': 'set_default_scm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                ],
                'required': [
                    'scm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__set_default_scm
        )

        def __update_scm(
            self,
            scm_id,
            scm_update_request,
            **kwargs
        ):
            """Update an SCM  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_scm(scm_id, scm_update_request, async_req=True)
            >>> result = thread.get()

            Args:
                scm_id (str): SCM ID
                scm_update_request (ScmUpdateRequest): The enabled property or the scmUrls may be updated. If you attempt to disable an SCM that is currently the default, this call will fail, and you will be returned an appropriate error code. You must pass all 3 valid scmUrls or none

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmConfigurationResponseDto
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scm_id'] = \
                scm_id
            kwargs['scm_update_request'] = \
                scm_update_request
            return self.call_with_http_info(**kwargs)

        self.update_scm = _Endpoint(
            settings={
                'response_type': (ScmConfigurationResponseDto,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/admin/scms/{scmId}',
                'operation_id': 'update_scm',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'scm_id',
                    'scm_update_request',
                ],
                'required': [
                    'scm_id',
                    'scm_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scm_id':
                        (str,),
                    'scm_update_request':
                        (ScmUpdateRequest,),
                },
                'attribute_map': {
                    'scm_id': 'scmId',
                },
                'location_map': {
                    'scm_id': 'path',
                    'scm_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_scm
        )
