"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from algorithmia_api_client.api_client import ApiClient, Endpoint as _Endpoint
from algorithmia_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from algorithmia_api_client.model.connector import Connector
from algorithmia_api_client.model.connector_response import ConnectorResponse
from algorithmia_api_client.model.create_directory_request import CreateDirectoryRequest
from algorithmia_api_client.model.directory import Directory
from algorithmia_api_client.model.directory_acl_update_request import DirectoryAclUpdateRequest
from algorithmia_api_client.model.inline_response200 import InlineResponse200
from algorithmia_api_client.model.inline_response2001 import InlineResponse2001
from algorithmia_api_client.model.inline_response500 import InlineResponse500


class ConnectorsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_connector_for_user_by_id(
            self,
            username,
            **kwargs
        ):
            """Create connector for a user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_connector_for_user_by_id(username, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization

            Keyword Args:
                connector (Connector): Attempting to create a data connector for a specific user or organization. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConnectorResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            return self.call_with_http_info(**kwargs)

        self.create_connector_for_user_by_id = _Endpoint(
            settings={
                'response_type': (ConnectorResponse,),
                'auth': [
                    'AdminApiKeyAuth',
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/users/{username}/connectors',
                'operation_id': 'create_connector_for_user_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'connector',
                ],
                'required': [
                    'username',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'connector':
                        (Connector,),
                },
                'attribute_map': {
                    'username': 'username',
                },
                'location_map': {
                    'username': 'path',
                    'connector': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_connector_for_user_by_id
        )

        def __create_directory(
            self,
            connector_id,
            connector_path,
            **kwargs
        ):
            """Create new directory  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_directory(connector_id, connector_path, async_req=True)
            >>> result = thread.get()

            Args:
                connector_id (str): Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector. 
                connector_path (str): Describes the file path you wish to operate on within your chosen data connector.

            Keyword Args:
                create_directory_request (CreateDirectoryRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse200
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['connector_id'] = \
                connector_id
            kwargs['connector_path'] = \
                connector_path
            return self.call_with_http_info(**kwargs)

        self.create_directory = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/connector/{connectorId}/{connectorPath}',
                'operation_id': 'create_directory',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'connector_id',
                    'connector_path',
                    'create_directory_request',
                ],
                'required': [
                    'connector_id',
                    'connector_path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'connector_id',
                    'connector_path',
                ]
            },
            root_map={
                'validations': {
                    ('connector_id',): {

                        'regex': {
                            'pattern': r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$',  # noqa: E501
                        },
                    },
                    ('connector_path',): {

                        'regex': {
                            'pattern': r'^([^\/]+\/?)*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connector_id':
                        (str,),
                    'connector_path':
                        (str,),
                    'create_directory_request':
                        (CreateDirectoryRequest,),
                },
                'attribute_map': {
                    'connector_id': 'connectorId',
                    'connector_path': 'connectorPath',
                },
                'location_map': {
                    'connector_id': 'path',
                    'connector_path': 'path',
                    'create_directory_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_directory
        )

        def __delete_file_or_directory(
            self,
            connector_id,
            connector_path,
            **kwargs
        ):
            """Delete file or directory  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_file_or_directory(connector_id, connector_path, async_req=True)
            >>> result = thread.get()

            Args:
                connector_id (str): Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector. 
                connector_path (str): Describes the file path you wish to operate on within your chosen data connector.

            Keyword Args:
                force (bool): If you pass `true` for this parameter, will delete the directory even if it contains files.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2001
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['connector_id'] = \
                connector_id
            kwargs['connector_path'] = \
                connector_path
            return self.call_with_http_info(**kwargs)

        self.delete_file_or_directory = _Endpoint(
            settings={
                'response_type': (InlineResponse2001,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/connector/{connectorId}/{connectorPath}',
                'operation_id': 'delete_file_or_directory',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'connector_id',
                    'connector_path',
                    'force',
                ],
                'required': [
                    'connector_id',
                    'connector_path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'connector_id',
                    'connector_path',
                ]
            },
            root_map={
                'validations': {
                    ('connector_id',): {

                        'regex': {
                            'pattern': r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$',  # noqa: E501
                        },
                    },
                    ('connector_path',): {

                        'regex': {
                            'pattern': r'^([^\/]+\/?)*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connector_id':
                        (str,),
                    'connector_path':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'connector_id': 'connectorId',
                    'connector_path': 'connectorPath',
                    'force': 'force',
                },
                'location_map': {
                    'connector_id': 'path',
                    'connector_path': 'path',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_file_or_directory
        )

        def __get_file_or_directory(
            self,
            connector_id,
            connector_path,
            **kwargs
        ):
            """Get file contents or directory listing  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_file_or_directory(connector_id, connector_path, async_req=True)
            >>> result = thread.get()

            Args:
                connector_id (str): Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector. 
                connector_path (str): Describes the file path you wish to operate on within your chosen data connector.

            Keyword Args:
                acl (bool): Whether the ACL should be included in the response.. [optional] if omitted the server will use the default value of False
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Directory
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['connector_id'] = \
                connector_id
            kwargs['connector_path'] = \
                connector_path
            return self.call_with_http_info(**kwargs)

        self.get_file_or_directory = _Endpoint(
            settings={
                'response_type': (Directory,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/connector/{connectorId}/{connectorPath}',
                'operation_id': 'get_file_or_directory',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'connector_id',
                    'connector_path',
                    'acl',
                    'marker',
                ],
                'required': [
                    'connector_id',
                    'connector_path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'connector_id',
                    'connector_path',
                ]
            },
            root_map={
                'validations': {
                    ('connector_id',): {

                        'regex': {
                            'pattern': r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$',  # noqa: E501
                        },
                    },
                    ('connector_path',): {

                        'regex': {
                            'pattern': r'^([^\/]+\/?)*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connector_id':
                        (str,),
                    'connector_path':
                        (str,),
                    'acl':
                        (bool,),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'connector_id': 'connectorId',
                    'connector_path': 'connectorPath',
                    'acl': 'acl',
                    'marker': 'marker',
                },
                'location_map': {
                    'connector_id': 'path',
                    'connector_path': 'path',
                    'acl': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_file_or_directory
        )

        def __update_directory_acl(
            self,
            connector_id,
            connector_path,
            **kwargs
        ):
            """Update directory  # noqa: E501

            Updates the ACL for an Algorithmia hosted data collection. Note that, at this time, this endpoint is not supported for any other connector beyond Algorithmia's own hosted data solution.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_directory_acl(connector_id, connector_path, async_req=True)
            >>> result = thread.get()

            Args:
                connector_id (str): Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector. 
                connector_path (str): Describes the file path you wish to operate on within your chosen data connector.

            Keyword Args:
                directory_acl_update_request (DirectoryAclUpdateRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['connector_id'] = \
                connector_id
            kwargs['connector_path'] = \
                connector_path
            return self.call_with_http_info(**kwargs)

        self.update_directory_acl = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/connector/{connectorId}/{connectorPath}',
                'operation_id': 'update_directory_acl',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'connector_id',
                    'connector_path',
                    'directory_acl_update_request',
                ],
                'required': [
                    'connector_id',
                    'connector_path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'connector_id',
                    'connector_path',
                ]
            },
            root_map={
                'validations': {
                    ('connector_id',): {

                        'regex': {
                            'pattern': r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$',  # noqa: E501
                        },
                    },
                    ('connector_path',): {

                        'regex': {
                            'pattern': r'^([^\/]+\/?)*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connector_id':
                        (str,),
                    'connector_path':
                        (str,),
                    'directory_acl_update_request':
                        (DirectoryAclUpdateRequest,),
                },
                'attribute_map': {
                    'connector_id': 'connectorId',
                    'connector_path': 'connectorPath',
                },
                'location_map': {
                    'connector_id': 'path',
                    'connector_path': 'path',
                    'directory_acl_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_directory_acl
        )

        def __upload_file(
            self,
            connector_id,
            connector_path,
            **kwargs
        ):
            """Upload file  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.upload_file(connector_id, connector_path, async_req=True)
            >>> result = thread.get()

            Args:
                connector_id (str): Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector. 
                connector_path (str): Describes the file path you wish to operate on within your chosen data connector.

            Keyword Args:
                body (file_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse200
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['connector_id'] = \
                connector_id
            kwargs['connector_path'] = \
                connector_path
            return self.call_with_http_info(**kwargs)

        self.upload_file = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/connector/{connectorId}/{connectorPath}',
                'operation_id': 'upload_file',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'connector_id',
                    'connector_path',
                    'body',
                ],
                'required': [
                    'connector_id',
                    'connector_path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'connector_id',
                    'connector_path',
                ]
            },
            root_map={
                'validations': {
                    ('connector_id',): {

                        'regex': {
                            'pattern': r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$',  # noqa: E501
                        },
                    },
                    ('connector_path',): {

                        'regex': {
                            'pattern': r'^([^\/]+\/?)*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connector_id':
                        (str,),
                    'connector_path':
                        (str,),
                    'body':
                        (file_type,),
                },
                'attribute_map': {
                    'connector_id': 'connectorId',
                    'connector_path': 'connectorPath',
                },
                'location_map': {
                    'connector_id': 'path',
                    'connector_path': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__upload_file
        )

        def __verify_file_existence(
            self,
            connector_id,
            connector_path,
            **kwargs
        ):
            """Check if file exists  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.verify_file_existence(connector_id, connector_path, async_req=True)
            >>> result = thread.get()

            Args:
                connector_id (str): Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector. 
                connector_path (str): Describes the file path you wish to operate on within your chosen data connector.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['connector_id'] = \
                connector_id
            kwargs['connector_path'] = \
                connector_path
            return self.call_with_http_info(**kwargs)

        self.verify_file_existence = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/connector/{connectorId}/{connectorPath}',
                'operation_id': 'verify_file_existence',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'connector_id',
                    'connector_path',
                ],
                'required': [
                    'connector_id',
                    'connector_path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'connector_id',
                    'connector_path',
                ]
            },
            root_map={
                'validations': {
                    ('connector_id',): {

                        'regex': {
                            'pattern': r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$',  # noqa: E501
                        },
                    },
                    ('connector_path',): {

                        'regex': {
                            'pattern': r'^([^\/]+\/?)*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connector_id':
                        (str,),
                    'connector_path':
                        (str,),
                },
                'attribute_map': {
                    'connector_id': 'connectorId',
                    'connector_path': 'connectorPath',
                },
                'location_map': {
                    'connector_id': 'path',
                    'connector_path': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__verify_file_existence
        )
