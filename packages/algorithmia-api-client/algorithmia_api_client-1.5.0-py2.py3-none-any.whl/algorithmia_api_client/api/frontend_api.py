"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from algorithmia_api_client.api_client import ApiClient, Endpoint as _Endpoint
from algorithmia_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from algorithmia_api_client.model.frontend_configuration_entry import FrontendConfigurationEntry
from algorithmia_api_client.model.inline_response500 import InlineResponse500
from algorithmia_api_client.model.paged_result_list import PagedResultList


class FrontendApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __delete_config_entry(
            self,
            keyname,
            **kwargs
        ):
            """Delete a config entry represented by the provided keyname  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_config_entry(keyname, async_req=True)
            >>> result = thread.get()

            Args:
                keyname (str): The keyname for the config map entry

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['keyname'] = \
                keyname
            return self.call_with_http_info(**kwargs)

        self.delete_config_entry = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/config/frontend/{keyname}',
                'operation_id': 'delete_config_entry',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'keyname',
                ],
                'required': [
                    'keyname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'keyname',
                ]
            },
            root_map={
                'validations': {
                    ('keyname',): {
                        'max_length': 64,
                        'regex': {
                            'pattern': r'^[\w][\w-.]*[\w]$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'keyname':
                        (str,),
                },
                'attribute_map': {
                    'keyname': 'keyname',
                },
                'location_map': {
                    'keyname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_config_entry
        )

        def __get_config_entry(
            self,
            keyname,
            **kwargs
        ):
            """Get a frontend config entry represeted by the provided keyname  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_config_entry(keyname, async_req=True)
            >>> result = thread.get()

            Args:
                keyname (str): The keyname for the config map entry

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FrontendConfigurationEntry
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['keyname'] = \
                keyname
            return self.call_with_http_info(**kwargs)

        self.get_config_entry = _Endpoint(
            settings={
                'response_type': (FrontendConfigurationEntry,),
                'auth': [],
                'endpoint_path': '/v1/config/frontend/{keyname}',
                'operation_id': 'get_config_entry',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'keyname',
                ],
                'required': [
                    'keyname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'keyname',
                ]
            },
            root_map={
                'validations': {
                    ('keyname',): {
                        'max_length': 64,
                        'regex': {
                            'pattern': r'^[\w][\w-.]*[\w]$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'keyname':
                        (str,),
                },
                'attribute_map': {
                    'keyname': 'keyname',
                },
                'location_map': {
                    'keyname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_config_entry
        )

        def __get_frontend_config_entries(
            self,
            **kwargs
        ):
            """List all frontend configuration values  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_frontend_config_entries(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): The number of results to return in a single page. [optional]
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedResultList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_frontend_config_entries = _Endpoint(
            settings={
                'response_type': (PagedResultList,),
                'auth': [],
                'endpoint_path': '/v1/config/frontend',
                'operation_id': 'get_frontend_config_entries',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'marker',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'marker': 'marker',
                },
                'location_map': {
                    'limit': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_frontend_config_entries
        )

        def __update_config_entry(
            self,
            keyname,
            frontend_configuration_entry,
            **kwargs
        ):
            """Update or insert a config entry represented by the provided keyname  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_config_entry(keyname, frontend_configuration_entry, async_req=True)
            >>> result = thread.get()

            Args:
                keyname (str): The keyname for the config map entry
                frontend_configuration_entry (FrontendConfigurationEntry): Request with config entry

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FrontendConfigurationEntry
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['keyname'] = \
                keyname
            kwargs['frontend_configuration_entry'] = \
                frontend_configuration_entry
            return self.call_with_http_info(**kwargs)

        self.update_config_entry = _Endpoint(
            settings={
                'response_type': (FrontendConfigurationEntry,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/config/frontend/{keyname}',
                'operation_id': 'update_config_entry',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'keyname',
                    'frontend_configuration_entry',
                ],
                'required': [
                    'keyname',
                    'frontend_configuration_entry',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'keyname',
                ]
            },
            root_map={
                'validations': {
                    ('keyname',): {
                        'max_length': 64,
                        'regex': {
                            'pattern': r'^[\w][\w-.]*[\w]$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'keyname':
                        (str,),
                    'frontend_configuration_entry':
                        (FrontendConfigurationEntry,),
                },
                'attribute_map': {
                    'keyname': 'keyname',
                },
                'location_map': {
                    'keyname': 'path',
                    'frontend_configuration_entry': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_config_entry
        )
