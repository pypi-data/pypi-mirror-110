"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from algorithmia_api_client.api_client import ApiClient, Endpoint as _Endpoint
from algorithmia_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from algorithmia_api_client.model.algorithm_error_entry import AlgorithmErrorEntry
from algorithmia_api_client.model.algorithm_invocation_result import AlgorithmInvocationResult
from algorithmia_api_client.model.algorithm_list_result import AlgorithmListResult
from algorithmia_api_client.model.algorithm_secret_create_request import AlgorithmSecretCreateRequest
from algorithmia_api_client.model.algorithm_secret_edit_request import AlgorithmSecretEditRequest
from algorithmia_api_client.model.algorithm_secret_list import AlgorithmSecretList
from algorithmia_api_client.model.algorithm_secret_result import AlgorithmSecretResult
from algorithmia_api_client.model.build import Build
from algorithmia_api_client.model.build_logs import BuildLogs
from algorithmia_api_client.model.create_request import CreateRequest
from algorithmia_api_client.model.hash_response import HashResponse
from algorithmia_api_client.model.inline_response202 import InlineResponse202
from algorithmia_api_client.model.inline_response500 import InlineResponse500
from algorithmia_api_client.model.paged_builds_list import PagedBuildsList
from algorithmia_api_client.model.paged_versions_list import PagedVersionsList
from algorithmia_api_client.model.repository_commit_log import RepositoryCommitLog
from algorithmia_api_client.model.scm_connection_status import ScmConnectionStatus
from algorithmia_api_client.model.update_request import UpdateRequest
from algorithmia_api_client.model.version_request import VersionRequest
from algorithmia_api_client.model.version_response import VersionResponse


class AlgorithmsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __call_algorithm(
            self,
            username,
            algoname,
            algo_callable_version,
            body,
            **kwargs
        ):
            """Make a request to an algorithm  # noqa: E501

            This is the primary method to execute a request for an algorithm  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.call_algorithm(username, algoname, algo_callable_version, body, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                algo_callable_version (str): The specific version of the algorithm you wish to call. May be left blank, in which case the latest publicly published version will be used. Examples: - `latestPrivate`: Resolves to the latest version you have published privately. - `06147a5f7726757845d04d5b24b6e2b1c797fc74`: Resolves to a specific hash version of your algorithm. Useful for testing a specific algorithm build. - `1.1.1`: Fully specified semantic version. - `1.2.*`: Specified to the minor level. Will resolve to the latest publicly published version with a minor version of 1.2 - `1.*`: Specified to a major version. Will resolve to the latest publicly published version with major version 1 
                body (str):

            Keyword Args:
                timeout (float): Specifies the amount of time in seconds to wait for the algorithm to respond before returning an error. Defaults to 300 (5 min.). [optional] if omitted the server will use the default value of 300
                stdout (bool): Specifies whether data passed to `stdout` during invocation should be returned to the caller. This parameter is only respected when the caller is the algorithm owner.. [optional]
                output (str): Allows customization of the response. `raw` signfies that you wish the algorithm's response to be returned to you without a JSON wrapper, while `void` signifies that you do not wish to wait for an algorithm response. In the latter case, the call will return immediately once the invocation has begun.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmInvocationResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['algo_callable_version'] = \
                algo_callable_version
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.call_algorithm = _Endpoint(
            settings={
                'response_type': (AlgorithmInvocationResult,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/algo/{username}/{algoname}/{algoCallableVersion}',
                'operation_id': 'call_algorithm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'algo_callable_version',
                    'body',
                    'timeout',
                    'stdout',
                    'output',
                ],
                'required': [
                    'username',
                    'algoname',
                    'algo_callable_version',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'output',
                ],
                'validation': [
                    'username',
                    'algo_callable_version',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                    ('algo_callable_version',): {

                        'regex': {
                            'pattern': r'(^$|latestPrivate|^[a-z0-9]?$|^\d(\.(\d+|\*))?(\.(\d+|\*))?$)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('output',): {

                        "RAW": "raw",
                        "VOID": "void"
                    },
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'algo_callable_version':
                        (str,),
                    'body':
                        (str,),
                    'timeout':
                        (float,),
                    'stdout':
                        (bool,),
                    'output':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'algo_callable_version': 'algoCallableVersion',
                    'timeout': 'timeout',
                    'stdout': 'stdout',
                    'output': 'output',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'algo_callable_version': 'path',
                    'body': 'body',
                    'timeout': 'query',
                    'stdout': 'query',
                    'output': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/text',
                    'application/octet-stream'
                ]
            },
            api_client=api_client,
            callable=__call_algorithm
        )

        def __call_algorithm_by_id(
            self,
            algorithm_id,
            algo_callable_version,
            body,
            **kwargs
        ):
            """Make a request to an algorithm by immutable identifier  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.call_algorithm_by_id(algorithm_id, algo_callable_version, body, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                algo_callable_version (str): The specific version of the algorithm you wish to call. May be left blank, in which case the latest publicly published version will be used. Examples: - `latestPrivate`: Resolves to the latest version you have published privately. - `06147a5f7726757845d04d5b24b6e2b1c797fc74`: Resolves to a specific hash version of your algorithm. Useful for testing a specific algorithm build. - `1.1.1`: Fully specified semantic version. - `1.2.*`: Specified to the minor level. Will resolve to the latest publicly published version with a minor version of 1.2 - `1.*`: Specified to a major version. Will resolve to the latest publicly published version with major version 1 
                body (str):

            Keyword Args:
                timeout (float): Specifies the amount of time in seconds to wait for the algorithm to respond before returning an error. Defaults to 300 (5 min.). [optional] if omitted the server will use the default value of 300
                stdout (bool): Specifies whether data passed to `stdout` during invocation should be returned to the caller. This parameter is only respected when the caller is the algorithm owner.. [optional]
                output (str): Allows customization of the response. `raw` signfies that you wish the algorithm's response to be returned to you without a JSON wrapper, while `void` signifies that you do not wish to wait for an algorithm response. In the latter case, the call will return immediately once the invocation has begun.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmInvocationResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['algo_callable_version'] = \
                algo_callable_version
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.call_algorithm_by_id = _Endpoint(
            settings={
                'response_type': (AlgorithmInvocationResult,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/algo/{algorithmId}/{algoCallableVersion}',
                'operation_id': 'call_algorithm_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'algo_callable_version',
                    'body',
                    'timeout',
                    'stdout',
                    'output',
                ],
                'required': [
                    'algorithm_id',
                    'algo_callable_version',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'output',
                ],
                'validation': [
                    'algorithm_id',
                    'algo_callable_version',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                    ('algo_callable_version',): {

                        'regex': {
                            'pattern': r'(^$|latestPrivate|^[a-z0-9]?$|^\d(\.(\d+|\*))?(\.(\d+|\*))?$)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('output',): {

                        "RAW": "raw",
                        "VOID": "void"
                    },
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'algo_callable_version':
                        (str,),
                    'body':
                        (str,),
                    'timeout':
                        (float,),
                    'stdout':
                        (bool,),
                    'output':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'algo_callable_version': 'algoCallableVersion',
                    'timeout': 'timeout',
                    'stdout': 'stdout',
                    'output': 'output',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'algo_callable_version': 'path',
                    'body': 'body',
                    'timeout': 'query',
                    'stdout': 'query',
                    'output': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/text',
                    'application/octet-stream'
                ]
            },
            api_client=api_client,
            callable=__call_algorithm_by_id
        )

        def __commit_log_for_repository(
            self,
            username,
            algoname,
            **kwargs
        ):
            """List commits for a repository  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.commit_log_for_repository(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                since (str): The first commit SHA of the repository to list in the commits. This is included in the result list.. [optional]
                until (str): The last commit SHA of the repository to list in the commits. This is included in the result list.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RepositoryCommitLog
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.commit_log_for_repository = _Endpoint(
            settings={
                'response_type': (RepositoryCommitLog,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/log',
                'operation_id': 'commit_log_for_repository',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'since',
                    'until',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'since':
                        (str,),
                    'until':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'since': 'since',
                    'until': 'until',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'since': 'query',
                    'until': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__commit_log_for_repository
        )

        def __compile_algorithm(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Compile algorithm  # noqa: E501

            Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.compile_algorithm(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.compile_algorithm = _Endpoint(
            settings={
                'response_type': (VersionResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/compile',
                'operation_id': 'compile_algorithm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__compile_algorithm
        )

        def __compile_algorithm_by_id(
            self,
            algorithm_id,
            body,
            **kwargs
        ):
            """Compile algorithm  # noqa: E501

            Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing. For BitBucket it's necessary to provide additional information in the request body.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.compile_algorithm_by_id(algorithm_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                body (str): A build request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.compile_algorithm_by_id = _Endpoint(
            settings={
                'response_type': (VersionResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/compile',
                'operation_id': 'compile_algorithm_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'body',
                ],
                'required': [
                    'algorithm_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__compile_algorithm_by_id
        )

        def __create_algorithm(
            self,
            username,
            create_request,
            **kwargs
        ):
            """Create algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_algorithm(username, create_request, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                create_request (CreateRequest): Algorithm Create Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                HashResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['create_request'] = \
                create_request
            return self.call_with_http_info(**kwargs)

        self.create_algorithm = _Endpoint(
            settings={
                'response_type': (HashResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}',
                'operation_id': 'create_algorithm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'create_request',
                ],
                'required': [
                    'username',
                    'create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'create_request':
                        (CreateRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                },
                'location_map': {
                    'username': 'path',
                    'create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_algorithm
        )

        def __create_algorithm_secret(
            self,
            algorithm_id,
            algorithm_secret_create_request,
            **kwargs
        ):
            """Create a secret for the given algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_algorithm_secret(algorithm_id, algorithm_secret_create_request, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                algorithm_secret_create_request (AlgorithmSecretCreateRequest): Algorithm Secret Create Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmSecretResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['algorithm_secret_create_request'] = \
                algorithm_secret_create_request
            return self.call_with_http_info(**kwargs)

        self.create_algorithm_secret = _Endpoint(
            settings={
                'response_type': (AlgorithmSecretResult,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/secrets',
                'operation_id': 'create_algorithm_secret',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'algorithm_secret_create_request',
                ],
                'required': [
                    'algorithm_id',
                    'algorithm_secret_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'algorithm_secret_create_request':
                        (AlgorithmSecretCreateRequest,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'algorithm_secret_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_algorithm_secret
        )

        def __delete_algorithm(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Delete algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_algorithm(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.delete_algorithm = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}',
                'operation_id': 'delete_algorithm',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_algorithm
        )

        def __delete_algorithm_secret(
            self,
            algorithm_id,
            secret_id,
            **kwargs
        ):
            """Delete a secret for the given algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_algorithm_secret(algorithm_id, secret_id, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                secret_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['secret_id'] = \
                secret_id
            return self.call_with_http_info(**kwargs)

        self.delete_algorithm_secret = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/secrets/{secretId}',
                'operation_id': 'delete_algorithm_secret',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'secret_id',
                ],
                'required': [
                    'algorithm_id',
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                    'secret_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                    ('secret_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'secret_id':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'secret_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_algorithm_secret
        )

        def __edit_algorithm_secret(
            self,
            algorithm_id,
            secret_id,
            algorithm_secret_edit_request,
            **kwargs
        ):
            """Edit a secret for the given algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.edit_algorithm_secret(algorithm_id, secret_id, algorithm_secret_edit_request, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                secret_id (str): Secret UUID
                algorithm_secret_edit_request (AlgorithmSecretEditRequest): Algorithm Secret Edit Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmSecretResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['secret_id'] = \
                secret_id
            kwargs['algorithm_secret_edit_request'] = \
                algorithm_secret_edit_request
            return self.call_with_http_info(**kwargs)

        self.edit_algorithm_secret = _Endpoint(
            settings={
                'response_type': (AlgorithmSecretResult,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/secrets/{secretId}',
                'operation_id': 'edit_algorithm_secret',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'secret_id',
                    'algorithm_secret_edit_request',
                ],
                'required': [
                    'algorithm_id',
                    'secret_id',
                    'algorithm_secret_edit_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                    'secret_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                    ('secret_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'secret_id':
                        (str,),
                    'algorithm_secret_edit_request':
                        (AlgorithmSecretEditRequest,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'secret_id': 'path',
                    'algorithm_secret_edit_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__edit_algorithm_secret
        )

        def __get_algorithm(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Get algorithm metadata  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.get_algorithm = _Endpoint(
            settings={
                'response_type': (VersionResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}',
                'operation_id': 'get_algorithm',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm
        )

        def __get_algorithm_build_by_id(
            self,
            username,
            algoname,
            buildid,
            **kwargs
        ):
            """Get individual algorithm build by ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_build_by_id(username, algoname, buildid, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                buildid (str): Build ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Build
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['buildid'] = \
                buildid
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_build_by_id = _Endpoint(
            settings={
                'response_type': (Build,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/builds/{buildid}',
                'operation_id': 'get_algorithm_build_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'buildid',
                ],
                'required': [
                    'username',
                    'algoname',
                    'buildid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'buildid':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'buildid': 'buildid',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'buildid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_build_by_id
        )

        def __get_algorithm_build_logs(
            self,
            username,
            algoname,
            buildid,
            **kwargs
        ):
            """Get algorithm build logs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_build_logs(username, algoname, buildid, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                buildid (str): Build ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildLogs
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['buildid'] = \
                buildid
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_build_logs = _Endpoint(
            settings={
                'response_type': (BuildLogs,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/builds/{buildid}/logs',
                'operation_id': 'get_algorithm_build_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'buildid',
                ],
                'required': [
                    'username',
                    'algoname',
                    'buildid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'buildid':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'buildid': 'buildid',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'buildid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_build_logs
        )

        def __get_algorithm_builds(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Get algorithm builds  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_builds(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                limit (int): The number of results to return in a single page. [optional]
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedBuildsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_builds = _Endpoint(
            settings={
                'response_type': (PagedBuildsList,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/builds',
                'operation_id': 'get_algorithm_builds',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'limit',
                    'marker',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'limit':
                        (int,),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'limit': 'limit',
                    'marker': 'marker',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'limit': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_builds
        )

        def __get_algorithm_by_id(
            self,
            username,
            **kwargs
        ):
            """Get algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_by_id(username, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_by_id = _Endpoint(
            settings={
                'response_type': (VersionResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}',
                'operation_id': 'get_algorithm_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                ],
                'required': [
                    'username',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                },
                'location_map': {
                    'username': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_by_id
        )

        def __get_algorithm_by_id_build_by_id(
            self,
            algorithm_id,
            buildid,
            **kwargs
        ):
            """Get individual algorithm build by ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_by_id_build_by_id(algorithm_id, buildid, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                buildid (str): Build ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Build
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['buildid'] = \
                buildid
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_by_id_build_by_id = _Endpoint(
            settings={
                'response_type': (Build,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/builds/{buildid}',
                'operation_id': 'get_algorithm_by_id_build_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'buildid',
                ],
                'required': [
                    'algorithm_id',
                    'buildid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'buildid':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'buildid': 'buildid',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'buildid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_by_id_build_by_id
        )

        def __get_algorithm_by_id_build_logs(
            self,
            algorithm_id,
            buildid,
            **kwargs
        ):
            """Get algorithm build logs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_by_id_build_logs(algorithm_id, buildid, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                buildid (str): Build ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildLogs
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['buildid'] = \
                buildid
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_by_id_build_logs = _Endpoint(
            settings={
                'response_type': (BuildLogs,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/builds/{buildid}/logs',
                'operation_id': 'get_algorithm_by_id_build_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'buildid',
                ],
                'required': [
                    'algorithm_id',
                    'buildid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'buildid':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'buildid': 'buildid',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'buildid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_by_id_build_logs
        )

        def __get_algorithm_by_id_builds(
            self,
            algorithm_id,
            **kwargs
        ):
            """Get algorithm builds  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_by_id_builds(algorithm_id, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID

            Keyword Args:
                limit (int): The number of results to return in a single page. [optional]
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedBuildsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_by_id_builds = _Endpoint(
            settings={
                'response_type': (PagedBuildsList,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/builds',
                'operation_id': 'get_algorithm_by_id_builds',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'limit',
                    'marker',
                ],
                'required': [
                    'algorithm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'limit':
                        (int,),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'limit': 'limit',
                    'marker': 'marker',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'limit': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_by_id_builds
        )

        def __get_algorithm_errors_by_algorithm_id(
            self,
            algorithm_id,
            **kwargs
        ):
            """Get algorithm errors  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_errors_by_algorithm_id(algorithm_id, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmErrorEntry
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_errors_by_algorithm_id = _Endpoint(
            settings={
                'response_type': (AlgorithmErrorEntry,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/errors',
                'operation_id': 'get_algorithm_errors_by_algorithm_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                ],
                'required': [
                    'algorithm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_errors_by_algorithm_id
        )

        def __get_algorithm_errors_by_algorithm_name(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Get algorithm errors  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_errors_by_algorithm_name(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmErrorEntry
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_errors_by_algorithm_name = _Endpoint(
            settings={
                'response_type': (AlgorithmErrorEntry,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/errors',
                'operation_id': 'get_algorithm_errors_by_algorithm_name',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_errors_by_algorithm_name
        )

        def __get_algorithm_errors_by_user_id(
            self,
            user_id,
            **kwargs
        ):
            """Get algorithm errors for a given user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_errors_by_user_id(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): The user's ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmErrorEntry
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_errors_by_user_id = _Endpoint(
            settings={
                'response_type': (AlgorithmErrorEntry,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/users/{userId}/errors',
                'operation_id': 'get_algorithm_errors_by_user_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'user_id',
                ]
            },
            root_map={
                'validations': {
                    ('user_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'userId',
                },
                'location_map': {
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_errors_by_user_id
        )

        def __get_algorithm_hash_version(
            self,
            username,
            algoname,
            algohash,
            **kwargs
        ):
            """Get Algorithm by Hash Version  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_hash_version(username, algoname, algohash, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                algohash (str): Algorithm hash

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['algohash'] = \
                algohash
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_hash_version = _Endpoint(
            settings={
                'response_type': (VersionResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/versions/{algohash}',
                'operation_id': 'get_algorithm_hash_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'algohash',
                ],
                'required': [
                    'username',
                    'algoname',
                    'algohash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'algohash':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'algohash': 'algohash',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'algohash': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_hash_version
        )

        def __get_algorithm_scm_connection_status(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Get algorithm SCM connection status  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_scm_connection_status(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmConnectionStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_scm_connection_status = _Endpoint(
            settings={
                'response_type': (ScmConnectionStatus,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/scm/status',
                'operation_id': 'get_algorithm_scm_connection_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_scm_connection_status
        )

        def __get_algorithm_secrets(
            self,
            algorithm_id,
            **kwargs
        ):
            """Get all secrets for an Algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_secrets(algorithm_id, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmSecretList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_secrets = _Endpoint(
            settings={
                'response_type': (AlgorithmSecretList,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/secrets',
                'operation_id': 'get_algorithm_secrets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                ],
                'required': [
                    'algorithm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_secrets
        )

        def __get_algorithm_versions(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Get algorithm versions  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_versions(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                limit (int): The number of results to return in a single page. [optional]
                marker (str): Encoded pagination cursor. [optional]
                published (bool): Algorithm version's published state. [optional]
                callable (bool): Algorithm version's callable visibility. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedVersionsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_versions = _Endpoint(
            settings={
                'response_type': (PagedVersionsList,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/versions',
                'operation_id': 'get_algorithm_versions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'limit',
                    'marker',
                    'published',
                    'callable',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'limit':
                        (int,),
                    'marker':
                        (str,),
                    'published':
                        (bool,),
                    'callable':
                        (bool,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'limit': 'limit',
                    'marker': 'marker',
                    'published': 'published',
                    'callable': 'callable',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'limit': 'query',
                    'marker': 'query',
                    'published': 'query',
                    'callable': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_versions
        )

        def __get_utility_algorithms(
            self,
            org_name,
            **kwargs
        ):
            """List of utility algorithms  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_utility_algorithms(org_name, async_req=True)
            >>> result = thread.get()

            Args:
                org_name (str): Organization name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmListResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['org_name'] = \
                org_name
            return self.call_with_http_info(**kwargs)

        self.get_utility_algorithms = _Endpoint(
            settings={
                'response_type': (AlgorithmListResult,),
                'auth': [],
                'endpoint_path': '/v1/organizations/{orgName}/utility-algorithms',
                'operation_id': 'get_utility_algorithms',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_name',
                ],
                'required': [
                    'org_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_name',
                ]
            },
            root_map={
                'validations': {
                    ('org_name',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_name':
                        (str,),
                },
                'attribute_map': {
                    'org_name': 'orgName',
                },
                'location_map': {
                    'org_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_utility_algorithms
        )

        def __list_algorithms_for_user(
            self,
            username,
            **kwargs
        ):
            """List algorithms for a user or organization  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_algorithms_for_user(username, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmListResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            return self.call_with_http_info(**kwargs)

        self.list_algorithms_for_user = _Endpoint(
            settings={
                'response_type': (AlgorithmListResult,),
                'auth': [
                    'AdminApiKeyAuth',
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/users/{username}/algorithms',
                'operation_id': 'list_algorithms_for_user',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                ],
                'required': [
                    'username',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                },
                'location_map': {
                    'username': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_algorithms_for_user
        )

        def __publish_algorithm(
            self,
            username,
            algoname,
            version_request,
            **kwargs
        ):
            """Publish an algorithm's last successful build  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.publish_algorithm(username, algoname, version_request, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                version_request (VersionRequest): Publish Version Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['version_request'] = \
                version_request
            return self.call_with_http_info(**kwargs)

        self.publish_algorithm = _Endpoint(
            settings={
                'response_type': (VersionResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/versions',
                'operation_id': 'publish_algorithm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'version_request',
                ],
                'required': [
                    'username',
                    'algoname',
                    'version_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'version_request':
                        (VersionRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'version_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__publish_algorithm
        )

        def __publish_algorithm_by_id(
            self,
            algorithm_id,
            version_request,
            **kwargs
        ):
            """Publish an algorithm's last successful build  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.publish_algorithm_by_id(algorithm_id, version_request, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                version_request (VersionRequest): Publish Version Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['version_request'] = \
                version_request
            return self.call_with_http_info(**kwargs)

        self.publish_algorithm_by_id = _Endpoint(
            settings={
                'response_type': (VersionResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/versions',
                'operation_id': 'publish_algorithm_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'version_request',
                ],
                'required': [
                    'algorithm_id',
                    'version_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'version_request':
                        (VersionRequest,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'version_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__publish_algorithm_by_id
        )

        def __receive_algorithm_by_id_scm_repository_event(
            self,
            algorithm_id,
            body,
            **kwargs
        ):
            """Receiver of all SCM repository events  # noqa: E501

            This endpoint is called exclusively by SCM provider who wish to inform us of changes to repositories backing algorithms.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.receive_algorithm_by_id_scm_repository_event(algorithm_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Contains information for the event that triggered this webhook

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse202
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.receive_algorithm_by_id_scm_repository_event = _Endpoint(
            settings={
                'response_type': (InlineResponse202,),
                'auth': [
                    'GithubAuth',
                    'GithubEventIdentification',
                    'XBitbucketKey',
                    'XGitlabEvent'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/scm/webhook',
                'operation_id': 'receive_algorithm_by_id_scm_repository_event',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'body',
                ],
                'required': [
                    'algorithm_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__receive_algorithm_by_id_scm_repository_event
        )

        def __receive_scm_repository_event(
            self,
            username,
            algoname,
            body,
            **kwargs
        ):
            """Receiver of all SCM repository events  # noqa: E501

            This endpoint is called exclusively by SCM provider who wish to inform us of changes to repositories backing algorithms.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.receive_scm_repository_event(username, algoname, body, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Contains information for the event that triggered this webhook

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse202
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.receive_scm_repository_event = _Endpoint(
            settings={
                'response_type': (InlineResponse202,),
                'auth': [
                    'GithubAuth',
                    'GithubEventIdentification',
                    'XBitbucketKey',
                    'XGitlabEvent'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/scm/webhook',
                'operation_id': 'receive_scm_repository_event',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'body',
                ],
                'required': [
                    'username',
                    'algoname',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__receive_scm_repository_event
        )

        def __update_algorithm(
            self,
            username,
            algoname,
            update_request,
            **kwargs
        ):
            """Update algorithm settings  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_algorithm(username, algoname, update_request, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                update_request (UpdateRequest): Algorithm Update Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                HashResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['update_request'] = \
                update_request
            return self.call_with_http_info(**kwargs)

        self.update_algorithm = _Endpoint(
            settings={
                'response_type': (HashResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}',
                'operation_id': 'update_algorithm',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'update_request',
                ],
                'required': [
                    'username',
                    'algoname',
                    'update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'update_request':
                        (UpdateRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_algorithm
        )

        def __update_algorithm_by_id(
            self,
            username,
            update_request,
            **kwargs
        ):
            """Update algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_algorithm_by_id(username, update_request, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                update_request (UpdateRequest): Algorithm Update Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                HashResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['update_request'] = \
                update_request
            return self.call_with_http_info(**kwargs)

        self.update_algorithm_by_id = _Endpoint(
            settings={
                'response_type': (HashResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}',
                'operation_id': 'update_algorithm_by_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'update_request',
                ],
                'required': [
                    'username',
                    'update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'update_request':
                        (UpdateRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                },
                'location_map': {
                    'username': 'path',
                    'update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_algorithm_by_id
        )
