"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from algorithmia_api_client.api_client import ApiClient, Endpoint as _Endpoint
from algorithmia_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from algorithmia_api_client.model.build import Build
from algorithmia_api_client.model.build_logs import BuildLogs
from algorithmia_api_client.model.inline_response500 import InlineResponse500
from algorithmia_api_client.model.paged_builds_list import PagedBuildsList
from algorithmia_api_client.model.repository_commit_log import RepositoryCommitLog
from algorithmia_api_client.model.scm_connection_status import ScmConnectionStatus
from algorithmia_api_client.model.version_response import VersionResponse


class BuildsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __commit_log_for_repository(
            self,
            username,
            algoname,
            **kwargs
        ):
            """List commits for a repository  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.commit_log_for_repository(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                since (str): The first commit SHA of the repository to list in the commits. This is included in the result list.. [optional]
                until (str): The last commit SHA of the repository to list in the commits. This is included in the result list.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RepositoryCommitLog
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.commit_log_for_repository = _Endpoint(
            settings={
                'response_type': (RepositoryCommitLog,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/log',
                'operation_id': 'commit_log_for_repository',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'since',
                    'until',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'since':
                        (str,),
                    'until':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'since': 'since',
                    'until': 'until',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'since': 'query',
                    'until': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__commit_log_for_repository
        )

        def __compile_algorithm(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Compile algorithm  # noqa: E501

            Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.compile_algorithm(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.compile_algorithm = _Endpoint(
            settings={
                'response_type': (VersionResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/compile',
                'operation_id': 'compile_algorithm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__compile_algorithm
        )

        def __compile_algorithm_by_id(
            self,
            algorithm_id,
            body,
            **kwargs
        ):
            """Compile algorithm  # noqa: E501

            Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing. For BitBucket it's necessary to provide additional information in the request body.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.compile_algorithm_by_id(algorithm_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                body (str): A build request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.compile_algorithm_by_id = _Endpoint(
            settings={
                'response_type': (VersionResponse,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/compile',
                'operation_id': 'compile_algorithm_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'body',
                ],
                'required': [
                    'algorithm_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__compile_algorithm_by_id
        )

        def __get_algorithm_build_by_id(
            self,
            username,
            algoname,
            buildid,
            **kwargs
        ):
            """Get individual algorithm build by ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_build_by_id(username, algoname, buildid, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                buildid (str): Build ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Build
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['buildid'] = \
                buildid
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_build_by_id = _Endpoint(
            settings={
                'response_type': (Build,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/builds/{buildid}',
                'operation_id': 'get_algorithm_build_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'buildid',
                ],
                'required': [
                    'username',
                    'algoname',
                    'buildid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'buildid':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'buildid': 'buildid',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'buildid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_build_by_id
        )

        def __get_algorithm_build_logs(
            self,
            username,
            algoname,
            buildid,
            **kwargs
        ):
            """Get algorithm build logs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_build_logs(username, algoname, buildid, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name
                buildid (str): Build ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildLogs
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            kwargs['buildid'] = \
                buildid
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_build_logs = _Endpoint(
            settings={
                'response_type': (BuildLogs,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/builds/{buildid}/logs',
                'operation_id': 'get_algorithm_build_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'buildid',
                ],
                'required': [
                    'username',
                    'algoname',
                    'buildid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'buildid':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'buildid': 'buildid',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'buildid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_build_logs
        )

        def __get_algorithm_builds(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Get algorithm builds  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_builds(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                limit (int): The number of results to return in a single page. [optional]
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedBuildsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_builds = _Endpoint(
            settings={
                'response_type': (PagedBuildsList,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/builds',
                'operation_id': 'get_algorithm_builds',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                    'limit',
                    'marker',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                    'limit':
                        (int,),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                    'limit': 'limit',
                    'marker': 'marker',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                    'limit': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_builds
        )

        def __get_algorithm_by_id_build_by_id(
            self,
            algorithm_id,
            buildid,
            **kwargs
        ):
            """Get individual algorithm build by ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_by_id_build_by_id(algorithm_id, buildid, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                buildid (str): Build ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Build
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['buildid'] = \
                buildid
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_by_id_build_by_id = _Endpoint(
            settings={
                'response_type': (Build,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/builds/{buildid}',
                'operation_id': 'get_algorithm_by_id_build_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'buildid',
                ],
                'required': [
                    'algorithm_id',
                    'buildid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'buildid':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'buildid': 'buildid',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'buildid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_by_id_build_by_id
        )

        def __get_algorithm_by_id_build_logs(
            self,
            algorithm_id,
            buildid,
            **kwargs
        ):
            """Get algorithm build logs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_by_id_build_logs(algorithm_id, buildid, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                buildid (str): Build ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildLogs
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['buildid'] = \
                buildid
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_by_id_build_logs = _Endpoint(
            settings={
                'response_type': (BuildLogs,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/builds/{buildid}/logs',
                'operation_id': 'get_algorithm_by_id_build_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'buildid',
                ],
                'required': [
                    'algorithm_id',
                    'buildid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'buildid':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'buildid': 'buildid',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'buildid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_by_id_build_logs
        )

        def __get_algorithm_by_id_builds(
            self,
            algorithm_id,
            **kwargs
        ):
            """Get algorithm builds  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_by_id_builds(algorithm_id, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID

            Keyword Args:
                limit (int): The number of results to return in a single page. [optional]
                marker (str): Encoded pagination cursor. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedBuildsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_by_id_builds = _Endpoint(
            settings={
                'response_type': (PagedBuildsList,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/builds',
                'operation_id': 'get_algorithm_by_id_builds',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'limit',
                    'marker',
                ],
                'required': [
                    'algorithm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'limit':
                        (int,),
                    'marker':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'limit': 'limit',
                    'marker': 'marker',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'limit': 'query',
                    'marker': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_by_id_builds
        )

        def __get_algorithm_scm_connection_status(
            self,
            username,
            algoname,
            **kwargs
        ):
            """Get algorithm SCM connection status  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_scm_connection_status(username, algoname, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): The username of the user or organization
                algoname (str): Algorithm name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScmConnectionStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['algoname'] = \
                algoname
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_scm_connection_status = _Endpoint(
            settings={
                'response_type': (ScmConnectionStatus,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{username}/{algoname}/scm/status',
                'operation_id': 'get_algorithm_scm_connection_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'algoname',
                ],
                'required': [
                    'username',
                    'algoname',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {
                        'max_length': 30,
                        'regex': {
                            'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'algoname':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'algoname': 'algoname',
                },
                'location_map': {
                    'username': 'path',
                    'algoname': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_scm_connection_status
        )
