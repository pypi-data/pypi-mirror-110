"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from algorithmia_api_client.api_client import ApiClient, Endpoint as _Endpoint
from algorithmia_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from algorithmia_api_client.model.algorithm_secret_create_request import AlgorithmSecretCreateRequest
from algorithmia_api_client.model.algorithm_secret_edit_request import AlgorithmSecretEditRequest
from algorithmia_api_client.model.algorithm_secret_list import AlgorithmSecretList
from algorithmia_api_client.model.algorithm_secret_result import AlgorithmSecretResult
from algorithmia_api_client.model.inline_response500 import InlineResponse500
from algorithmia_api_client.model.provider_info import ProviderInfo
from algorithmia_api_client.model.secret_provider_request import SecretProviderRequest


class SecretsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __admin_list_secret_providers(
            self,
            **kwargs
        ):
            """List secret providers as an admin user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_list_secret_providers(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProviderInfo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_list_secret_providers = _Endpoint(
            settings={
                'response_type': ([ProviderInfo],),
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider',
                'operation_id': 'admin_list_secret_providers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_list_secret_providers
        )

        def __check_secret_provider_for_jar(
            self,
            provider_id,
            **kwargs
        ):
            """Check if a .jar file has been uploaded for a secret provider  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.check_secret_provider_for_jar(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.check_secret_provider_for_jar = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/admin/plugins/secret-provider/{providerId}',
                'operation_id': 'check_secret_provider_for_jar',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__check_secret_provider_for_jar
        )

        def __create_algorithm_secret(
            self,
            algorithm_id,
            algorithm_secret_create_request,
            **kwargs
        ):
            """Create a secret for the given algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_algorithm_secret(algorithm_id, algorithm_secret_create_request, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                algorithm_secret_create_request (AlgorithmSecretCreateRequest): Algorithm Secret Create Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmSecretResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['algorithm_secret_create_request'] = \
                algorithm_secret_create_request
            return self.call_with_http_info(**kwargs)

        self.create_algorithm_secret = _Endpoint(
            settings={
                'response_type': (AlgorithmSecretResult,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/secrets',
                'operation_id': 'create_algorithm_secret',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'algorithm_secret_create_request',
                ],
                'required': [
                    'algorithm_id',
                    'algorithm_secret_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'algorithm_secret_create_request':
                        (AlgorithmSecretCreateRequest,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'algorithm_secret_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_algorithm_secret
        )

        def __create_secret_provider(
            self,
            **kwargs
        ):
            """Create a new secret provider  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_secret_provider(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                secret_provider_request (SecretProviderRequest): Request for creating and updating secret providers. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_secret_provider = _Endpoint(
            settings={
                'response_type': (ProviderInfo,),
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider',
                'operation_id': 'create_secret_provider',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_provider_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_provider_request':
                        (SecretProviderRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'secret_provider_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_secret_provider
        )

        def __delete_algorithm_secret(
            self,
            algorithm_id,
            secret_id,
            **kwargs
        ):
            """Delete a secret for the given algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_algorithm_secret(algorithm_id, secret_id, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                secret_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['secret_id'] = \
                secret_id
            return self.call_with_http_info(**kwargs)

        self.delete_algorithm_secret = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/secrets/{secretId}',
                'operation_id': 'delete_algorithm_secret',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'secret_id',
                ],
                'required': [
                    'algorithm_id',
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                    'secret_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                    ('secret_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'secret_id':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'secret_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_algorithm_secret
        )

        def __delete_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Delete a secret provider by its ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.delete_provider = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider/{providerId}',
                'operation_id': 'delete_provider',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_provider
        )

        def __edit_algorithm_secret(
            self,
            algorithm_id,
            secret_id,
            algorithm_secret_edit_request,
            **kwargs
        ):
            """Edit a secret for the given algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.edit_algorithm_secret(algorithm_id, secret_id, algorithm_secret_edit_request, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID
                secret_id (str): Secret UUID
                algorithm_secret_edit_request (AlgorithmSecretEditRequest): Algorithm Secret Edit Request

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmSecretResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            kwargs['secret_id'] = \
                secret_id
            kwargs['algorithm_secret_edit_request'] = \
                algorithm_secret_edit_request
            return self.call_with_http_info(**kwargs)

        self.edit_algorithm_secret = _Endpoint(
            settings={
                'response_type': (AlgorithmSecretResult,),
                'auth': [
                    'AdminApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/secrets/{secretId}',
                'operation_id': 'edit_algorithm_secret',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                    'secret_id',
                    'algorithm_secret_edit_request',
                ],
                'required': [
                    'algorithm_id',
                    'secret_id',
                    'algorithm_secret_edit_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                    'secret_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                    ('secret_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                    'secret_id':
                        (str,),
                    'algorithm_secret_edit_request':
                        (AlgorithmSecretEditRequest,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                    'secret_id': 'path',
                    'algorithm_secret_edit_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__edit_algorithm_secret
        )

        def __get_algorithm_secrets(
            self,
            algorithm_id,
            **kwargs
        ):
            """Get all secrets for an Algorithm  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_algorithm_secrets(algorithm_id, async_req=True)
            >>> result = thread.get()

            Args:
                algorithm_id (str): Algorithm UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AlgorithmSecretList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm_id'] = \
                algorithm_id
            return self.call_with_http_info(**kwargs)

        self.get_algorithm_secrets = _Endpoint(
            settings={
                'response_type': (AlgorithmSecretList,),
                'auth': [
                    'ApiKeyAuth',
                    'CookieAuth'
                ],
                'endpoint_path': '/v1/algorithms/{algorithmId}/secrets',
                'operation_id': 'get_algorithm_secrets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm_id',
                ],
                'required': [
                    'algorithm_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'algorithm_id',
                ]
            },
            root_map={
                'validations': {
                    ('algorithm_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'algorithm_id':
                        (str,),
                },
                'attribute_map': {
                    'algorithm_id': 'algorithmId',
                },
                'location_map': {
                    'algorithm_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_algorithm_secrets
        )

        def __get_secret_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Get a secret provider by its ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_secret_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.get_secret_provider = _Endpoint(
            settings={
                'response_type': (ProviderInfo,),
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider/{providerId}',
                'operation_id': 'get_secret_provider',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_secret_provider
        )

        def __list_secret_providers(
            self,
            **kwargs
        ):
            """List all secret providers  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_secret_providers(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProviderInfo]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_secret_providers = _Endpoint(
            settings={
                'response_type': ([ProviderInfo],),
                'auth': [],
                'endpoint_path': '/v1/secret-provider',
                'operation_id': 'list_secret_providers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_secret_providers
        )

        def __set_default_secret_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Make a secret provider the default secret provider  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_default_secret_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.set_default_secret_provider = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/admin/plugins/secret-provider/{providerId}/default',
                'operation_id': 'set_default_secret_provider',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__set_default_secret_provider
        )

        def __update_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Update a secret provider by its ID  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                secret_provider_request (SecretProviderRequest): Request for creating and updating secret providers. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProviderInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.update_provider = _Endpoint(
            settings={
                'response_type': (ProviderInfo,),
                'auth': [],
                'endpoint_path': '/v1/admin/secret-provider/{providerId}',
                'operation_id': 'update_provider',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                    'secret_provider_request',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                    'secret_provider_request':
                        (SecretProviderRequest,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                    'secret_provider_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_provider
        )

        def __upload_jar_for_secret_provider(
            self,
            provider_id,
            **kwargs
        ):
            """Upload a .jar file for the target secret provider  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.upload_jar_for_secret_provider(provider_id, async_req=True)
            >>> result = thread.get()

            Args:
                provider_id (str): Secret UUID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['provider_id'] = \
                provider_id
            return self.call_with_http_info(**kwargs)

        self.upload_jar_for_secret_provider = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v1/admin/plugins/secret-provider/{providerId}',
                'operation_id': 'upload_jar_for_secret_provider',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'provider_id',
                ],
                'required': [
                    'provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'provider_id',
                ]
            },
            root_map={
                'validations': {
                    ('provider_id',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provider_id':
                        (str,),
                },
                'attribute_map': {
                    'provider_id': 'providerId',
                },
                'location_map': {
                    'provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__upload_jar_for_secret_provider
        )
