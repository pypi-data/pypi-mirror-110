"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from algorithmia_api_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from algorithmia_api_client.model.event_listener import EventListener
    from algorithmia_api_client.model.event_listener_source_type import EventListenerSourceType
    from algorithmia_api_client.model.frontend_configuration_entry import FrontendConfigurationEntry
    from algorithmia_api_client.model.organization import Organization
    from algorithmia_api_client.model.organization_member import OrganizationMember
    from algorithmia_api_client.model.user import User
    globals()['EventListener'] = EventListener
    globals()['EventListenerSourceType'] = EventListenerSourceType
    globals()['FrontendConfigurationEntry'] = FrontendConfigurationEntry
    globals()['Organization'] = Organization
    globals()['OrganizationMember'] = OrganizationMember
    globals()['User'] = User


class PagedResultListObjects(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('role',): {
            'OWNER': "owner",
            'MEMBER': "member",
            'INVITED': "invited",
            'UNKNOWN': "unknown",
        },
    }

    validations = {
        ('id',): {
            'max_length': 36,
            'min_length': 36,
        },
        ('listener_owner',): {
            'max_length': 255,
        },
        ('org_url',): {
            'max_length': 100,
        },
        ('fullname',): {
            'max_length': 100,
        },
        ('company_name',): {
            'max_length': 100,
        },
        ('company_role',): {
            'max_length': 200,
        },
        ('source_uri',): {
            'max_length': 255,
        },
        ('algo_name',): {
            'max_length': 255,
        },
        ('algo_owner',): {
            'max_length': 255,
        },
        ('algo_version',): {
            'max_length': 255,
        },
        ('credentials',): {
            'max_length': 255,
        },
        ('org_name',): {
            'max_length': 30,
            'regex': {
                'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
            },
        },
        ('org_email',): {
            'max_length': 100,
            'regex': {
                'pattern': r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,6}$',  # noqa: E501
            },
        },
        ('org_label',): {
            'max_length': 100,
        },
        ('org_contact_name',): {
            'max_length': 100,
        },
        ('type_id',): {
            'max_length': 100,
        },
        ('username',): {
            'max_length': 30,
            'regex': {
                'pattern': r'^[a-zA-Z][a-zA-Z0-9_]*$',  # noqa: E501
            },
        },
        ('email',): {
            'max_length': 100,
            'regex': {
                'pattern': r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,6}$',  # noqa: E501
            },
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'algo_timeout_seconds': (int,),  # noqa: E501
            'listener_owner': (str,),  # noqa: E501
            'created_at': (float,),  # noqa: E501
            'updated_at': (float,),  # noqa: E501
            'org_url': (str,),  # noqa: E501
            'self_link': (str,),  # noqa: E501
            'stripe_customer_id': (str,),  # noqa: E501
            'owner_ids': ([str],),  # noqa: E501
            'fullname': (str,),  # noqa: E501
            'company_name': (str,),  # noqa: E501
            'company_role': (str,),  # noqa: E501
            'source_type': (EventListenerSourceType,),  # noqa: E501
            'source_uri': (str,),  # noqa: E501
            'algo_name': (str,),  # noqa: E501
            'algo_owner': (str,),  # noqa: E501
            'algo_version': (str,),  # noqa: E501
            'credentials': (str,),  # noqa: E501
            'keyname': (str,),  # noqa: E501
            'value': (str,),  # noqa: E501
            'resource_type': (str,),  # noqa: E501
            'org_name': (str,),  # noqa: E501
            'org_email': (str,),  # noqa: E501
            'org_label': (str,),  # noqa: E501
            'org_contact_name': (str,),  # noqa: E501
            'type_id': (str,),  # noqa: E501
            'username': (str,),  # noqa: E501
            'role': (str,),  # noqa: E501
            'user_link': (str,),  # noqa: E501
            'email': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'algo_timeout_seconds': 'algoTimeoutSeconds',  # noqa: E501
        'listener_owner': 'listenerOwner',  # noqa: E501
        'created_at': 'created_at',  # noqa: E501
        'updated_at': 'updated_at',  # noqa: E501
        'org_url': 'org_url',  # noqa: E501
        'self_link': 'self_link',  # noqa: E501
        'stripe_customer_id': 'stripe_customer_id',  # noqa: E501
        'owner_ids': 'owner_ids',  # noqa: E501
        'fullname': 'fullname',  # noqa: E501
        'company_name': 'company_name',  # noqa: E501
        'company_role': 'company_role',  # noqa: E501
        'source_type': 'sourceType',  # noqa: E501
        'source_uri': 'sourceURI',  # noqa: E501
        'algo_name': 'algoName',  # noqa: E501
        'algo_owner': 'algoOwner',  # noqa: E501
        'algo_version': 'algoVersion',  # noqa: E501
        'credentials': 'credentials',  # noqa: E501
        'keyname': 'keyname',  # noqa: E501
        'value': 'value',  # noqa: E501
        'resource_type': 'resource_type',  # noqa: E501
        'org_name': 'org_name',  # noqa: E501
        'org_email': 'org_email',  # noqa: E501
        'org_label': 'org_label',  # noqa: E501
        'org_contact_name': 'org_contact_name',  # noqa: E501
        'type_id': 'type_id',  # noqa: E501
        'username': 'username',  # noqa: E501
        'role': 'role',  # noqa: E501
        'user_link': 'user_link',  # noqa: E501
        'email': 'email',  # noqa: E501
    }

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """PagedResultListObjects - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): [optional]  # noqa: E501
            algo_timeout_seconds (int): [optional] if omitted the server will use the default value of 420  # noqa: E501
            listener_owner (str): [optional]  # noqa: E501
            created_at (float): [optional]  # noqa: E501
            updated_at (float): [optional]  # noqa: E501
            org_url (str): [optional]  # noqa: E501
            self_link (str): [optional]  # noqa: E501
            stripe_customer_id (str): [optional]  # noqa: E501
            owner_ids ([str]): [optional]  # noqa: E501
            fullname (str): [optional]  # noqa: E501
            company_name (str): [optional]  # noqa: E501
            company_role (str): [optional]  # noqa: E501
            source_type (EventListenerSourceType): [optional]  # noqa: E501
            source_uri (str): [optional]  # noqa: E501
            algo_name (str): [optional]  # noqa: E501
            algo_owner (str): [optional]  # noqa: E501
            algo_version (str): [optional]  # noqa: E501
            credentials (str): [optional]  # noqa: E501
            keyname (str): [optional]  # noqa: E501
            value (str): [optional]  # noqa: E501
            resource_type (str): [optional]  # noqa: E501
            org_name (str): [optional]  # noqa: E501
            org_email (str): [optional]  # noqa: E501
            org_label (str): [optional]  # noqa: E501
            org_contact_name (str): [optional]  # noqa: E501
            type_id (str): [optional]  # noqa: E501
            username (str): [optional]  # noqa: E501
            role (str): [optional]  # noqa: E501
            user_link (str): [optional]  # noqa: E501
            email (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
        }
        model_args = {}
        model_args.update(required_args)
        model_args.update(kwargs)
        composed_info = validate_get_composed_info(
            constant_args, model_args, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        unused_args = composed_info[3]

        for var_name, var_value in required_args.items():
            setattr(self, var_name, var_value)
        for var_name, var_value in kwargs.items():
            if var_name in unused_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        not self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
          ],
          'oneOf': [
              EventListener,
              FrontendConfigurationEntry,
              Organization,
              OrganizationMember,
              User,
          ],
        }
