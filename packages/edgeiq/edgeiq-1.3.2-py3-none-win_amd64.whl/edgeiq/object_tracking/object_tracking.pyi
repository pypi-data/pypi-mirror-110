from enum import Enum
from typing import Any, Optional

DEFAULT_DEREGISTER_FRAMES: int
DEFAULT_MAX_DISTANCE: int

class TrackingState(Enum):
    DETECT: str = ...
    REDETECT: str = ...

class TrackablePrediction:
    prediction: Any = ...
    tracker: Any = ...
    state: Any = ...
    def __init__(self, prediction: Any) -> None: ...

class TrackerAlgorithm:
    def __init__(self, deregister_frames: Any, max_distance: Any, enter_cb: Any, exit_cb: Any, found_handler: Optional[Any] = ..., disappeared_handler: Optional[Any] = ...) -> None: ...
    def update(self, predictions: Any, **trackable_kwargs: Any): ...

class CorrelationTracker:
    def __init__(self, max_objects: Optional[Any] = ..., deregister_frames: Any = ..., max_distance: Any = ..., enter_cb: Optional[Any] = ..., exit_cb: Optional[Any] = ...) -> None: ...
    def update(self, predictions: Any, image: Any): ...

class CentroidTracker:
    def __init__(self, deregister_frames: Any = ..., max_distance: Any = ..., enter_cb: Optional[Any] = ..., exit_cb: Optional[Any] = ...) -> None: ...
    def update(self, predictions: Any): ...

def match_detections_with_centroid(id_objects: Any, new_predictions: Any, max_distance: Any): ...
