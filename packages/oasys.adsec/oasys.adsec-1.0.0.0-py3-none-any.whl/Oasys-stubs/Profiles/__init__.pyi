#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from Oasys.AdSec import IWarning
from Oasys.Collections import IList
from UnitsNet import Angle, Area, Length


# noinspection PyPep8Naming
class IProfile(metaclass=ABCMeta):
    """Defines a cross-section's shape, size and orientation.
    
    See "~/articles/glossary.html#profileprofile""Glossary/see
    """

    @property
    def IsReflectedZ(self) -> bool:
        """
        """
        pass

    @IsReflectedZ.setter
    def IsReflectedZ(self, value: bool) -> None: ...

    @property
    def IsReflectedY(self) -> bool:
        """
        """
        pass

    @IsReflectedY.setter
    def IsReflectedY(self, value: bool) -> None: ...

    @property
    def Rotation(self) -> Angle:
        """The angle at which the profile is rotated.
        """
        pass

    @Rotation.setter
    def Rotation(self, value: Angle) -> None: ...

    @abstractmethod
    def Area(self) -> Area:
        """Calculates the profile's area.
        """
        pass

    @abstractmethod
    def Description(self) -> str:
        """Converts the profile's geometry into a string description.
        """
        pass

    @abstractmethod
    def Validate(self) -> IList[IWarning]:
        """Checks that the definition of the profile is consistent.
        A profile must be valid for its containing section to be analysed.

        :return: Warnings observed from the profile definition.
        :rtype: IList[IWarning]
        """
        pass


# noinspection PyPep8Naming
class IPoint(metaclass=ABCMeta):
    """A 2D vertex in the yz-plane.
    """

    @property
    def Z(self) -> Length:
        """
        """
        pass

    @Z.setter
    def Z(self, value: Length) -> None: ...

    @property
    def Y(self) -> Length:
        """
        """
        pass

    @Y.setter
    def Y(self, value: Length) -> None: ...

    @staticmethod
    def Create(y: Length, z: Length) -> IPoint:
        """Creates a new "IPoint" from
        "Property Y" and
        "Property Z".

        :param y: The local Y coordinate.
        :type y: Length
        :param z: The local Z coordinate.
        :type z: Length
        :return: Point with the specified local Y and Z coordinates.
        :rtype: IPoint
        """
        pass


# noinspection PyPep8Naming
class IAngleProfile(IProfile, metaclass=ABCMeta):
    """Defines an angle profile.
    <center><svg style="border:1px solid black" height="350" width="350"><rect x="125" y="250" width="150" height="50" fill="#8da0cb" /><rect x="125" y="50" width="30" height="200" fill="#fc8d62" /><path class="profile-outline" d="M125 50 L155 50 L155 250 L275 250 L275 300 L125 300 Z" /><line class="profile-line" x1="125" y1="250" x2="155" y2="250" stroke-dasharray="4" /><circle cx="220" cy="275" r="4" fill="black" /><line class="profile-line" x1="220" y1="275" x2="220" y2="200" /><text class="profile-label" x="220" y="190" fill="black" text-anchor="middle">Flange</text><circle cx="140" cy="100" r="4" fill="black" /><line class="profile-line" x1="140" y1="100" x2="220" y2="100" /><text class="profile-label" x="230" y="105" fill="black">Web</text><line class="profile-line" x1="100" y1="50" x2="100" y2="300" /><line class="profile-line" x1="90" y1="50" x2="110" y2="50" /><line class="profile-line" x1="90" y1="300" x2="110" y2="300" /><text class="profile-label" x="-175" y="90" fill="black" text-anchor="middle" transform="rotate(-90)">Depth</text><circle class="profile-origin" cx="125" cy="300" r="6" /><text class="profile-label" x="130" y="325" fill="black">Origin</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Web(self) -> IWeb:
        """
        """
        pass

    @Web.setter
    def Web(self, value: IWeb) -> None: ...

    @property
    def Flange(self) -> IFlange:
        """
        """
        pass

    @Flange.setter
    def Flange(self, value: IFlange) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flange: IFlange, web: IWeb) -> IAngleProfile:
        """Creates a new "IAngleProfile" profile from its
        "Property Depth",
        "Property Flange" and
        "Property Web".
        <param name="depth">Defines the profile's depth.</param><param name="flange">Defines the profile's flange.</param><param name="web">Defines the profile's web.</param>

        :return: Angle profile with the specified dimensions.
        :rtype: IAngleProfile
        """
        pass


# noinspection PyPep8Naming
class IFlange(metaclass=ABCMeta):
    """A flange used in profiles.
    <center><svg style="border:1px solid black" height="350" width="350"><rect class="profile-line" x="75" y="150" width="200" height="50" fill="#8da0cb" /><line class="profile-line" x1="55" y1="150" x2="55" y2="200" /><line class="profile-line" x1="45" y1="150" x2="65" y2="150" /><line class="profile-line" x1="45" y1="200" x2="65" y2="200" /><text class="profile-label" x="-175" y="35" fill="black" text-anchor="middle" transform="rotate(-90)">Thickness</text><line class="profile-line" x1="75" y1="230" x2="275" y2="230" /><line class="profile-line" x1="75" y1="220" x2="75" y2="240" /><line class="profile-line" x1="275" y1="220" x2="275" y2="240" /><text class="profile-label" x="175" y="250" fill="black" text-anchor="middle">Width</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Thickness(self) -> Length:
        """
        """
        pass

    @Thickness.setter
    def Thickness(self, value: Length) -> None: ...

    @property
    def Width(self) -> Length:
        """
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @staticmethod
    def Create(width: Length, thickness: Length) -> IFlange:
        """Creates a new "IFlange" from its
        "Property Width" and
        "Property Thickness".

        :param width: Defines the flange width.
        :type width: Length
        :param thickness: Defines the flange thickness.
        :type thickness: Length
        :return: Flange with the specified dimensions.
        :rtype: IFlange
        """
        pass


# noinspection PyPep8Naming
class IWeb(metaclass=ABCMeta):
    """Defines a profile web. Thickness only is defined. Depth is defined by the profile.
    """

    @property
    def BottomThickness(self) -> Length:
        """
        """
        pass

    @property
    def TopThickness(self) -> Length:
        """
        """
        pass


# noinspection PyPep8Naming
class ICatalogueProfile(IProfile, metaclass=ABCMeta):
    """Defines a catalogue section profile from its unique string identifier.
    
    
    See "~/articles/glossary.html#catalogue-profilecatalogue-profile""Glossary/see
    """

    @staticmethod
    def Create(description: str) -> ICatalogueProfile:
        """Creates a new "ICatalogueProfile" profile from its unique string description.
        Valid strings can be found using the section profile helper dialog within the AdSec application.

        :param description: The profile's description.
        :type description: str
        :return: A catalogue section profile with the specified description.
        :rtype: ICatalogueProfile
        """
        pass


# noinspection PyPep8Naming
class IChannelProfile(IProfile, metaclass=ABCMeta):
    """Defines a channel profile.
    <center><svg style="border:1px solid black" height="350" width="350"><rect x="125" y="250" width="150" height="50" fill="#8da0cb" /><rect x="125" y="50" width="150" height="50" fill="#8da0cb" /><rect x="125" y="100" width="30" height="150" fill="#fc8d62" /><path class="profile-outline" d="M125 50 L275 50 L275 100 L155 100 L155 250 L275 250 L275 300 L125 300 Z" /><line class="profile-line" x1="125" y1="250" x2="155" y2="250" stroke-dasharray="4" /><line class="profile-line" x1="125" y1="100" x2="155" y2="100" stroke-dasharray="4" /><circle cx="250" cy="275" r="4" fill="black" /><circle cx="250" cy="75" r="4" fill="black" /><line class="profile-line" x1="250" y1="275" x2="250" y2="200" /><line class="profile-line" x1="250" y1="75" x2="250" y2="175" /><text class="profile-label" x="250" y="190" fill="black" text-anchor="middle">Flanges</text><circle cx="140" cy="150" r="4" fill="black" /><line class="profile-line" x1="140" y1="150" x2="190" y2="150" /><text class="profile-label" x="200" y="155" fill="black">Web</text><line class="profile-line" x1="100" y1="50" x2="100" y2="175" /><line class="profile-line" x1="90" y1="50" x2="110" y2="50" /><line class="profile-line" x1="90" y1="175" x2="110" y2="175" /><text class="profile-label" x="-115" y="90" fill="black" text-anchor="middle" transform="rotate(-90)">0.5 &amp;times; Depth</text><line class="profile-line" x1="300" y1="50" x2="300" y2="300" /><line class="profile-line" x1="290" y1="50" x2="310" y2="50" /><line class="profile-line" x1="290" y1="300" x2="310" y2="300" /><text class="profile-label" x="-175" y="320" fill="black" text-anchor="middle" transform="rotate(-90)">Depth</text><circle class="profile-origin" cx="125" cy="175" r="6" /><text class="profile-label" x="110" y="200" fill="black" text-anchor="end">Origin</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Web(self) -> IWebConstant:
        """
        """
        pass

    @Web.setter
    def Web(self, value: IWebConstant) -> None: ...

    @property
    def Flanges(self) -> IFlange:
        """
        """
        pass

    @Flanges.setter
    def Flanges(self, value: IFlange) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flanges: IFlange, web: IWebConstant) -> IChannelProfile:
        """Creates a new "IChannelProfile" profile from its
        "Property Depth",
        "Property Flanges" and
        "Property Web"param name="depth"Defines the profile's depth./paramparam name="flanges"Defines the profile's flanges./paramparam name="web"Defines the profile's web which has constant thickness./param

        :return: Channel profile with the specified dimensions.
        :rtype: IChannelProfile
        """
        pass


# noinspection PyPep8Naming
class IWebConstant(IWeb, metaclass=ABCMeta):
    """A constant web used in profiles. A constant web has the same thickness along its depth.
    <center><svg style="border:1px solid black" height="350" width="350"><rect class="profile-line" x="150" y="75" width="50" height="200" fill="#fc8d62" /><line class="profile-line" x1="150" y1="290" x2="200" y2="290" /><line class="profile-line" x1="150" y1="280" x2="150" y2="300" /><line class="profile-line" x1="200" y1="280" x2="200" y2="300" /><text class="profile-label" x="175" y="320" fill="black" text-anchor="middle">Thickness</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Thickness(self) -> Length:
        """
        """
        pass

    @Thickness.setter
    def Thickness(self, value: Length) -> None: ...

    @staticmethod
    def Create(thickness: Length) -> IWebConstant:
        """Creates a new "IWebConstant" from its
        "Property Thickness".

        :param thickness: Defines the web's thickness.
        :type thickness: Length
        :return: Constant thickness web with the specified dimension.
        :rtype: IWebConstant
        """
        pass


# noinspection PyPep8Naming
class ICircleHollowProfile(IProfile, metaclass=ABCMeta):
    """Defines a hollow circular section profile from
    "Property Diameter" and
    "Property WallThickness".br /centersvg style="border:1px solid black" height="350" width="350"circle class="profile-line" cx="175" cy="175" r="100" fill="#8da0cb" /circle class="profile-line" cx="175" cy="175" r="80" fill="white" /line class="profile-line" x1="60" y1="75" x2="60" y2="275" /line class="profile-line" x1="50" y1="75" x2="140" y2="75" /line class="profile-line" x1="50" y1="275" x2="140" y2="275" /text class="profile-label" x="-175" y="50" fill="black" text-anchor="middle" transform="rotate(-90)"Diameter/textline class="profile-line" x1="175" y1="255" x2="175" y2="295" /text class="profile-label" x="175" y="310" fill="black" text-anchor="middle"Wall Thickness/textcircle class="profile-origin" cx="175" cy="175" r="6" /text class="profile-label" x="175" y="165" fill="black" text-anchor="start"Origin/textstyle
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def WallThickness(self) -> Length:
        """
        """
        pass

    @WallThickness.setter
    def WallThickness(self, value: Length) -> None: ...

    @property
    def Diameter(self) -> Length:
        """
        """
        pass

    @Diameter.setter
    def Diameter(self, value: Length) -> None: ...

    @staticmethod
    def Create(diameter: Length, wallThickness: Length) -> ICircleHollowProfile:
        """Creates a new "ICircleHollowProfile" profile from its
        "Property Diameter" and
        "Property WallThickness".

        :param diameter: Defines the profile's diameter.
        :type diameter: Length
        :param wallThickness: Defines the profile's wall thickness.
        :type wallThickness: Length
        :return: Hollow circle profile with the specified dimensions.
        :rtype: ICircleHollowProfile
        """
        pass


# noinspection PyPep8Naming
class ICircleProfile(IProfile, metaclass=ABCMeta):
    """Defines a circular section profile from "Property Diameter".br /centersvg style="border:1px solid black" height="350" width="350"circle class="profile-line" cx="175" cy="175" r="100" fill="#8da0cb" /line class="profile-line" x1="60" y1="75" x2="60" y2="275" /line class="profile-line" x1="50" y1="75" x2="140" y2="75" /line class="profile-line" x1="50" y1="275" x2="140" y2="275" /text class="profile-label" x="-175" y="50" fill="black" text-anchor="middle" transform="rotate(-90)"Diameter/textcircle class="profile-origin" cx="175" cy="175" r="6" /text class="profile-label" x="175" y="165" fill="black" text-anchor="start"Origin/textstyle
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Diameter(self) -> Length:
        """
        """
        pass

    @Diameter.setter
    def Diameter(self, value: Length) -> None: ...

    @staticmethod
    def Create(diameter: Length) -> ICircleProfile:
        """Creates a new "ICircleProfile" profile from its "Property Diameter".

        :param diameter: Defines the profile's diameter.
        :type diameter: Length
        :return: Circle profile with the specified diameter.
        :rtype: ICircleProfile
        """
        pass


# noinspection PyPep8Naming
class ICruciformSymmetricalProfile(IProfile, metaclass=ABCMeta):
    """A cruciform section profile.
    <center><svg style="border:1px solid black" height="350" width="350"><rect x="160" y="50" width="30" height="250" fill="#fc8d62" /><rect x="75" y="150" width="200" height="50" fill="#8da0cb" /><path class="profile-outline" d="M160 50 L190 50 L190 150 L275 150 L275 200 L190 200 L190 300 L160 300 L160 200 L75 200 L75 150 L160 150 Z" /><rect class="profile-line" x="160" y="150" width="30" height="50" fill="#fc8d62" fill-opacity="0.3" stroke-dasharray="4" /><circle cx="240" cy="175" r="4" fill="black" /><line class="profile-line" x1="240" y1="175" x2="240" y2="230" /><text class="profile-label" x="240" y="245" fill="black" text-anchor="middle">Flange</text><circle cx="175" cy="100" r="4" fill="black" /><line class="profile-line" x1="175" y1="100" x2="220" y2="100" /><text class="profile-label" x="230" y="105" fill="black">Web</text><line class="profile-line" x1="55" y1="50" x2="55" y2="300" /><line class="profile-line" x1="45" y1="50" x2="150" y2="50" /><line class="profile-line" x1="45" y1="300" x2="150" y2="300" /><text class="profile-label" x="-175" y="45" fill="black" text-anchor="middle" transform="rotate(-90)">Depth</text><circle class="profile-origin" cx="175" cy="175" r="6" /><text class="profile-label" x="155" y="175" fill="black" text-anchor="end">Origin</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Web(self) -> IWebConstant:
        """
        """
        pass

    @Web.setter
    def Web(self, value: IWebConstant) -> None: ...

    @property
    def Flange(self) -> IFlange:
        """
        """
        pass

    @Flange.setter
    def Flange(self, value: IFlange) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flange: IFlange, web: IWebConstant) -> ICruciformSymmetricalProfile:
        """Creates a new "ICruciformSymmetricalProfile" profile from its
        "Property Depth",
        "Property Flange" and
        "Property Web""/&gt;.

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flange: Defines the profile's flange (the y axis leg of the cruciform).
        :type flange: IFlange
        :param web: Defines the profile's web (z axis leg thickness of the cruciform).
        :type web: IWebConstant
        :return: Cruciform profile with the specified dimensions.
        :rtype: ICruciformSymmetricalProfile
        """
        pass


# noinspection PyPep8Naming
class IEllipseHollowProfile(IProfile, metaclass=ABCMeta):
    """Defines a hollow elliptical section profile from
    "Property Depth",
    "Property Width" and
    "Property WallThickness".br /centersvg style="border:1px solid black" height="350" width="350"ellipse class="profile-line" cx="175" cy="175" rx="70" ry="100" fill="#8da0cb" /ellipse class="profile-line" cx="175" cy="175" rx="50" ry="80" fill="white" /line class="profile-line" x1="80" y1="75" x2="80" y2="275" /line class="profile-line" x1="70" y1="75" x2="140" y2="75" /line class="profile-line" x1="70" y1="275" x2="140" y2="275" /text class="profile-label" x="-175" y="70" fill="black" text-anchor="middle" transform="rotate(-90)"Depth/textline class="profile-line" x1="105" y1="300" x2="245" y2="300" /line class="profile-line" x1="105" y1="220" x2="105" y2="310" /line class="profile-line" x1="245" y1="220" x2="245" y2="310" /text class="profile-label" x="175" y="320" fill="black" text-anchor="middle"Width/textline class="profile-line" x1="175" y1="55" x2="175" y2="95" /text class="profile-label" x="175" y="50" fill="black" text-anchor="middle"Wall Thickness/textcircle class="profile-origin" cx="175" cy="175" r="6" /text class="profile-label" x="175" y="165" fill="black" text-anchor="start"Origin/textstyle
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def WallThickness(self) -> Length:
        """
        """
        pass

    @WallThickness.setter
    def WallThickness(self, value: Length) -> None: ...

    @property
    def Width(self) -> Length:
        """
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length, wallThickness: Length) -> IEllipseHollowProfile:
        """Creates a new "IEllipseHollowProfile" profile from its
        "Property Depth",
        "Property Width" and
        "Property WallThickness".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param width: Defines the profile's width.
        :type width: Length
        :param wallThickness: Defines the profile's wall thickness.
        :type wallThickness: Length
        :return: Hollow ellipse profile with the specified dimensions.
        :rtype: IEllipseHollowProfile
        """
        pass


# noinspection PyPep8Naming
class IEllipseProfile(IProfile, metaclass=ABCMeta):
    """Defines an elliptical section profile from
    "Property Depth" and
    "Property Width".br /centersvg style="border:1px solid black" height="350" width="350"ellipse class="profile-line" cx="175" cy="175" rx="70" ry="100" fill="#8da0cb" /line class="profile-line" x1="80" y1="75" x2="80" y2="275" /line class="profile-line" x1="70" y1="75" x2="140" y2="75" /line class="profile-line" x1="70" y1="275" x2="140" y2="275" /text class="profile-label" x="-175" y="70" fill="black" text-anchor="middle" transform="rotate(-90)"Depth/textline class="profile-line" x1="105" y1="300" x2="245" y2="300" /line class="profile-line" x1="105" y1="220" x2="105" y2="310" /line class="profile-line" x1="245" y1="220" x2="245" y2="310" /text class="profile-label" x="175" y="320" fill="black" text-anchor="middle"Width/textcircle class="profile-origin" cx="175" cy="175" r="6" /text class="profile-label" x="175" y="165" fill="black" text-anchor="start"Origin/textstyle
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Width(self) -> Length:
        """
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length) -> IEllipseProfile:
        """Creates a new "IEllipseProfile" profile from its
        "None Depth" and
        "None Width".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param width: Defines the profile's width.
        :type width: Length
        :return: Ellipse profile with the specified dimensions.
        :rtype: IEllipseProfile
        """
        pass


# noinspection PyPep8Naming
class IGeneralCProfile(IProfile, metaclass=ABCMeta):
    """A general c section profile.
    """

    @property
    def Thickness(self) -> Length:
        """
        """
        pass

    @Thickness.setter
    def Thickness(self, value: Length) -> None: ...

    @property
    def Lip(self) -> Length:
        """
        """
        pass

    @Lip.setter
    def Lip(self, value: Length) -> None: ...

    @property
    def FlangeWidth(self) -> Length:
        """
        """
        pass

    @FlangeWidth.setter
    def FlangeWidth(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flangeWidth: Length, lip: Length, thickness: Length) -> IGeneralCProfile:
        """Creates a new "IGeneralCProfile" profile from its
        "Property Depth",
        "Property FlangeWidth",
        "Property Lip" and
        "Property Thickness".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flangeWidth: Defines the profile's flange width.
        :type flangeWidth: Length
        :param lip: Defines the profile's lip.
        :type lip: Length
        :param thickness: Defines the profile's thickness.
        :type thickness: Length
        """
        pass


# noinspection PyPep8Naming
class IGeneralZProfile(IProfile, metaclass=ABCMeta):
    """A general z section profile.
    """

    @property
    def Thickness(self) -> Length:
        """
        """
        pass

    @Thickness.setter
    def Thickness(self, value: Length) -> None: ...

    @property
    def BottomLip(self) -> Length:
        """
        """
        pass

    @BottomLip.setter
    def BottomLip(self, value: Length) -> None: ...

    @property
    def TopLip(self) -> Length:
        """
        """
        pass

    @TopLip.setter
    def TopLip(self, value: Length) -> None: ...

    @property
    def BottomFlangeWidth(self) -> Length:
        """
        """
        pass

    @BottomFlangeWidth.setter
    def BottomFlangeWidth(self, value: Length) -> None: ...

    @property
    def TopFlangeWidth(self) -> Length:
        """
        """
        pass

    @TopFlangeWidth.setter
    def TopFlangeWidth(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, topFlangeWidth: Length, bottomFlangeWidth: Length, topLip: Length, bottomLip: Length, thickness: Length) -> IGeneralZProfile:
        """Creates a new "IGeneralZProfile" profile from its
        "Property Depth",
        "Property TopFlangeWidth",
        "Property BottomFlangeWidth",
        "Property TopLip",
        "Property BottomLip" and
        "Property Thickness".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param topFlangeWidth: Defines the profile's top flange width.
        :type topFlangeWidth: Length
        :param bottomFlangeWidth: Defines the profile's bottom flange width.
        :type bottomFlangeWidth: Length
        :param topLip: Defines the profile's top lip.
        :type topLip: Length
        :param bottomLip: Defines the profile's bottom lip.
        :type bottomLip: Length
        :param thickness: Defines the profile's thickness.
        :type thickness: Length
        """
        pass


# noinspection PyPep8Naming
class IIBeamProfile(IProfile, metaclass=ABCMeta):
    """An IBeam section profile.
    """

    @property
    def BottomFlange(self) -> IFlange:
        """
        """
        pass

    @property
    def TopFlange(self) -> IFlange:
        """
        """
        pass

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...


# noinspection PyPep8Naming
class IIBeamAsymmetricalProfile(IIBeamProfile, IProfile, metaclass=ABCMeta):
    """An IBeam asymmetrical profile.
    <center><svg style="border:1px solid black" height="350" width="350"><rect x="100" y="50" width="150" height="30" fill="#8da0cb" /><rect x="75" y="250" width="200" height="50" fill="#8da0cb" /><rect x="160" y="80" width="30" height="170" fill="#fc8d62" /><path class="profile-outline" d="M100 50 L250 50 L250 80 L190 80 L190 250 L275 250 L275 300 L75 300 L75 250 L160 250 L160 80 L100 80 Z" /><line class="profile-line" x1="160" y1="250" x2="190" y2="250" stroke-dasharray="4" /><line class="profile-line" x1="160" y1="80" x2="190" y2="80" stroke-dasharray="4" /><circle cx="260" cy="275" r="4" fill="black" /><line class="profile-line" x1="260" y1="275" x2="260" y2="230" /><text class="profile-label" x="260" y="220" fill="black" text-anchor="middle">Bottom Flange</text><circle cx="240" cy="65" r="4" fill="black" /><line class="profile-line" x1="240" y1="65" x2="240" y2="100" /><text class="profile-label" x="240" y="120" fill="black" text-anchor="middle">Top Flange</text><line class="profile-line" x1="55" y1="50" x2="55" y2="300" /><line class="profile-line" x1="45" y1="50" x2="90" y2="50" /><line class="profile-line" x1="45" y1="300" x2="65" y2="300" /><text class="profile-label" x="-175" y="45" fill="black" text-anchor="middle" transform="rotate(-90)">Depth</text><line class="profile-line" x1="80" y1="50" x2="80" y2="175" /><line class="profile-line" x1="70" y1="175" x2="150" y2="175" /><text class="profile-label" x="-110" y="75" fill="black" text-anchor="middle" transform="rotate(-90)">0.5&amp;times;Depth</text><circle cx="175" cy="140" r="4" fill="black" /><line class="profile-line" x1="135" y1="140" x2="175" y2="140" /><text class="profile-label" x="130" y="145" fill="black" text-anchor="end">Web</text><circle class="profile-origin" cx="175" cy="175" r="6" /><text class="profile-label" x="195" y="175" fill="black" text-anchor="start">Origin</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Web(self) -> IWeb:
        """
        """
        pass

    @Web.setter
    def Web(self, value: IWeb) -> None: ...

    @property
    def BottomFlange(self) -> IFlange:
        """
        """
        pass

    @BottomFlange.setter
    def BottomFlange(self, value: IFlange) -> None: ...

    @property
    def TopFlange(self) -> IFlange:
        """
        """
        pass

    @TopFlange.setter
    def TopFlange(self, value: IFlange) -> None: ...

    @staticmethod
    def Create(depth: Length, topFlange: IFlange, bottomFlange: IFlange, web: IWeb) -> IIBeamAsymmetricalProfile:
        """Creates a new "IIBeamAsymmetricalProfile" profile from its
        "None Depth",
        "Property TopFlange",
        "Property BottomFlange" and
        "Property Web".
        <param name="depth">Defines the profile's depth.</param><param name="topFlange">Defines the profile's top flange.</param><param name="bottomFlange">Defines the profile's bottom flange.</param><param name="web">Defines the profile's web.</param>

        :return: I-beam-asymmetrical profile with the specified dimensions.
        :rtype: IIBeamAsymmetricalProfile
        """
        pass


# noinspection PyPep8Naming
class IIBeamCellularProfile(IIBeamProfile, IProfile, metaclass=ABCMeta):
    """A cellular I-beam section profile.
    It is an I-beam section profile with an opening at the centre of the web.
    <center><svg style="border:1px solid black" height="350" width="350"><rect x="75" y="50" width="200" height="50" fill="#8da0cb" /><rect x="75" y="250" width="200" height="50" fill="#8da0cb" /><rect x="160" y="100" width="30" height="40" fill="#fc8d62" /><rect x="160" y="210" width="30" height="40" fill="#fc8d62" /><path class="profile-outline" d="M75 50 L275 50 L275 100 L190 100 L190 140 L160 140 L160 100 L75 100 Z" /><path class="profile-outline" d="M190 210 L190 250 L275 250 L275 300 L75 300 L75 250 L160 250 L160 210 Z" /><line class="profile-line" x1="160" y1="250" x2="190" y2="250" stroke-dasharray="4" /><line class="profile-line" x1="160" y1="100" x2="190" y2="100" stroke-dasharray="4" /><line class="profile-line" x1="160" y1="140" x2="160" y2="210" stroke-dasharray="4" /><line class="profile-line" x1="190" y1="140" x2="190" y2="210" stroke-dasharray="4" /><circle cx="250" cy="275" r="4" fill="black" /><circle cx="250" cy="75" r="4" fill="black" /><line class="profile-line" x1="250" y1="275" x2="250" y2="220" /><line class="profile-line" x1="250" y1="75" x2="250" y2="195" /><text class="profile-label" x="250" y="210" fill="black" text-anchor="middle">Flanges</text><line class="profile-line" x1="55" y1="50" x2="55" y2="300" /><line class="profile-line" x1="45" y1="50" x2="65" y2="50" /><line class="profile-line" x1="45" y1="300" x2="65" y2="300" /><text class="profile-label" x="-175" y="45" fill="black" text-anchor="middle" transform="rotate(-90)">Depth</text><line class="profile-line" x1="140" y1="140" x2="140" y2="210" /><line class="profile-line" x1="130" y1="140" x2="150" y2="140" /><line class="profile-line" x1="130" y1="210" x2="150" y2="210" /><text class="profile-label" x="-175" y="120" fill="black" text-anchor="middle" transform="rotate(-90)">Web Opening</text><circle cx="175" cy="235" r="4" fill="black" /><line class="profile-line" x1="105" y1="235" x2="175" y2="235" /><text class="profile-label" x="100" y="240" fill="black" text-anchor="end">Web</text><circle class="profile-origin" cx="175" cy="175" r="6" /><text class="profile-label" x="195" y="175" fill="black" text-anchor="start">Origin</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def WebOpening(self) -> Length:
        """
        """
        pass

    @WebOpening.setter
    def WebOpening(self, value: Length) -> None: ...

    @property
    def Web(self) -> IWebConstant:
        """
        """
        pass

    @Web.setter
    def Web(self, value: IWebConstant) -> None: ...

    @property
    def Flanges(self) -> IFlange:
        """
        """
        pass

    @Flanges.setter
    def Flanges(self, value: IFlange) -> None: ...

    @staticmethod
    def Create(depth: Length, flanges: IFlange, web: IWebConstant, webOpening: Length) -> IIBeamCellularProfile:
        """Creates a new "IIBeamCellularProfile" profile from its
        "None Depth",
        "Property Flanges",
        "Property Web" and
        "Property WebOpening".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flanges: Defines the profile's flanges.
        :type flanges: IFlange
        :param web: Defines the profile's web.
        :type web: IWebConstant
        :param webOpening: Defines the size of the web opening.
        :type webOpening: Length
        """
        pass


# noinspection PyPep8Naming
class IIBeamSymmetricalProfile(IIBeamProfile, IProfile, metaclass=ABCMeta):
    """An IBeam symmetrical profile. This profile is symmetrical about its local z axis.
    <center><svg style="border:1px solid black" height="350" width="350"><rect x="75" y="50" width="200" height="50" fill="#8da0cb" /><rect x="75" y="250" width="200" height="50" fill="#8da0cb" /><rect x="160" y="100" width="30" height="150" fill="#fc8d62" /><path class="profile-outline" d="M75 50 L275 50 L275 100 L190 100 L190 250 L275 250 L275 300 L75 300 L75 250 L160 250 L160 100 L75 100 Z" /><line class="profile-line" x1="160" y1="250" x2="190" y2="250" stroke-dasharray="4" /><line class="profile-line" x1="160" y1="100" x2="190" y2="100" stroke-dasharray="4" /><circle cx="250" cy="275" r="4" fill="black" /><circle cx="250" cy="75" r="4" fill="black" /><line class="profile-line" x1="250" y1="275" x2="250" y2="200" /><line class="profile-line" x1="250" y1="75" x2="250" y2="175" /><text class="profile-label" x="250" y="190" fill="black" text-anchor="middle">Flanges</text><line class="profile-line" x1="55" y1="50" x2="55" y2="300" /><line class="profile-line" x1="45" y1="50" x2="65" y2="50" /><line class="profile-line" x1="45" y1="300" x2="65" y2="300" /><text class="profile-label" x="-175" y="45" fill="black" text-anchor="middle" transform="rotate(-90)">Depth</text><circle cx="175" cy="140" r="4" fill="black" /><line class="profile-line" x1="135" y1="140" x2="175" y2="140" /><text class="profile-label" x="130" y="145" fill="black" text-anchor="end">Web</text><circle class="profile-origin" cx="175" cy="175" r="6" /><text class="profile-label" x="110" y="185" fill="black" text-anchor="start">Origin</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Web(self) -> IWebConstant: ...

    @Web.setter
    def Web(self, value: IWebConstant) -> None: ...

    @property
    def Flanges(self) -> IFlange:
        """
        """
        pass

    @Flanges.setter
    def Flanges(self, value: IFlange) -> None: ...

    @staticmethod
    def Create(depth: Length, flanges: IFlange, web: IWebConstant) -> IIBeamSymmetricalProfile:
        """Creates a new "IIBeamSymmetricalProfile" profile from its
        "None Depth",
        "Property Flanges" and
        "Property Web".
        <param name="depth">Defines the profile's depth.</param><param name="flanges">Defines both the profile's flanges.</param><param name="web">Defines the profile's web.</param>

        :return: I-beam-symmetrical profile with the specified dimensions.
        :rtype: IIBeamSymmetricalProfile
        """
        pass


# noinspection PyPep8Naming
class IPerimeterProfile(IProfile, metaclass=ABCMeta):
    """Defines a perimeter section profile from
    "Property SolidPolygon" and
    "Property VoidPolygons".br /centerimg src="../images/Profiles/Perimeter.PNG" //center
    "IPerimeterProfile" inherits "IProfile".
    
    
    See "~/articles/glossary.html#perimeter-profileperimeter-profile""Glossary/see
    """

    @property
    def VoidPolygons(self) -> IList[IPolygon]:
        """
        """
        pass

    @VoidPolygons.setter
    def VoidPolygons(self, value: IList[IPolygon]) -> None: ...

    @property
    def SolidPolygon(self) -> IPolygon:
        """
        """
        pass

    @SolidPolygon.setter
    def SolidPolygon(self, value: IPolygon) -> None: ...

    @staticmethod
    @typing.overload
    def Create(profile: IProfile) -> IPerimeterProfile:
        """Creates a new "IPerimeterProfile" profile from any other profile.

        :param profile: The profile to be converted to an equivalent perimeter profile.
        :type profile: IProfile
        :return: Perimeter profile equivalent to the given profile.
        :rtype: IPerimeterProfile
        """
        pass

    @staticmethod
    @typing.overload
    def Create() -> IPerimeterProfile:
        """Creates a new "IPerimeterProfile" profile.

        :return: Perimeter profile with empty solid and void polygons.
        :rtype: IPerimeterProfile
        """
        pass


# noinspection PyPep8Naming
class IPolygon(metaclass=ABCMeta):
    """A 2D polygon for defining section profile geometry.
    """

    @property
    def Points(self) -> IList[IPoint]:
        """
        """
        pass

    @Points.setter
    def Points(self, value: IList[IPoint]) -> None: ...

    @staticmethod
    def Create() -> IPolygon:
        """Creates a new "IPolygon".

        :return: Polygon with zero vertices.
        :rtype: IPolygon
        """
        pass


# noinspection PyPep8Naming
class IRectangleHollowProfile(IProfile, metaclass=ABCMeta):
    """Defines a hollow rectangular section profile from
    "Property Depth",
    "Property Flanges" and
    "Property Webs".br /centersvg style="border:1px solid black" height="350" width="350"rect x="75" y="50" width="200" height="50" fill="#8da0cb" /rect x="75" y="250" width="200" height="50" fill="#8da0cb" /rect x="75" y="100" width="30" height="150" fill="#fc8d62" /rect x="245" y="100" width="30" height="150" fill="#fc8d62" /rect class="profile-line" x="75" y="50" width="200" height="250" fill="none" /rect class="profile-line" x="105" y="100" width="140" height="150" fill="none" /line class="profile-line" x1="75" y1="250" x2="275" y2="250" stroke-dasharray="4" /line class="profile-line" x1="75" y1="100" x2="275" y2="100" stroke-dasharray="4" /circle cx="200" cy="275" r="4" fill="black" /circle cx="200" cy="75" r="4" fill="black" /line class="profile-line" x1="200" y1="275" x2="200" y2="220" /line class="profile-line" x1="200" y1="75" x2="200" y2="195" /text class="profile-label" x="200" y="210" fill="black" text-anchor="middle"Flanges/textline class="profile-line" x1="55" y1="50" x2="55" y2="300" /line class="profile-line" x1="45" y1="50" x2="65" y2="50" /line class="profile-line" x1="45" y1="300" x2="65" y2="300" /text class="profile-label" x="-175" y="45" fill="black" text-anchor="middle" transform="rotate(-90)"Depth/textcircle cx="260" cy="140" r="4" fill="black" /line class="profile-line" x1="175" y1="140" x2="260" y2="140" /circle cx="90" cy="140" r="4" fill="black" /line class="profile-line" x1="90" y1="140" x2="125" y2="140" /text class="profile-label" x="170" y="145" fill="black" text-anchor="end"Webs/textcircle class="profile-origin" cx="175" cy="175" r="6" /text class="profile-label" x="120" y="185" fill="black" text-anchor="start"Origin/textstyle
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Webs(self) -> IWebConstant:
        """
        """
        pass

    @Webs.setter
    def Webs(self, value: IWebConstant) -> None: ...

    @property
    def Flanges(self) -> IFlange:
        """
        """
        pass

    @Flanges.setter
    def Flanges(self, value: IFlange) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flanges: IFlange, webs: IWebConstant) -> IRectangleHollowProfile:
        """Creates a new "IRectangleHollowProfile" profile from its
        "Property Depth",
        "Property Flanges""Property Webs".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flanges: Defines the profile's flanges.
        :type flanges: IFlange
        :param webs: Defines the profile's webs.
        :type webs: IWebConstant
        :return: Hollow rectangle profile with the specified dimensions.
        :rtype: IRectangleHollowProfile
        """
        pass


# noinspection PyPep8Naming
class ITrapezoidProfileAbstractInterface(IProfile, metaclass=ABCMeta):
    """Defines trapezoid profile.
    """

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @property
    def BottomWidth(self) -> Length:
        """
        """
        pass

    @property
    def TopWidth(self) -> Length:
        """
        """
        pass


# noinspection PyPep8Naming
class IRectangleProfile(ITrapezoidProfileAbstractInterface, IProfile, metaclass=ABCMeta):
    """Defines a rectangular section profile.
    <center><svg style="border:1px solid black" height="350" width="350"><rect class="profile-line" x="100" y="75" width="150" height="200" fill="#8da0cb" /><line class="profile-line" x1="80" y1="75" x2="80" y2="275" /><line class="profile-line" x1="70" y1="75" x2="90" y2="75" /><line class="profile-line" x1="70" y1="275" x2="90" y2="275" /><text class="profile-label" x="-175" y="70" fill="black" text-anchor="middle" transform="rotate(-90)">Depth</text><line class="profile-line" x1="100" y1="295" x2="250" y2="295" /><line class="profile-line" x1="100" y1="285" x2="100" y2="305" /><line class="profile-line" x1="250" y1="285" x2="250" y2="305" /><text class="profile-label" x="175" y="320" fill="black" text-anchor="middle">Width</text><circle class="profile-origin" cx="175" cy="175" r="6" /><text class="profile-label" x="175" y="165" fill="black" text-anchor="start">Origin</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Width(self) -> Length:
        """
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length) -> IRectangleProfile:
        """Creates a new "IRectangleProfile" profile from its
        "None Depth""Property Width"param name="depth"Defines the profile's depth/paramparam name="width"Defines the profile's width/param

        :return: Rectangular profile with the specified width.
        :rtype: IRectangleProfile
        """
        pass


# noinspection PyPep8Naming
class IRectoEllipseProfile(IProfile, metaclass=ABCMeta):
    """A rectangular section profile with elliptical corners.
    """

    @property
    def WidthFlat(self) -> Length:
        """
        """
        pass

    @WidthFlat.setter
    def WidthFlat(self, value: Length) -> None: ...

    @property
    def Width(self) -> Length:
        """
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def DepthFlat(self) -> Length:
        """
        """
        pass

    @DepthFlat.setter
    def DepthFlat(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, depthFlat: Length, width: Length, widthFlat: Length) -> IRectoEllipseProfile:
        """Creates a new "IRectoEllipseProfile" profile from its
        "Property Depth",
        "Property DepthFlat",
        "Property Width" and
        "Property WidthFlat".

        :param depth: Defines the overall depth of the profile.
        :type depth: Length
        :param depthFlat: Defines the flat length of the profile's overall depth.
        :type depthFlat: Length
        :param width: Defines the overall width of the profile.
        :type width: Length
        :param widthFlat: Defines the flat length of the profile's overall width.
        :type widthFlat: Length
        """
        pass


# noinspection PyPep8Naming
class ISecantPileProfile(IProfile, metaclass=ABCMeta):
    """A secant pile section profile.
    """

    @property
    def IsWallNotSection(self) -> bool:
        """
        """
        pass

    @IsWallNotSection.setter
    def IsWallNotSection(self, value: bool) -> None: ...

    @property
    def PileCount(self) -> int:
        """
        """
        pass

    @PileCount.setter
    def PileCount(self, value: int) -> None: ...

    @property
    def PileCentres(self) -> Length:
        """
        """
        pass

    @PileCentres.setter
    def PileCentres(self, value: Length) -> None: ...

    @property
    def Diameter(self) -> Length:
        """
        """
        pass

    @Diameter.setter
    def Diameter(self, value: Length) -> None: ...

    @staticmethod
    def Create(diameter: Length, pileCentres: Length, pileCount: int, isWallNotSection: bool) -> ISecantPileProfile:
        """Creates a new "ISecantPileProfile" profile from its
        "Property Diameter",
        "Property PileCentres",
        "Property PileCount" and
        "Property IsWallNotSection".

        :param diameter: Defines the diameter of the piles.
        :type diameter: Length
        :param pileCentres: Defines the centre to centre distance between adjacent piles.
        :type pileCentres: Length
        :param pileCount: Defines the number of piles in the profile.
        :type pileCount: int
        :param isWallNotSection: 
Converts the profile into a wall secant pile profile if true.
Converts the profile into a section secant pile profile if false.
        :type isWallNotSection: bool
        """
        pass


# noinspection PyPep8Naming
class ISheetPileProfile(IProfile, metaclass=ABCMeta):
    """A sheet pile section profile.
    """

    @property
    def WebThickness(self) -> Length:
        """
        """
        pass

    @WebThickness.setter
    def WebThickness(self, value: Length) -> None: ...

    @property
    def FlangeThickness(self) -> Length:
        """
        """
        pass

    @FlangeThickness.setter
    def FlangeThickness(self, value: Length) -> None: ...

    @property
    def BottomFlangeWidth(self) -> Length:
        """
        """
        pass

    @BottomFlangeWidth.setter
    def BottomFlangeWidth(self, value: Length) -> None: ...

    @property
    def TopFlangeWidth(self) -> Length:
        """
        """
        pass

    @TopFlangeWidth.setter
    def TopFlangeWidth(self, value: Length) -> None: ...

    @property
    def Width(self) -> Length:
        """
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length, topFlangeWidth: Length, bottomFlangeWidth: Length, flangeThickness: Length, webThickness: Length) -> ISheetPileProfile:
        """Creates a new "ISheetPileProfile" profile from its
        "Property Depth",
        "Property Width",
        "Property TopFlangeWidth",
        "Property BottomFlangeWidth",
        "Property FlangeThickness" and
        "Property WebThickness".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param width: Defines the profile's overall width.
        :type width: Length
        :param topFlangeWidth: Defines the profile's top flange width.
        :type topFlangeWidth: Length
        :param bottomFlangeWidth: Defines the profile's bottom flange width.
        :type bottomFlangeWidth: Length
        :param flangeThickness: Defines the profile's flange thickness.
        :type flangeThickness: Length
        :param webThickness: Defines the profile's web thickness.
        :type webThickness: Length
        """
        pass


# noinspection PyPep8Naming
class IStadiumProfile(IProfile, metaclass=ABCMeta):
    """A stadium section profile.
    It is a profile consisting of a rectangle whose ends are capped off with semicircles.
    """

    @property
    def Width(self) -> Length:
        """
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length) -> IStadiumProfile:
        """Creates a new "IStadiumProfile" profile from its
        "Property Depth" and
        "Property Width".

        :param depth: 
Defines the profile's overall depth
considering the side length of the rectangle
and the radii of the semicircles on the two ends.
        :type depth: Length
        :param width: 
Defines the profile's width
(diameter of the semicircles).
        :type width: Length
        """
        pass


# noinspection PyPep8Naming
class ITrapezoidProfile(ITrapezoidProfileAbstractInterface, IProfile, metaclass=ABCMeta):
    """Defines a trapezoidal profile.
    """

    @property
    def BottomWidth(self) -> Length:
        """
        """
        pass

    @BottomWidth.setter
    def BottomWidth(self, value: Length) -> None: ...

    @property
    def TopWidth(self) -> Length:
        """
        """
        pass

    @TopWidth.setter
    def TopWidth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, topWidth: Length, bottomWidth: Length) -> ITrapezoidProfile:
        """Creates a new "ITrapezoidProfile" profile from its
        "None Depth""Property TopWidth" and
        "Property BottomWidth".
        <param name="depth">Defines the profile's depth.</param><param name="topWidth">Defines the profile's top width.</param><param name="bottomWidth">Defines the profile's bottom width.</param>

        :return: Trapezoid profile with the specified dimensions.
        :rtype: ITrapezoidProfile
        """
        pass


# noinspection PyPep8Naming
class ITSectionProfile(IProfile, metaclass=ABCMeta):
    """Defines a Tee section profile.<br /><center><svg style="border:1px solid black" height="350" width="350"><rect x="75" y="50" width="200" height="50" fill="#8da0cb" /><rect x="160" y="100" width="30" height="200" fill="#fc8d62" /><path class="profile-outline" d="M75 50 L275 50 L275 100 L190 100 L190 300 L160 300 L160 100 L75 100 Z" /><line class="profile-line" x1="160" y1="100" x2="190" y2="100" stroke-dasharray="4" /><circle cx="250" cy="75" r="4" fill="black" /><line class="profile-line" x1="250" y1="75" x2="250" y2="135" /><text class="profile-label" x="250" y="150" fill="black" text-anchor="middle">Flange</text><line class="profile-line" x1="55" y1="50" x2="55" y2="300" /><line class="profile-line" x1="45" y1="50" x2="65" y2="50" /><line class="profile-line" x1="45" y1="300" x2="65" y2="300" /><text class="profile-label" x="-175" y="45" fill="black" text-anchor="middle" transform="rotate(-90)">Depth</text><circle cx="175" cy="140" r="4" fill="black" /><line class="profile-line" x1="135" y1="140" x2="175" y2="140" /><text class="profile-label" x="130" y="145" fill="black" text-anchor="end">Web</text><circle class="profile-origin" cx="175" cy="50" r="6" /><text class="profile-label" x="180" y="40" fill="black" text-anchor="start">Origin</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def Depth(self) -> Length:
        """
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @property
    def Web(self) -> IWeb:
        """
        """
        pass

    @Web.setter
    def Web(self, value: IWeb) -> None: ...

    @property
    def Flange(self) -> IFlange:
        """
        """
        pass

    @Flange.setter
    def Flange(self, value: IFlange) -> None: ...

    @staticmethod
    def Create(depth: Length, flange: IFlange, web: IWeb) -> ITSectionProfile:
        """Creates a new "ITSectionProfile" profile from its
        "Property Depth",
        "Property Flange" and
        "Property Web".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flange: Defines the profile's flange thickness.
        :type flange: IFlange
        :param web: Defines the profile's web thickness.
        :type web: IWeb
        :return: Tee section profile with the specified dimensions.
        :rtype: ITSectionProfile
        """
        pass


# noinspection PyPep8Naming
class IWebTapered(IWeb, metaclass=ABCMeta):
    """A tapered web used in profiles.
    <center><svg style="border:1px solid black" height="350" width="350"><path class="profile-line" d="M120 75 L230 75 L200 275 L150 275 Z" fill="#fc8d62" /><line class="profile-line" x1="120" y1="60" x2="230" y2="60" /><line class="profile-line" x1="120" y1="50" x2="120" y2="70" /><line class="profile-line" x1="230" y1="50" x2="230" y2="70" /><text class="profile-label" x="175" y="50" fill="black" text-anchor="middle">Top Thickness</text><line class="profile-line" x1="150" y1="290" x2="200" y2="290" /><line class="profile-line" x1="150" y1="280" x2="150" y2="300" /><line class="profile-line" x1="200" y1="280" x2="200" y2="300" /><text class="profile-label" x="175" y="320" fill="black" text-anchor="middle">Bottom Thickness</text><style>
    .profile-label { font: 16px sans-serif; }
    .profile-line {stroke:black;stroke-width:2;}
    .profile-outline {stroke:black;stroke-width:2; fill:none;}
    .profile-origin {stroke:#597a23;stroke-width:2; fill:#a6d854;}
    </style></svg></center>
    """

    @property
    def BottomThickness(self) -> Length:
        """
        """
        pass

    @BottomThickness.setter
    def BottomThickness(self, value: Length) -> None: ...

    @property
    def TopThickness(self) -> Length:
        """
        """
        pass

    @TopThickness.setter
    def TopThickness(self, value: Length) -> None: ...

    @staticmethod
    def Create(topThickness: Length, bottomThickness: Length) -> IWebTapered:
        """Creates a new "IWebTapered" from its
        "Property TopThickness" and
        "Property BottomThickness".

        :param topThickness: Defines the web's top thickness.
        :type topThickness: Length
        :param bottomThickness: Defines the web's bottom thickness.
        :type bottomThickness: Length
        :return: Tapered thickness web with the specified dimension.
        :rtype: IWebTapered
        """
        pass
