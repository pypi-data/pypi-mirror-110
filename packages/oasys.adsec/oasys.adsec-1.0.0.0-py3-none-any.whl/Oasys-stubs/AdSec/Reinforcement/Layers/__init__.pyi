#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from Oasys.AdSec.Reinforcement import IBarBundle
from UnitsNet import Length


# noinspection PyPep8Naming
class ILayer(metaclass=ABCMeta):
    """A reinforcement layer.
    
    See "~/articles/glossary.html#layerlayer""Glossary/see
    """

    @property
    def BarBundle(self) -> IBarBundle:
        """
        """
        pass

    @BarBundle.setter
    def BarBundle(self, value: IBarBundle) -> None: ...


# noinspection PyPep8Naming
class ILayerByBarCount(ILayer, metaclass=ABCMeta):
    """A reinforcement layer defined by the number of bundles or single bars in the layer.
    """

    @property
    def Count(self) -> int:
        """
        """
        pass

    @Count.setter
    def Count(self, value: int) -> None: ...

    @staticmethod
    def Create(count: int, barBundle: IBarBundle) -> ILayerByBarCount:
        """Creates a new "ILayerByBarCount" from the position count and bar (or bundle of bars) to be placed at each position.

        :param count: Defines the number of bars in the layer.
        :type count: int
        :param barBundle: Defines the bar (or bundle of bars) that will be placed at each position.
        :type barBundle: IBarBundle
        :return: Reinforcement layer with the specified bar count and bar bundle.
        :rtype: ILayerByBarCount
        """
        pass


# noinspection PyPep8Naming
class ILayerByBarPitch(ILayer, metaclass=ABCMeta):
    """A reinforcement layer defined by the bar pitch.
    """

    @property
    def Pitch(self) -> Length:
        """
        """
        pass

    @Pitch.setter
    def Pitch(self, value: Length) -> None: ...

    @staticmethod
    def Create(barBundle: IBarBundle, pitch: Length) -> ILayerByBarPitch:
        """Creates a new "ILayerByBarPitch" from the position centre-to-centre
        spacing (pitch) and bar (or bundle of bars) to be placed at each position.

        :param barBundle: Defines the bar (or bundle of bars) that will be placed at each position.
        :type barBundle: IBarBundle
        :param pitch: Defines the centre-to-centre spacing of bar bundles in the layer.
        :type pitch: Length
        :return: Reinforcement layer with the specified bar bundle and pitch.
        :rtype: ILayerByBarPitch
        """
        pass
