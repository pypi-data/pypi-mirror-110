{"version":3,"sources":["webpack://jupyterlab-python-file/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAuD;AACN;AACa;AACb;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,2DAAS,EAAE,2DAAS,EAAE,iEAAe;AACzE;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA,aAAa;AACb;AACA;AACA;AACA,6CAA6C,UAAU;AACvD;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","file":"lib_index_js.3659277a81b7993d5df0.js","sourcesContent":["import { ICommandPalette } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nconst FACTORY = 'Editor';\nconst ICON_CLASS = 'jp-PythonIcon';\nconst PALETTE_CATEGORY = 'Text Editor';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'fileeditor:create-new-python-file';\n})(CommandIDs || (CommandIDs = {}));\nconst plugin = {\n    id: 'jupyterlab-python-file',\n    autoStart: true,\n    optional: [IFileBrowserFactory, ILauncher, IMainMenu, ICommandPalette],\n    activate: (app, browserFactory, launcher, menu, palette) => {\n        const { commands, contextMenu } = app;\n        const command = CommandIDs.createNew;\n        commands.addCommand(command, {\n            label: args => args['isPalette'] || args['isContextMenu']\n                ? 'New Python File'\n                : 'Python File',\n            caption: 'Create a new Python file',\n            iconClass: args => (args['isPalette'] ? '' : ICON_CLASS),\n            execute: async (args) => {\n                var _a, _b;\n                const cwd = (_b = (_a = args['cwd']) !== null && _a !== void 0 ? _a : browserFactory === null || browserFactory === void 0 ? void 0 : browserFactory.defaultBrowser.model.path) !== null && _b !== void 0 ? _b : undefined;\n                const model = await commands.execute('docmanager:new-untitled', {\n                    path: cwd,\n                    type: 'file',\n                    ext: 'py'\n                });\n                return commands.execute('docmanager:open', {\n                    path: model.path,\n                    factory: FACTORY\n                });\n            }\n        });\n        // add to the file browser context menu\n        const selectorContent = '.jp-DirListing-content';\n        contextMenu.addItem({\n            command,\n            args: { isContextMenu: true },\n            selector: selectorContent,\n            rank: 3\n        });\n        // add to the launcher\n        if (launcher) {\n            launcher.add({\n                command,\n                category: 'Other',\n                rank: 1\n            });\n        }\n        // add to the palette\n        if (palette) {\n            palette.addItem({\n                command,\n                args: { isPalette: true },\n                category: PALETTE_CATEGORY\n            });\n        }\n        // add to the menu\n        if (menu) {\n            menu.fileMenu.newMenu.addGroup([{ command }], 30);\n        }\n    }\n};\nconst plugins = [plugin];\nexport default plugins;\n"],"sourceRoot":""}