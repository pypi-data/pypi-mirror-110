Metadata-Version: 2.1
Name: flaskstarter
Version: 0.2
Summary: A Flask project start-up CLI to create a modular ready projects.
Home-page: https://github.com/felipebastos/flaskstart
Author: Felipe Bastos Nunes
Author-email: felipe.bastosn@gmail.com
License: apache-2.0
Download-URL: https://github.com/felipebastos/flaskstart/archive/refs/tags/v0.2.tar.gz
Keywords: flask,cli,project
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Description-Content-Type: text/markdown
Requires-Dist: Jinja2
Requires-Dist: MarkupSafe
Requires-Dist: click

# flaskstarter
A Flask project start-up CLI to create modular ready projects.

Flaskstarter assumes you know about Flask microframework and its mechanics in a begginer level. It can be really helpfull if you are still using monolithic aproach, and needs to start using a modular architecture.

It also assumes you are using Python 3.6+.

To install flaskstarter use the usual:

`pip install flaskstarter`

To see its help:

`flaskstarter --help`

To start a project:

`flaskstarter init project_name`

To see init's help:

`flaskstarter init --help`

Now, after project creation, you can enter on its directory and make full use of manage.py, a script with a CLI that may help you to automate some tasks inside project tree.

By now you can create a blueprint structure by typing the bellow on project root:

`$ python manage.py createblueprint [blueprint_name]`

After that, remember to go on the app init file to register the blueprint on it.

To run your app you can use the bellow on project root:

`$ python manage.py runserver`

## What the project does for you

It creates project tree, a functional virtualenv on .venv, the init and routes files with a helloworld example and a manage.py script to run the project with the virtual enviroment created and attach blueprints to it. It now installs the requirements on project's .venv on POSIX systems.

## What the project does not do for you

It still can't update init file with modules configurations. By now blueprints aren't created with custom folder.

## Future

Add more power to manage.py.

